sample_id,query,Answer,image_path,truth_answers,code,accuracy
13151559,Is the large hair both white and soft?,no,./data/gqa/../images/2410936.jpg,yes,"def execute_command_13151559(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    hair_patch = hair_patches[0]
    is_large = hair_patch.simple_query(""Is the hair large?"") == ""yes""
    is_white = hair_patch.simple_query(""Is the hair white?"") == ""yes""
    is_soft = hair_patch.simple_query(""Is the hair soft?"") == ""yes""
    return bool_to_yesno(is_large and is_white and is_soft)",0
18370956,Who is eating the cupcake?,woman,./data/gqa/../images/2317542.jpg,woman,"def execute_command_18370956(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person and one cupcake
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    cupcake_patches = image_patch.find(""cupcake"")
    if len(person_patches) == 0 or len(cupcake_patches) == 0:
        return image_patch.simple_query(""Who is eating the cupcake?"")
    for person_patch in person_patches:
        for cupcake_patch in cupcake_patches:
            if cupcake_patch.simple_query(""Is the cupcake being eaten?"") == ""yes"":
                return person_patch.simple_query(""Who is eating the cupcake?"")",1
6436809,What is the guy wearing?,hat,./data/gqa/../images/2373592.jpg,sweatshirt,"def execute_command_6436809(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # asks for the predicate of a relational verb (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the guy wearing?"")",0
117037,Which kind of food is to the right of the cabbage?,sandwich,./data/gqa/../images/2365608.jpg,sandwich,"def execute_command_117037(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # could be any food
    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    # Question assumes only one cabbage patch
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    for cabbage_patch in cabbage_patches:
        food_patches = image_patch.find(""food"")
        # Question assumes only one food patch
        if len(food_patches) == 0:
            # If no food is found, query the image directly
            return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
        food_patch = food_patches[0]
        if food_patch.horizontal_center > cabbage_patch.horizontal_center:
            return food_patch.simple_query(""What kind of food is to the right of the cabbage?"")",1
758936,Who wears the cap?,man,./data/gqa/../images/2400175.jpg,skier,"def execute_command_758936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is only one cap
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    return cap_patches[0].simple_query(""Who wears the cap?"")",0
111046440,Who is pointing?,the catcher,./data/gqa/../images/2351822.jpg,player,"def execute_command_111046440(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person is pointing
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is pointing?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Who is pointing?"") # crop would include the pointing action so keep it in the query",0
15804389,Is the woman's hair short or long?,yes,./data/gqa/../images/2325937.jpg,long,"def execute_command_15804389(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is a predicate of a property
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    hair_patches = image_patch.find(""hair"")
    # Question assumes one hair patch
    if len(hair_patches) == 0:
        return ""no""
    hair_patch = hair_patches[0]
    return bool_to_yesno(woman_patch.verify_property(""woman"", ""short"") and woman_patch.verify_property(""woman"", ""long"")) # both are properties of the woman",0
11445636,The women are watching who?,the train,./data/gqa/../images/2391915.jpg,man,"def execute_command_11445636(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""women"")
    # Question assumes only one women patch
    if len(women_patches) == 0:
        # If no women is found, query the image directly
        return image_patch.simple_query(""The women are watching who?"")
    women_patch = women_patches[0]
    watching_patches = image_patch.find(""watching"")
    # Question assumes only one watching patch
    if len(watching_patches) == 0:
        return image_patch.simple_query(""The women are watching who?"")
    watching_patch = watching_patches[0]
    return watching_patch.simple_query(""The women are watching who?"")",0
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?,"Error Codigo: '(' was never closed (Codex, line 25)",./data/gqa/../images/2343545.jpg,yes,"def execute_command_17736165(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes a single image
    image_patch = ImagePatch(image)
    # assumes a single woman patch
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    woman_patch = woman_patches[0]
    # assumes a single kitchen patch
    kitchen_patches = image_patch.find(""kitchen"")
    if len(kitchen_patches) == 0:
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    kitchen_patch = kitchen_patches[0]
    # assumes a single gas_stove patch
    gas_stove_patches = image_patch.find(""gas_stove"")
    if len(gas_stove_patches) == 0:
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    gas_stove_patch = gas_stove_patches[0]
    # assumes a single dishwasher patch
    dishwasher_patches = image_patch.find(""dishwasher"")
    if len(dishwasher_patches) == 0:
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    dishwasher_patch = dishwasher_patches[0]
    # check if the dishwasher and the gas_stove are both inside the kitchen
    if not (dishwasher_patch.horizontal_center >",0
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?,white,./data/gqa/../images/2389006.jpg,bed,"def execute_command_1594898(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one bed and one baby
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    baby_patches = image_patch.find(""baby"")
    # Question assumes one bed patch and one baby patch
    if len(bed_patches) == 0 or len(baby_patches) == 0:
        # If no bed or baby is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_patch = bed_patches[0]
    baby_patch = baby_patches[0]
    if baby_patch.horizontal_center > bed_patch.horizontal_center:
        bed_sheet_color = bed_patch.simple_query(""What color is the bed sheet?"")
        furniture_patches = image_patch.find(""furniture"")
        # Question assumes one furniture patch
        if len(furniture_patches) == 0:
            # If no furniture is found, query the image directly
            return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
        furniture_patch = furniture_patches[0]
        return furniture_patch.best_text_match([furniture_patch.simple_query(""What color is it?"") for i in range(10)])
    return ""no""",0
758958,Is there either any red pillow or snowboard?,yes,./data/gqa/../images/2400175.jpg,yes,"def execute_command_758958(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is there either any red pillow or snowboard
    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)",1
143816,Which place is it?,a farm,./data/gqa/../images/2382258.jpg,field,"def execute_command_143816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming one place patch
    image_patch = ImagePatch(image)
    place_patches = image_patch.find(""place"")
    # Question assumes only one place patch
    if len(place_patches) == 0:
        # If no place is found, query the image directly
        return image_patch.simple_query(""Which place is it?"")
    return place_patches[0].simple_query(""Which place is it?"")",0
13741513,Which side is the knife on?,left,./data/gqa/../images/2325019.jpg,left,"def execute_command_13741513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one knife patch
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    if len(knife_patches) == 0:
        return image_patch.simple_query(""Which side is the knife on?"")
    knife_patch = knife_patches[0]
    if knife_patch.left < image_patch.left + (image_patch.right - image_patch.left) / 2:
        return ""left""
    else:
        return ""right""",1
17829769,What is the computer mouse in front of?,computer,./data/gqa/../images/2400080.jpg,computer,"def execute_command_17829769(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly",1
17233738,What is the toddler holding?,no object,./data/gqa/../images/2394369.jpg,skis,"def execute_command_17233738(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer to ""What is the toddler holding?""
    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    # Question assumes only one toddler patch
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    toddler_patch = toddler_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes one object patch
    if len(object_patches) == 0:
        return ""no object""
    object_patch = object_patches[0]
    if object_patch.horizontal_center < toddler_patch.horizontal_center:
        return ""no object""
    return object_patch.simple_query(""What is the toddler holding?"")",0
2951242,Is the gray shirt sleeveless or short sleeved?,short sleeved,./data/gqa/../images/2386013.jpg,short sleeved,"def execute_command_2951242(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # asks for a property of a part of an object, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")",1
15241795,Is the tank top red?,no,./data/gqa/../images/2358063.jpg,no,"def execute_command_15241795(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tank top red?"")",1
13885234,Which kind of animal is in front of the rocks?,elephant,./data/gqa/../images/2386629.jpg,elephant,"def execute_command_13885234(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not the best name
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is in front of the rocks?"") # crop would include the rocks so keep it in the query
    # If no animal is in front of the rocks, query the image directly
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")",1
19335715,Do you see any grapes?,no,./data/gqa/../images/2404433.jpg,no,"def execute_command_19335715(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""grapes""))",1
6455591,What type of furniture is white?,antique,./data/gqa/../images/2349792.jpg,cabinets,"def execute_command_6455591(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of furniture is white?"")",0
1033761,What is the blue clothing item?,baseball cap,./data/gqa/../images/2405536.jpg,uniform,"def execute_command_1033761(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the clothing item
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    blue_patches = [patch for patch in clothing_patches if patch.verify_property(""clothing"", ""blue"")]
    if len(blue_patches) == 0:
        # If no blue clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    return blue_patches[0].simple_query(""What is the blue clothing item?"")",0
17726504,Who is wearing the glasses?,the woman,./data/gqa/../images/2349045.jpg,people,"def execute_command_17726504(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing the glasses?"")
    person_patch = person_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    if len(glasses_patches) == 0:
        return ""no one""
    glasses_patch = glasses_patches[0]
    if person_patch.horizontal_center > glasses_patch.horizontal_center:
        return ""no one""
    return person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query",0
13112902,Is the woman wearing a bracelet?,no,./data/gqa/../images/2356577.jpg,yes,"def execute_command_13112902(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman wearing a bracelet?"")",0
698766,What is the food that is not white?,no food is not white,./data/gqa/../images/2323182.jpg,lettuce,"def execute_command_698766(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Not sure if this works
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""white""):
            return food_patch.simple_query(""What is the food that is not white?"")
    return ""no food is not white""",0
1332276,Are there both a cup and a bottle in the picture?,yes,./data/gqa/../images/2385859.jpg,yes,"def execute_command_1332276(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # changed to def execute_command(image)->str
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)",1
12633088,What color is that glove?,blue,./data/gqa/../images/713282.jpg,gray,"def execute_command_12633088(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # if glove is not found, ask the image directly
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"") # crop would include the glove so keep it in the query",0
18103787,Who is holding the helmet?,the man,./data/gqa/../images/2378758.jpg,boy,"def execute_command_18103787(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for person_patch in person_patches:
        helmet_patches = image_patch.find(""helmet"")
        for helmet_patch in helmet_patches:
            if helmet_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is holding the helmet?"") # crop would include the helmet so keep it in the query
    return person_patches[0].simple_query(""Who is holding the helmet?"")",0
2143247,What is the name of the food to the left of the donut that looks little?,cinnamon roll,./data/gqa/../images/2317344.jpg,pastry,"def execute_command_2143247(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (to the left of) and a descriptor (looks little), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")",0
3767951,Is the clock to the right or to the left of the man on the left?,right,./data/gqa/../images/285673.jpg,right,"def execute_command_3767951(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # man on the left is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")",1
17655180,What's the sticker on?,wall,./data/gqa/../images/2409933.jpg,sign,"def execute_command_17655180(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a sticker on
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What's the sticker on?"")
    sticker_patch = sticker_patches[0]
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return sticker_patch.simple_query(""What's the sticker on?"") # crop would include the sticker so keep it in the query",0
3468831,In front of what is this table?,bottle,./data/gqa/../images/2355360.jpg,tree,"def execute_command_3468831(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In front of what is this table?"")",0
5888523,Do you see people to the right of the still car?,yes,./data/gqa/../images/2352943.jpg,no,"def execute_command_5888523(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    still_car_patches = image_patch.find(""still car"")
    # Question assumes one still car patch
    if len(still_car_patches) == 0:
        # If no still car is found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    people_patch = people_patches[0]
    if people_patch.horizontal_center > still_car_patches[0].horizontal_center:
        return ""yes""
    return ""no""",0
7188981,Does the giraffe look adult?,yes,./data/gqa/../images/2404963.jpg,no,"def execute_command_7188981(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one giraffe patch
    image_patch = ImagePatch(image)
    giraffe_patch = image_patch.find(""giraffe"")[0]
    return bool_to_yesno(giraffe_patch.verify_property(""giraffe"", ""adult""))",0
16852802,Of what color are the pants?,black,./data/gqa/../images/2359824.jpg,gray,"def execute_command_16852802(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # -> str
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"")",0
9619158,What kind of watercraft is full of men?,boat,./data/gqa/../images/2406392.jpg,boat,"def execute_command_9619158(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # return the answer as a string
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    watercraft_patch = watercraft_patches[0]
    men_patches = image_patch.find(""men"")
    # Question assumes only one men patch
    if len(men_patches) == 0:
        return ""no""
    men_patch = men_patches[0]
    if len(watercraft_patch.find(""men"")) > 0:
        return watercraft_patch.simple_query(""What kind of watercraft is full of men?"")
    return ""no""",1
3625225,On which side of the picture are the boats?,left,./data/gqa/../images/1054.jpg,left,"def execute_command_3625225(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one boat patch
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    if boat_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
7126345,Does the elephant to the left of the other elephant have large size?,yes,./data/gqa/../images/2416088.jpg,yes,"def execute_command_7126345(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # change to image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes two elephant patches
    if len(elephant_patches) < 2:
        # If not two elephants are found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_patch = elephant_patches[0]
    right_patch = elephant_patches[1]
    if left_patch.horizontal_center < right_patch.horizontal_center:
        return bool_to_yesno(left_patch.verify_property(""elephant"", ""large""))
    else:
        return bool_to_yesno(right_patch.verify_property(""elephant"", ""large""))",1
19834124,What is the girl holding?,paper bag,./data/gqa/../images/2384946.jpg,phone,"def execute_command_19834124(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    for girl_patch in girl_patches:
        patches = image_patch.find(""object"")
        # Question assumes only one object patch
        if len(patches) == 0:
            return girl_patch.simple_query(""What is the girl holding?"")
        return patches[0].simple_query(""What is the girl holding?"")",0
4617704,Does the toilet seat that is not down appear to be white and open?,yes,./data/gqa/../images/2397470.jpg,yes,"def execute_command_4617704(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This function should be called 'execute_command' to avoid conflicts with the class
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")
    for toilet_patch in toilet_patches:
        is_not_down = (toilet_patch.simple_query(""Is the toilet seat down?"") == ""no"")
        is_white = (toilet_patch.simple_query(""Does the toilet appear to be white?"") == ""yes"")
        is_open = (toilet_patch.simple_query(""Is the toilet open?"") == ""yes"")
        if is_not_down and is_white and is_open:
            return ""yes""
    # If no toilet seat that is not down appears to be white and open, query the image directly
    return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")",1
5899539,Are there any bottles or mugs that are not purple?,yes,./data/gqa/../images/2386338.jpg,no,"def execute_command_5899539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle, mug, purple
    image_patch = ImagePatch(image)
    bottles_patches = image_patch.find(""bottle"")
    mugs_patches = image_patch.find(""mug"")
    bottles_and_mugs_patches = bottles_patches + mugs_patches
    # Question assumes all bottles and mugs are either purple or not
    if len(bottles_and_mugs_patches) == 0:
        return ""yes""
    for bottle_or_mug in bottles_and_mugs_patches:
        if not bottle_or_mug.verify_property(""bottle"", ""purple"") and not bottle_or_mug.verify_property(""mug"", ""purple""):
            return ""yes""
    return ""no""",0
2631593,Which place is it?,city,./data/gqa/../images/2412366.jpg,sidewalk,"def execute_command_2631593(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # probably needs to be a list of places
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
12228864,Do you see any men to the right of the person that is in the living room?,no,./data/gqa/../images/2324040.jpg,yes,"def execute_command_12228864(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (in the living room), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")",0
111054378,Is the small couch to the right or to the left of the bottle?,right,./data/gqa/../images/2386495.jpg,right,"def execute_command_111054378(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ask for the relation
    image_patch = ImagePatch(image)
    small_couch_patches = image_patch.find(""small couch"")
    # Question assumes only one small couch patch
    if len(small_couch_patches) == 0:
        # If no small couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    small_couch_patch = small_couch_patches[0]
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        return ""no""
    bottle_patch = bottle_patches[0]
    if small_couch_patch.horizontal_center > bottle_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
9392411,Is the bottle to the right or to the left of the appliance on the left?,right,./data/gqa/../images/2323628.jpg,right,"def execute_command_9392411(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is the same as the above command but for two objects
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    for bottle_patch in bottle_patches:
        appliance_patches = image_patch.find(""appliance"")
        # Question assumes only one appliance patch
        if len(appliance_patches) == 0:
            return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
        appliance_patch = appliance_patches[0]
        if appliance_patch.horizontal_center < image_patch.horizontal_center:
            if bottle_patch.horizontal_center > appliance_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
    return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")",1
16753829,What type of animal is sitting in the container in the bottom of the photo?,cat,./data/gqa/../images/2414356.jpg,cats,"def execute_command_16753829(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a 3D array
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    for container_patch in container_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            # If no animal is found, query the image directly
            return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
        for animal_patch in animal_patches:
            if animal_patch.vertical_center > container_patch.vertical_center:
                return animal_patch.best_text_match([""dog"", ""cat"", ""bird"", ""fish""])",0
1345482,What is that train in front of?,wall,./data/gqa/../images/2404342.jpg,windows,"def execute_command_1345482(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"") # contains a relation so ask directly",0
1527449,Are there cars to the right of the palm trees which are to the right of the girl?,no,./data/gqa/../images/2363853.jpg,yes,"def execute_command_1527449(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # does not work with the current implementation of the find method
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    girl_patch = girl_patches[0]
    palm_tree_patches = image_patch.find(""palm tree"")
    # Question assumes only one palm tree patch
    if len(palm_tree_patches) == 0:
        return ""no""
    palm_tree_patch = palm_tree_patches[0]
    if palm_tree_patch.horizontal_center < girl_patch.horizontal_center:
        return ""no""
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        return ""no""
    car_patch = car_patches[0]
    if car_patch.horizontal_center > palm_tree_patch.horizontal_center:
        return ""yes""
    return ""no"" # does not check the relation between the car and the palm tree",0
459445,In which part is the silver device?,bottom,./data/gqa/../images/2371279.jpg,left,"def execute_command_459445(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if device_patches[0].simple_query(""Is the device silver?"") == ""yes"":
        if device_patches[0].vertical_center < image_patch.vertical_center:
            return ""bottom""
        else:
            return ""top""
    return ""bottom""",0
11786203,What is the man on?,skateboard,./data/gqa/../images/2333294.jpg,skateboard,"def execute_command_11786203(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"") # contains a relation, so ask directly",1
5200013,Is there a brown door or chair?,yes,./data/gqa/../images/2413903.jpg,yes,"def execute_command_5200013(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not needed
    image_patch = ImagePatch(image)
    brown_door_patches = image_patch.find(""brown door"")
    brown_chair_patches = image_patch.find(""brown chair"")
    if len(brown_door_patches) > 0 and len(brown_chair_patches) > 0:
        return ""yes""
    elif len(brown_door_patches) > 0:
        return ""door""
    elif len(brown_chair_patches) > 0:
        return ""chair""
    else:
        return ""no""",1
131031372,What is the napkin in?,table,./data/gqa/../images/2363711.jpg,napkin dispenser,"def execute_command_131031372(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # what is the napkin in? -> what is the napkin on?
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What is the napkin in?"")
    napkin_patch = napkin_patches[0]
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return napkin_patch.simple_query(""What is the napkin on?"")",0
1241681,Are there any people behind the white dessert?,yes,./data/gqa/../images/2362038.jpg,yes,"def execute_command_1241681(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume the white dessert is the only white dessert
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    for people_patch in people_patches:
        white_dessert_patches = image_patch.find(""white dessert"")
        if len(white_dessert_patches) == 0:
            return ""no""
        white_dessert_patch = white_dessert_patches[0]
        if people_patch.vertical_center > white_dessert_patch.vertical_center:
            return ""yes""
    return ""no""",1
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?,None,./data/gqa/../images/2412382.jpg,dog,"def execute_command_8730954(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the question is complex so break it down into simpler queries
    image_patch = ImagePatch(image)
    # first ask for the predicate of a relational verb (in front of)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")
    curtain_patch = curtain_patches[0]
    radiator_patches = image_patch.find(""radiator"")
    # Question assumes only one radiator patch
    if len(radiator_patches) == 0:
        return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")
    for radiator_patch in radiator_patches:
        if radiator_patch.horizontal_center > curtain_patch.horizontal_center:
            # next ask for the predicate of a relational verb (in front of)
            animal_patches = image_patch.find(""animal"")
            # Question assumes only one animal patch
            if len(animal_patches) == 0:
                return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")
            return animal_patches[0].simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"") # crop would include the curtain and radiator so keep it in",0
8553578,What is the Pikachu doing?,sitting,./data/gqa/../images/2376660.jpg,lying,"def execute_command_8553578(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Pikachu is the only object with this action
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the Pikachu doing?"")",0
16711804,"On which side is the car, the left or the right?",right,./data/gqa/../images/2398104.jpg,right,"def execute_command_16711804(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not sure if this is the best way to do it
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
5546271,What is on the large mountains?,monument,./data/gqa/../images/2387752.jpg,snow,"def execute_command_5546271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the large mountains?"")",0
5107295,What is in the sky?,kites,./data/gqa/../images/2329046.jpg,kite,"def execute_command_5107295(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # sky is a relation (in the sky) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")",0
123768,What kind of watercraft is the fruit on?,boat,./data/gqa/../images/2410041.jpg,boat,"def execute_command_123768(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # fruit is not a relation, so go step by step
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is the fruit on?"")
    fruit_patch = fruit_patches[0]
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        return ""no""
    watercraft_patch = watercraft_patches[0]
    return watercraft_patch.best_text_match([""boat"", ""ship"", ""yacht""])",1
1827218,Is the bottle in the bottom of the image?,yes,./data/gqa/../images/2326413.jpg,no,"def execute_command_1827218(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle and bottom are in the same image
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.vertical_center > image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",0
10938155,What color is the sky?,white,./data/gqa/../images/2392194.jpg,white,"def execute_command_10938155(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # todo: add to simple_query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")",1
4893512,Does the sail look white or red?,white,./data/gqa/../images/2321817.jpg,white,"def execute_command_4893512(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # does the sail look white or red?
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    return sail_patches[0].best_text_match([""white"", ""red""]) # crop would include the sail so keep it in the query",1
3662784,Do you see either any traffic lights or cars?,yes,./data/gqa/../images/2384789.jpg,yes,"def execute_command_3662784(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # traffic light is not in the vocabulary
    image_patch = ImagePatch(image)
    is_traffic_light = image_patch.exists(""traffic light"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_traffic_light or is_car)",1
15515711,Are there any girls to the right of the yellow helmet?,yes,./data/gqa/../images/2402975.jpg,no,"def execute_command_15515711(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    girls_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girls_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    for girl_patch in girls_patches:
        yellow_helmet_patches = image_patch.find(""yellow helmet"")
        # Question assumes only one yellow helmet patch
        if len(yellow_helmet_patches) == 0:
            return ""no""
        for helmet_patch in yellow_helmet_patches:
            if helmet_patch.horizontal_center > girl_patch.horizontal_center:
                return ""yes""
    return ""no""",0
6315316,Which kind of furniture is in front of the window?,chair,./data/gqa/../images/2401271.jpg,chair,"def execute_command_6315316(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one window
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is in front of the window?"")",1
17736488,What appliance is to the left of the faucet?,oven,./data/gqa/../images/2343545.jpg,oven,"def execute_command_17736488(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This query will be a bit tricky
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    for appliance_patch in appliance_patches:
        faucet_patches = image_patch.find(""faucet"")
        for faucet_patch in faucet_patches:
            if faucet_patch.horizontal_center > appliance_patch.horizontal_center:
                return appliance_patch.simple_query(""What appliance is to the left of the faucet?"") # crop would include the faucet so keep it in the query
    # If no faucet is found, pick the first appliance
    return appliance_patches[0].simple_query(""What appliance is to the left of the faucet?"")",1
41050828,What is the color of the jacket?,white,./data/gqa/../images/2386051.jpg,pink,"def execute_command_41050828(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # change to simple_query
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"")",0
610914,Is the green boat to the right or to the left of the wood house?,left,./data/gqa/../images/2404484.jpg,left,"def execute_command_610914(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one green boat and one wood house
    image_patch = ImagePatch(image)
    green_boat_patch = image_patch.find(""green boat"")[0]
    wood_house_patch = image_patch.find(""wood house"")[0]
    if green_boat_patch.horizontal_center > wood_house_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
13158346,Is the woman in the bottom part of the picture?,yes,./data/gqa/../images/2368542.jpg,yes,"def execute_command_13158346(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no return statement
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",1
16318707,Are there either any colorful bikes or skateboards?,yes,./data/gqa/../images/1593020.jpg,no,"def execute_command_16318707(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming the bike and skateboard are the same color
    image_patch = ImagePatch(image)
    is_bike = image_patch.exists(""bike"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_bike or is_skateboard)",0
2805654,Is the bag to the right or to the left of the bench?,right,./data/gqa/../images/2367000.jpg,right,"def execute_command_2805654(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: check if it's really to the right or to the left
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    bag_patch = bag_patches[0]
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        return ""left""
    for bench_patch in bench_patches:
        if bag_patch.horizontal_center > bench_patch.horizontal_center:
            return ""right""
    return ""left""",1
15315607,What do you think is in the sky?,kite,./data/gqa/../images/2399821.jpg,kite,"def execute_command_15315607(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: find the sky
    image_patch = ImagePatch(image)
    # TODO: find the sky and then query the image
    return image_patch.simple_query(""What do you think is in the sky?"")",1
2995829,What color is the truck near the gas station?,white,./data/gqa/../images/2318396.jpg,yellow,"def execute_command_2995829(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the truck near the gas station?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly",0
12140940,"What are the headphones on, a sofa or a desk?",sofa,./data/gqa/../images/2359333.jpg,sofa,"def execute_command_12140940(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")",1
727533,Does the bun look brown and toasted?,no,./data/gqa/../images/2380474.jpg,yes,"def execute_command_727533(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ImagePatch has no color method
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    return bool_to_yesno(bun_patches[0].verify_property(""bun"", ""brown"") and bun_patches[0].verify_property(""bun"", ""toasted""))",0
61044602,What is in the brown basket?,mangoes,./data/gqa/../images/2381908.jpg,mango,"def execute_command_61044602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # in the brown basket is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the brown basket?"")",0
16827204,Is the marker different in color than the paper?,yes,./data/gqa/../images/713822.jpg,yes,"def execute_command_16827204(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one marker and one paper
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    marker_patch = marker_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    return bool_to_yesno(marker_patch.simple_query(""Is the marker different in color than the paper?"") == ""yes"") # crop would include the paper so keep it in the query",1
1284539,Is there a racket to the right of the man on the right side?,no,./data/gqa/../images/2362041.jpg,no,"def execute_command_1284539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # query the image directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[-1]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    racket_patch = racket_patches[0]
    return ""yes"" if racket_patch.horizontal_center > man_patch.horizontal_center else ""no""",1
1257391,What place is this?,Error Ejecucion: ImagePatch.simple_query() missing 1 required positional argument: 'question',./data/gqa/../images/2391338.jpg,street,"def execute_command_1257391(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is the default question
    image_patch = ImagePatch(image)
    return image_patch.simple_query() # default question is ""What is this?"" which is the same as ""What place is this?"" for a picture",0
16223517,What do you think is the color of the large device?,black,./data/gqa/../images/713330.jpg,black,"def execute_command_16223517(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # what color is the large device?
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What do you think is the color of the large device?"")
    device_patch = device_patches[0]
    return device_patch.simple_query(""What do you think is the color of the large device?"") # crop would include the device so keep it in the query",1
1024280,Does the shirt look long sleeved or sleeveless?,sleeveless,./data/gqa/../images/2332543.jpg,sleeveless,"def execute_command_1024280(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # can be a function
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    is_long_sleeved = (shirt_patch.simple_query(""Does the shirt look long sleeved?"") == ""yes"")
    return ""long sleeved"" if is_long_sleeved else ""sleeveless""",1
2769463,Which kind of animal is lying in the chair?,dog,./data/gqa/../images/2320543.jpg,dog,"def execute_command_2769463(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note: the animal is not necessarily lying in the chair, but rather the chair is lying in the animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    animal_patch = animal_patches[0]
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        return animal_patch.simple_query(""Which kind of animal is lying in the chair?"")
    chair_patch = chair_patches[0]
    if animal_patch.horizontal_center > chair_patch.horizontal_center:
        return animal_patch.simple_query(""Which kind of animal is lying in the chair?"")
    return animal_patch.simple_query(""Which kind of animal is the chair lying in?"")",1
18503776,Is the white box to the right of the crate the chair is to the right of?,yes,./data/gqa/../images/498069.jpg,no,"def execute_command_18503776(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the chair so keep it in the query
    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    # Question assumes only one white box patch
    if len(white_box_patches) == 0:
        # If no white box is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    for white_box_patch in white_box_patches:
        crate_patches = image_patch.find(""crate"")
        for crate_patch in crate_patches:
            chair_patches = image_patch.find(""chair"")
            for chair_patch in chair_patches:
                if chair_patch.horizontal_center > crate_patch.horizontal_center and chair_patch.horizontal_center < white_box_patch.horizontal_center:
                    return ""yes""
    return ""no""",0
3434581,Are there both a coffee table and a lamp?,no,./data/gqa/../images/2394519.jpg,yes,"def execute_command_3434581(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a relation so go step by step
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)",0
19201196,Is that flower pot made of clay?,no,./data/gqa/../images/2378173.jpg,yes,"def execute_command_19201196(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # object property question
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    # Question assumes only one flower pot patch
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return bool_to_yesno(flower_pot_patches[0].verify_property(""flower pot"", ""clay""))",0
191006281,Does the sky look clear and gray?,yes,./data/gqa/../images/2389688.jpg,yes,"def execute_command_191006281(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # sky is clear, gray
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""clear"") and image_patch.verify_property(""sky"", ""gray""))",1
681336,Do you see hats or gloves that are white?,no,./data/gqa/../images/2319126.jpg,yes,"def execute_command_681336(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a list of patches
    image_patch = ImagePatch(image)
    is_hat = image_patch.exists(""hat"")
    is_glove = image_patch.exists(""glove"")
    if is_hat:
        return image_patch.find(""hat"")[0].best_text_match([""white"", ""black""])
    elif is_glove:
        return image_patch.find(""glove"")[0].best_text_match([""white"", ""black""])
    else:
        return image_patch.simple_query(""Do you see hats or gloves that are white?"")",0
1300368,What is on the cabinet that is to the right of the keyboard?,pen,./data/gqa/../images/4900.jpg,printer,"def execute_command_1300368(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cabinet patch
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    cabinet_patch = cabinet_patches[0]
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        return ""no""
    keyboard_patch = keyboard_patches[0]
    if cabinet_patch.horizontal_center > keyboard_patch.horizontal_center:
        return cabinet_patch.best_text_match([""book"", ""keyboard"", ""pen""])
    else:
        return ""no""",0
172394,What is the animal to the left of the tap called?,cat,./data/gqa/../images/2411058.jpg,cat,"def execute_command_172394(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is a basic example of a command that can be used to test the ImagePatch class
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""What is the animal to the left of the tap called?"")
    # If no animal is to the left of the tap, query the image directly
    return image_patch.simple_query(""What is the animal to the left of the tap called?"")",1
738176,Is the chair on the right?,no,./data/gqa/../images/2377028.jpg,yes,"def execute_command_738176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # asks for a predicate of a relational verb (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the chair on the right?"")",0
4194919,Is the child on the right of the picture?,yes,./data/gqa/../images/2346160.jpg,no,"def execute_command_4194919(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # (image, left, lower, right, upper):
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    for child_patch in child_patches:
        if child_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no""",0
3585327,Who is on the surfboard?,the boy,./data/gqa/../images/2342125.jpg,girl,"def execute_command_3585327(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard?"")",0
1711172,What size are the packages the candle is on top of?,small,./data/gqa/../images/2344916.jpg,small,"def execute_command_1711172(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What size are the packages the candle is on top of?"")",1
4353895,Who is on the snowboard on the right?,the boy,./data/gqa/../images/2343238.jpg,people,"def execute_command_4353895(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    for snowboard_patch in snowboard_patches:
        if snowboard_patch.horizontal_center > image_patch.horizontal_center:
            person_patches = image_patch.find(""person"")
            # Question assumes only one person patch
            if len(person_patches) == 0:
                return image_patch.simple_query(""Who is on the snowboard on the right?"")
            return person_patches[0].simple_query(""Who is on the snowboard on the right?"") # crop would include the snowboard so keep it in the query
    return image_patch.simple_query(""Who is on the snowboard on the right?"")",0
17929304,What is the vehicle that is on the road?,truck,./data/gqa/../images/2322483.jpg,truck,"def execute_command_17929304(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one road patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle on the road?"") == ""yes"":
            return vehicle_patch.simple_query(""What is the vehicle that is on the road?"")
    return image_patch.simple_query(""What is the vehicle that is on the road?"")",1
1363574,What color is the crust?,brown,./data/gqa/../images/2379627.jpg,gold,"def execute_command_1363574(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # only works if there is only one bread
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return bread_patches[0].simple_query(""What color is the crust?"")",0
5672474,Is the plate to the left or to the right of the beer on the left?,right,./data/gqa/../images/2373095.jpg,right,"def execute_command_5672474(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # beer is on the left
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    for plate_patch in plate_patches:
        beer_patches = image_patch.find(""beer"")
        # Question assumes only one beer patch
        if len(beer_patches) == 0:
            # If no beer is found, query the image directly
            return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
        for beer_patch in beer_patches:
            if beer_patch.horizontal_center < plate_patch.horizontal_center:
                return ""left""
            else:
                return ""right""",1
11341284,What is the pattern of the mattress on the street?,polka dots,./data/gqa/../images/2397107.jpg,checkered,"def execute_command_11341284(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns None
    image_patch = ImagePatch(image)
    mattress_patches = image_patch.find(""mattress"")
    # Question assumes only one mattress patch
    if len(mattress_patches) == 0:
        # If no mattress is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the mattress on the street?"")
    return mattress_patches[0].best_text_match([""stripes"", ""dots"", ""polka dots"", ""polka dots with stripes""]) # crop would include the pattern so keep it in the query",0
14192693,Are there any boys behind the fence?,yes,./data/gqa/../images/2355736.jpg,no,"def execute_command_14192693(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a 3D array (height, width, channels)
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Are there any boys behind the fence?"")
    for boy_patch in boy_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center < boy_patch.horizontal_center:
                return ""yes""
    return ""no""",0
19203395,Is the white toilet paper to the right or to the left of the toilet?,left,./data/gqa/../images/2347431.jpg,left,"def execute_command_19203395(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    toilet_patch = toilet_patches[0]
    white_toilet_paper_patches = image_patch.find(""white toilet paper"")
    # Question assumes only one white toilet paper patch
    if len(white_toilet_paper_patches) == 0:
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    white_toilet_paper_patch = white_toilet_paper_patches[0]
    if white_toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
1194938,Are there any airplanes in front of the building?,no,./data/gqa/../images/2377599.jpg,yes,"def execute_command_1194938(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # airplane
    image_patch = ImagePatch(image)
    airplane_patches = image_patch.find(""airplane"")
    building_patches = image_patch.find(""building"")
    # Question assumes only one airplane patch and one building patch
    if len(airplane_patches) == 0 or len(building_patches) == 0:
        return ""no""
    airplane_patch = airplane_patches[0]
    building_patch = building_patches[0]
    if airplane_patch.horizontal_center < building_patch.horizontal_center:
        return ""yes""
    return ""no""",0
5350205,How clean is the road that the car is on the side of?,no,./data/gqa/../images/2317789.jpg,clean,"def execute_command_5350205(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # asks for a property of a relational verb, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How clean is the road that the car is on the side of?"")",0
4256016,"In which part of the picture is the black van, the bottom or the top?",bottom,./data/gqa/../images/2382873.jpg,bottom,"def execute_command_4256016(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # replace image with your image
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    van_patch = van_patches[0]
    if van_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
9179602,What is the person to the right of the fence doing?,skateboarding,./data/gqa/../images/2381259.jpg,skateboarding,"def execute_command_9179602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the right of the fence doing?"")",1
16471124,Does the horse have a different color than the boot?,yes,./data/gqa/../images/2353868.jpg,no,"def execute_command_16471124(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one horse and one boot
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        return ""no""
    horse_patch = horse_patches[0]
    boot_patches = image_patch.find(""boot"")
    if len(boot_patches) == 0:
        return ""no""
    boot_patch = boot_patches[0]
    return bool_to_yesno(horse_patch.simple_query(""What color is the horse?"") != boot_patch.simple_query(""What color is the boot?""))",0
958247,Is the mouse to the right of a chair?,yes,./data/gqa/../images/2343793.jpg,yes,"def execute_command_958247(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a direct question
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    # Question assumes only one mouse patch
    if len(mouse_patches) == 0:
        # If no mouse is found, query the image directly
        return image_patch.simple_query(""Is the mouse to the right of a chair?"")
    for mouse_patch in mouse_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if chair_patch.horizontal_center < mouse_patch.horizontal_center:
                return ""yes""
    return ""no""",1
11179512,The basket made of plastic is what color?,blue,./data/gqa/../images/2399681.jpg,blue,"def execute_command_11179512(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # a relation (made of)
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    if basket_patches[0].verify_property(""basket"", ""made of plastic""):
        return basket_patches[0].simple_query(""The basket made of plastic is what color?"")
    return ""no""",1
8816272,Do you see any elephant to the left of the bird?,no,./data/gqa/../images/2375806.jpg,no,"def execute_command_8816272(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a yes or no
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
    for elephant_patch in elephant_patches:
        bird_patches = image_patch.find(""bird"")
        # Question assumes only one bird patch
        if len(bird_patches) == 0:
            # If no bird is found, query the image directly
            return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
        bird_patch = bird_patches[0]
        if elephant_patch.horizontal_center < bird_patch.horizontal_center:
            return ""yes""
    return ""no""",1
11168592,What is the animal in front of the lamp?,no,./data/gqa/../images/2318496.jpg,horse,"def execute_command_11168592(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming one lamp
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal in front of the lamp?"")
    animal_patch = animal_patches[0]
    if animal_patch.exists(""lamp"") and animal_patch.horizontal_center > animal_patch.find(""lamp"")[0].horizontal_center:
        return animal_patch.simple_query(""What is the animal in front of the lamp?"") # crop would include the lamp so keep it in the query
    return ""no""",0
3568717,Who is wearing the jacket?,man,./data/gqa/../images/2405929.jpg,man,"def execute_command_3568717(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # a relational verb (wearing) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the jacket?"")",1
7398502,What is the food to the left of the girl in the bottom of the photo?,sandwich,./data/gqa/../images/2333310.jpg,sandwich,"def execute_command_7398502(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottom is in the question
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    girl_patch = girl_patches[0]
    food_patches = image_patch.crop(0, 0, image_patch.width, image_patch.height//2).find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    food_patch = food_patches[0]
    if food_patch.horizontal_center < girl_patch.horizontal_center:
        return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"") # crop would include the girl so keep it in the query
    return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")",1
5145864,What is the device that the camera is in front of?,cell phone,./data/gqa/../images/2327025.jpg,phone,"def execute_command_5145864(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This one requires the camera patch to be in the image
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the device that the camera is in front of?"")",0
788143,Is the man on the surfboard?,yes,./data/gqa/../images/2410668.jpg,yes,"def execute_command_788143(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the surfboard?"")",1
15854501,What device has the same color as the device in the box?,iphone,./data/gqa/../images/2413508.jpg,screen,"def execute_command_15854501(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (same color, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device has the same color as the device in the box?"")",0
3228067,What is the child wearing?,blue jacket,./data/gqa/../images/2324724.jpg,skis,"def execute_command_3228067(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns an ImagePatch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child wearing?"")",0
6817336,Is the blue sky behind a cathedral?,yes,./data/gqa/../images/2358376.jpg,yes,"def execute_command_6817336(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue sky behind a cathedral?"")",1
6347271,"In which part of the image is the yellow pepper, the bottom or the top?",bottom,./data/gqa/../images/2395361.jpg,bottom,"def execute_command_6347271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes a single yellow pepper
    image_patch = ImagePatch(image)
    yellow_pepper_patch = image_patch.find(""yellow pepper"")[0]
    if yellow_pepper_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
296230,What animal is the woman feeding?,elephant,./data/gqa/../images/2414858.jpg,elephant,"def execute_command_296230(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # animal is already in the image, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the woman feeding?"")",1
3427727,On which side is the bucket?,left,./data/gqa/../images/2361130.jpg,right,"def execute_command_3427727(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bucket patch
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    bucket_patch = bucket_patches[0]
    if bucket_patch.left < image_patch.left + (image_patch.right - image_patch.left) / 2:
        return ""left""
    else:
        return ""right""",0
31050314,Is the small chimney in the bottom part of the picture?,yes,./data/gqa/../images/2377037.jpg,yes,"def execute_command_31050314(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes a single image
    image_patch = ImagePatch(image)
    chimney_patches = image_patch.find(""chimney"")
    # Question assumes only one chimney patch
    if len(chimney_patches) == 0:
        # If no chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    for chimney_patch in chimney_patches:
        if chimney_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no""",1
3503396,Are the pants purple?,yes,./data/gqa/../images/2340511.jpg,yes,"def execute_command_3503396(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one patch of pants
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    if len(pants_patches) == 0:
        return image_patch.simple_query(""Are the pants purple?"")
    return bool_to_yesno(pants_patches[0].verify_property(""pants"", ""purple""))",1
11742862,Which kind of furniture is to the right of the paper towels?,table,./data/gqa/../images/2344431.jpg,shelves,"def execute_command_11742862(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Paper towels are not furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    for furniture_patch in furniture_patches:
        paper_towels_patches = image_patch.find(""paper towels"")
        for paper_towels_patch in paper_towels_patches:
            if paper_towels_patch.horizontal_center < furniture_patch.horizontal_center:
                return furniture_patch.best_text_match([""chair"", ""table"", ""sofa"", ""bookshelf""])
    # If no furniture is to the right of the paper towels, query the image directly
    return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")",0
5891809,What kind of furniture is gray?,table,./data/gqa/../images/2384647.jpg,table,"def execute_command_5891809(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""What kind of furniture is gray?"") # crop would include the color so keep it in the query",1
5370528,Is the hair white and long?,yes,./data/gqa/../images/2389614.jpg,yes,"def execute_command_5370528(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is the hair long?
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    hair_patch = hair_patches[0]
    is_white = (hair_patch.simple_query(""Is the hair white?"") == ""yes"")
    is_long = (hair_patch.simple_query(""Is the hair long?"") == ""yes"")
    return bool_to_yesno(is_white and is_long)",1
781153,Do you see trains near the lamp post that looks white?,no,./data/gqa/../images/61557.jpg,no,"def execute_command_781153(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # The question assumes one train and one lamp post
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")
    train_patch = train_patches[0]
    lamp_post_patches = image_patch.find(""lamp post"")
    # Question assumes one lamp post patch
    if len(lamp_post_patches) == 0:
        return ""no""
    lamp_post_patch = lamp_post_patches[0]
    if lamp_post_patch.simple_query(""Is the lamp post white?"") == ""yes"":
        if train_patch.simple_query(""Is the train near the lamp post?"") == ""yes"":
            return ""yes""
    return ""no""",1
5543456,Is the container to the left of the person that wears bracelets?,no,./data/gqa/../images/2380680.jpg,yes,"def execute_command_5543456(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")",0
163134,What do you think is on the roof?,snow,./data/gqa/../images/2383884.jpg,snow,"def execute_command_163134(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Note: this is a bit of a weird question
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"")",1
5603075,Is the shoe white or brown?,brown,./data/gqa/../images/2328644.jpg,brown,"def execute_command_5603075(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # does not need to be a function
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""]) # crop would include the shoe so keep it in the query",1
5511395,What is wrapped in paper?,hot dog,./data/gqa/../images/2373700.jpg,bagel,"def execute_command_5511395(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one object is wrapped
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wrapped in paper?"")",0
5611256,Are there any couches in the picture?,no,./data/gqa/../images/2352773.jpg,no,"def execute_command_5611256(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # couches are not found in the image, so the answer will be ""no""
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch""))",1
1162826,The man is in what?,an orange shirt,./data/gqa/../images/2334672.jpg,air,"def execute_command_1162826(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # uses a relation so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is in what?"")",0
81020685,Which color is the small house?,white,./data/gqa/../images/2408787.jpg,white,"def execute_command_81020685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # if the house is small it should be in the image
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    return house_patches[0].best_text_match([""red"", ""blue"", ""green""]) # crop would include the house so keep it in the query",1
19640724,Who is in the bathroom?,a man,./data/gqa/../images/2414682.jpg,man,"def execute_command_19640724(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bathroom is a room, not an object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"") # asks directly since it's a room",1
289960,Do you see a racket to the right of the boy that is looking at the tie?,no,./data/gqa/../images/2395760.jpg,no,"def execute_command_289960(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one boy and one tie
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    tie_patches = image_patch.find(""tie"")
    racket_patches = image_patch.find(""racket"")
    if len(boy_patches) == 0 or len(tie_patches) == 0 or len(racket_patches) == 0:
        return ""no""
    boy_patch = boy_patches[0]
    tie_patch = tie_patches[0]
    racket_patch = racket_patches[0]
    if boy_patch.horizontal_center > tie_patch.horizontal_center and boy_patch.horizontal_center < racket_patch.horizontal_center:
        return ""yes""
    return ""no""",1
9957748,Does the hair appear to be long and brown?,yes,./data/gqa/../images/2374505.jpg,yes,"def execute_command_9957748(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming the hair is not cropped
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""hair"", ""long"") and image_patch.verify_property(""hair"", ""brown""))",1
21031610,What is the shoe that looks black and white resting on?,skateboard,./data/gqa/../images/2399342.jpg,skateboard,"def execute_command_21031610(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one shoe patch
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    if len(shoe_patches) == 0:
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    shoe_patch = shoe_patches[0]
    if shoe_patch.simple_query(""Is the shoe black and white?"") == ""yes"":
        resting_on_patches = image_patch.find(""resting on"")
        # Question assumes only one resting on patch
        if len(resting_on_patches) == 0:
            return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
        return resting_on_patches[0].simple_query(""What is the shoe that looks black and white resting on?"")
    return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"")",1
12801921,What is the glass on?,table,./data/gqa/../images/2322304.jpg,coffee table,"def execute_command_12801921(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is only one glass
    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    if len(glass_patches) == 0:
        return image_patch.simple_query(""What is the glass on?"")
    return glass_patches[0].simple_query(""What is the glass on?"") # crop would include the object on the glass so keep it in the query",0
16243948,Is the white pillow under the black animal?,yes,./data/gqa/../images/2386158.jpg,yes,"def execute_command_16243948(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a boolean
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    white_pillow_patch = pillow_patches[0]
    black_animal_patches = image_patch.find(""black animal"")
    # Question assumes only one black animal patch
    if len(black_animal_patches) == 0:
        # If no black animal is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    black_animal_patch = black_animal_patches[0]
    # white pillow is under black animal if white_pillow_patch's vertical_center > black_animal_patch's vertical_center
    return bool_to_yesno(white_pillow_patch.vertical_center > black_animal_patch.vertical_center)",1
457770,What kind of clothing is striped?,shirt,./data/gqa/../images/2402763.jpg,dress shirt,"def execute_command_457770(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # clothing
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing striped?"") == ""yes"":
            return clothing_patch.simple_query(""What kind of clothing is striped?"") # crop would include the stripes so keep it in the query
    # If no striped clothing is found, pick the first clothing
    return clothing_patches[0].simple_query(""What kind of clothing is striped?"")",0
12603153,Are the child's eyes blue and open?,yes,./data/gqa/../images/2410549.jpg,yes,"def execute_command_12603153(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # does not require any arguments
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    child_patch = child_patches[0]
    return bool_to_yesno(child_patch.verify_property(""child"", ""blue"") and child_patch.verify_property(""child"", ""open""))",1
9480973,What is located on top of the tub?,shower,./data/gqa/../images/2382058.jpg,towel,"def execute_command_9480973(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is located on top of the tub?"")",0
8399764,Is the fork to the right or to the left of the white plate?,right,./data/gqa/../images/2359716.jpg,right,"def execute_command_8399764(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is the image
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    for fork_patch in fork_patches:
        white_plate_patches = image_patch.find(""white plate"")
        for white_plate_patch in white_plate_patches:
            if white_plate_patch.horizontal_center > fork_patch.horizontal_center:
                return ""left""
            else:
                return ""right""",1
13420253,On which side of the photo is the chair?,left,./data/gqa/../images/2335072.jpg,left,"def execute_command_13420253(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is the most complicated one, and it's not even fully implemented
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"" # this is not even the most complicated part, as the image can be rotated",1
4747006,What is the label on?,milk,./data/gqa/../images/2362436.jpg,glass,"def execute_command_4747006(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one object of interest
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    # Question assumes only one label patch
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What is the label on?"")
    return label_patches[0].simple_query(""What is the label on?"")",0
3322787,What bird is to the left of the person that is wearing a shirt?,owl,./data/gqa/../images/2358081.jpg,owl,"def execute_command_3322787(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume only one person and one bird
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return ""no""
    bird_patch = bird_patches[0]
    if bird_patch.horizontal_center < person_patch.horizontal_center:
        return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    return ""no""",1
6399594,On which side is the man?,right,./data/gqa/../images/2325614.jpg,right,"def execute_command_6399594(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left, right, above, below
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""On which side is the man?"") # crop would include the man so keep it in the query",1
6930120,Is the glass bowl on the right or on the left?,right,./data/gqa/../images/2389120.jpg,left,"def execute_command_6930120(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: should be a simple query
    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    # Question assumes only one glass bowl patch
    if len(glass_bowl_patches) == 0:
        # If no glass bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    for glass_bowl_patch in glass_bowl_patches:
        if glass_bowl_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
    return ""left""",0
12619961,What vehicles are to the left of the taxi?,cars,./data/gqa/../images/2383807.jpg,cars,"def execute_command_12619961(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a list of vehicles, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicles are to the left of the taxi?"")",1
13362315,Is the basket on the shelf black and empty?,no,./data/gqa/../images/2387101.jpg,yes,"def execute_command_13362315(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # can be simplified to just use the simple_query function
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    basket_patch = basket_patches[0]
    if not basket_patch.exists(""shelf""):
        return ""no""
    is_black = basket_patch.simple_query(""Is the basket black?"")
    is_empty = basket_patch.simple_query(""Is the basket empty?"")
    return bool_to_yesno(is_black and is_empty)",0
3830854,What is the animal that is standing next to the donkey that is standing in the hay?,sheep,./data/gqa/../images/2399312.jpg,sheep,"def execute_command_3830854(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # what is the animal that is standing next to the donkey that is standing in the hay?
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")",1
18382324,Is this a bed or a table?,table,./data/gqa/../images/2377976.jpg,table,"def execute_command_18382324(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one patch
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""bed"", ""table""]) # crop would include the rest of the image, so keep it in the query",1
18104571,"Which animal is that, a bird or a cat?",bird,./data/gqa/../images/2369293.jpg,cat,"def execute_command_18104571(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    animal_patch = animal_patches[0]
    is_bird = animal_patch.simple_query(""Is the animal a bird?"")
    return ""bird"" if is_bird else ""cat""",0
2913379,Do you see any fence or pot?,no,./data/gqa/../images/2357474.jpg,yes,"def execute_command_2913379(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)",0
9294271,What is in front of the fence the zebra is kept in?,fence,./data/gqa/../images/2357869.jpg,tree,"def execute_command_9294271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # can be simplified with direct question
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")
    fence_patches = image_patch.find(""fence"")
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center > zebra_patches[0].horizontal_center:
            return ""fence""
    return ""fence""",0
10741434,What is the vegetable that is on top of the plate called?,broccoli,./data/gqa/../images/2333173.jpg,broccoli,"def execute_command_10741434(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # asks for the predicate of a relational verb (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")",1
765962,Where is the car?,above,./data/gqa/../images/2342119.jpg,street,"def execute_command_765962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no question
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return ""nowhere""
    car_patch = car_patches[0]
    if car_patch.vertical_center < image_patch.vertical_center:
        return ""below""
    else:
        return ""above""",0
12399262,Is there either a yellow truck or airplane?,yes,./data/gqa/../images/2350062.jpg,yes,"def execute_command_12399262(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # includes the image patch
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)",1
13964213,Is the man on the left of the photo?,no,./data/gqa/../images/2402240.jpg,no,"def execute_command_13964213(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the man so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the left of the photo?"")",1
16171369,What is covered in the snow?,skis,./data/gqa/../images/2346375.jpg,ground,"def execute_command_16171369(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # only works if only one snow patch
    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    # Question assumes only one snow patch
    if len(snow_patches) == 0:
        # If no snow is found, query the image directly
        return image_patch.simple_query(""What is covered in the snow?"")
    return snow_patches[0].simple_query(""What is covered in the snow?"")",0
181055844,On which side is the plastic bottle?,left,./data/gqa/../images/2367436.jpg,left,"def execute_command_181055844(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # side (left, right, top, bottom)
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""plastic bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    bottle_patch = bottle_patches[0]
    # bottle_patch.simple_query(""Is the plastic bottle on the left?"") -> ""yes""
    # bottle_patch.simple_query(""Is the plastic bottle on the right?"") -> ""no""
    if bottle_patch.left < image_patch.left + (image_patch.width / 2):
        return ""left""
    else:
        return ""right""",1
5858491,Do you see any ropes on the fence that is on the left of the picture?,yes,./data/gqa/../images/1409.jpg,no,"def execute_command_5858491(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes fence is on the left of the picture
    image_patch = ImagePatch(image)
    rope_patches = image_patch.find(""rope"")
    # Question assumes only one rope patch
    if len(rope_patches) == 0:
        # If no rope is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        return ""no""
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no""",0
17834539,Are there any lamps in the scene?,no,./data/gqa/../images/2399386.jpg,no,"def execute_command_17834539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # if no lamps are found, ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp""))",1
15658176,Who is wearing a helmet?,the rider,./data/gqa/../images/2404190.jpg,woman,"def execute_command_15658176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a helmet?"")",0
14372400,Does that coat have red color?,no,./data/gqa/../images/2344615.jpg,no,"def execute_command_14372400(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one coat patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red""))",1
411886,Are there any curtains or blankets in this scene?,no,./data/gqa/../images/2372006.jpg,yes,"def execute_command_411886(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # scene
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)",0
16921850,What is the item of furniture to the left of the remote that the man is holding called?,entertainment center,./data/gqa/../images/2378471.jpg,bookcase,"def execute_command_16921850(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: check if there are multiple patches
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    remote_patches = image_patch.find(""remote"")
    # Question assumes only one remote patch
    if len(remote_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    remote_patch = remote_patches[0]
    if man_patch.horizontal_center < remote_patch.horizontal_center:
        furniture_patches = image_patch.find(""furniture"")
        # Question assumes only one furniture patch
        if len(furniture_patches) == 0:
            return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
        return furniture_patches[0].simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"") # crop would include the remote so keep it in the query",0
51039491,Is the fence black or red?,Error Ejecucion: 'list' object has no attribute 'best_text_match',./data/gqa/../images/2416432.jpg,black,"def execute_command_51039491(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming fence is a single patch
    image_patch = ImagePatch(image)
    fence_patch = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patch) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    return fence_patch.best_text_match([""black"", ""red""])",0
7425912,What animal is standing in the field?,elephant,./data/gqa/../images/2388942.jpg,elephant,"def execute_command_7425912(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume the field is not in the image
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing in the field?"")
    return animal_patches[0].simple_query(""What animal is standing in the field?"")",1
13136338,What animal is in front of the dog which is to the right of the bird?,horse,./data/gqa/../images/2405555.jpg,horse,"def execute_command_13136338(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # all relations are to the right so go step by step
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    for bird_patch in bird_patches:
        dog_patches = image_patch.find(""dog"")
        # Question assumes only one dog patch
        if len(dog_patches) == 0:
            # If no dog is found, query the image directly
            return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
        for dog_patch in dog_patches:
            if dog_patch.horizontal_center > bird_patch.horizontal_center:
                animal_patches = image_patch.find(""animal"")
                # Question assumes only one animal patch
                if len(animal_patches) == 0:
                    # If no animal is found, query the image directly
                    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
                for animal_patch in animal_patches:
                    if animal_patch.horizontal_center > dog_patch.horizontal_center:
                        return animal_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")",1
3775066,Which color are the cabinets in the bottom of the picture?,blue,./data/gqa/../images/2379723.jpg,blue,"def execute_command_3775066(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cabinet
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.lower > image_patch.lower:
        return cabinet_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    else:
        return cabinet_patch.simple_query(""Which color are the cabinets in the top of the picture?"")",1
17206239,Is the happy girl to the right of a player?,yes,./data/gqa/../images/2413307.jpg,no,"def execute_command_17206239(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # asks for the predicate of a relational verb (to the right of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the happy girl to the right of a player?"")",0
2992517,"What piece of furniture is not wooden, the table or the chair?",both,./data/gqa/../images/2400911.jpg,chair,"def execute_command_2992517(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # and the floor?
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one table and one chair patch
    if len(table_patches) == 0 or len(chair_patches) == 0:
        # If no table or chair is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    table_patch = table_patches[0]
    chair_patch = chair_patches[0]
    is_table_wooden = (table_patch.simple_query(""Is the table wooden?"") == ""yes"")
    is_chair_wooden = (chair_patch.simple_query(""Is the chair wooden?"") == ""yes"")
    if not is_table_wooden and is_chair_wooden:
        return table_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    elif not is_chair_wooden and is_table_wooden:
        return chair_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    else:
        return ""both""",0
1827558,Which side of the image is the kettle on?,right,./data/gqa/../images/2321180.jpg,right,"def execute_command_1827558(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # side: left, right
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    kettle_patch = kettle_patches[0]
    if kettle_patch.left < image_patch.left + image_patch.width / 2:
        return ""left""
    else:
        return ""right""",1
2785208,Where is the man?,on the beach,./data/gqa/../images/2398401.jpg,beach,"def execute_command_2785208(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not used
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the man?"")",0
6623967,Is the baby near the countertop chewing a computer mouses?,yes,./data/gqa/../images/2319542.jpg,no,"def execute_command_6623967(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # cannot use simple_query here because it would not include the computer mouse
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouses?"")
    baby_patch = baby_patches[0]
    is_near_countertop = baby_patch.simple_query(""Is the baby near the countertop?"")
    is_chewing_mouse = baby_patch.simple_query(""Is the baby chewing a computer mouse?"")
    return bool_to_yesno(is_near_countertop and is_chewing_mouse)",0
12804807,Is the small bottle open or closed?,open,./data/gqa/../images/2402996.jpg,open,"def execute_command_12804807(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle is a predicate so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the small bottle open or closed?"")",1
18437691,Is the clock small or large?,large,./data/gqa/../images/2380137.jpg,large,"def execute_command_18437691(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # change to a more descriptive name
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    return clock_patches[0].best_text_match([""small"", ""large""])",1
9482318,Are there either any glasses or bottles in this photo?,yes,./data/gqa/../images/2383551.jpg,no,"def execute_command_9482318(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume it is a bottle
    image_patch = ImagePatch(image)
    is_glasses = image_patch.exists(""glasses"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glasses or is_bottle)",0
12362819,Is the sky blue or dark?,dark,./data/gqa/../images/2335554.jpg,dark,"def execute_command_12362819(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # or is the sky light blue?
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""blue"", ""dark""]) # or ""light blue"" if that's an option",1
171054254,What is the piece of furniture to the right of the shelf the cup is on called?,chair,./data/gqa/../images/713692.jpg,bookshelf,"def execute_command_171054254(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the name of the piece of furniture
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    for cup_patch in cup_patches:
        shelf_patches = image_patch.find(""shelf"")
        for shelf_patch in shelf_patches:
            if shelf_patch.horizontal_center > cup_patch.horizontal_center:
                furniture_patches = image_patch.find(""furniture"")
                for furniture_patch in furniture_patches:
                    if furniture_patch.horizontal_center > shelf_patch.horizontal_center:
                        return furniture_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    return ""I do not know""",0
1416636,Are there both bridges and chandeliers in this photograph?,no,./data/gqa/../images/2377557.jpg,no,"def execute_command_1416636(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not used
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)",1
1997041,"Which side is the car on, the left or the right?",right,./data/gqa/../images/2355723.jpg,right,"def execute_command_1997041(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
6110985,Is there any plate or orange in the photo?,yes,./data/gqa/../images/2361774.jpg,yes,"def execute_command_6110985(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes that plates and oranges are not overlapping
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)",1
612894,Do you see any doors?,False,./data/gqa/../images/2358938.jpg,yes,"def execute_command_612894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a boolean
    image_patch = ImagePatch(image)
    return image_patch.exists(""door"")",0
13562221,What's the bear on?,rock,./data/gqa/../images/2360312.jpg,rock,"def execute_command_13562221(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # can't find the bear, so go step by step
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What's the bear on?"")
    bear_patch = bear_patches[0]
    is_on = bear_patch.verify_property(""bear"", ""on"")
    if is_on:
        return bear_patch.simple_query(""What's the bear on?"") # crop would include the thing the bear is on, so keep it in the query
    else:
        return ""the ground""",1
9536851,Is the woman in front of the trees holding scissors?,no,./data/gqa/../images/2357907.jpg,no,"def execute_command_9536851(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # it is assumed that the woman is in front of the trees, the query is only about the scissors
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")
    woman_patch = woman_patches[0]
    scissors_patches = image_patch.find(""scissors"")
    # Question assumes only one scissors patch
    if len(scissors_patches) == 0:
        return ""no""
    scissors_patch = scissors_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center and woman_patch.horizontal_center < scissors_patch.horizontal_center:
        return ""yes""
    return ""no""",1
9682405,What is on the machine?,label,./data/gqa/../images/2353763.jpg,control panel,"def execute_command_9682405(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one machine patch
    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    if len(machine_patches) == 0:
        return image_patch.simple_query(""What is on the machine?"")
    machine_patch = machine_patches[0]
    return machine_patch.simple_query(""What is on the machine?"") # crop would include the machine so keep it in the query",0
8649435,What is on the white wall?,newspaper,./data/gqa/../images/2340495.jpg,picture,"def execute_command_8649435(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note that this is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"") # contains a relation, so ask directly",0
12487033,Does the logo look red?,no,./data/gqa/../images/2315954.jpg,no,"def execute_command_12487033(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # red is a color property
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""Does the logo look red?"")
    return bool_to_yesno(logo_patches[0].verify_property(""logo"", ""red""))",1
14301289,What type of vehicle is to the left of the white vehicle?,bus,./data/gqa/../images/2362109.jpg,bus,"def execute_command_14301289(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"") # contains a relation, so ask directly",1
523976,Which kind of vehicle is large?,train,./data/gqa/../images/2318853.jpg,train,"def execute_command_523976(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # for simplicity, assume there is only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle large?"") == ""yes"":
            return vehicle_patch.simple_query(""What kind of vehicle is large?"")
    return image_patch.simple_query(""Which kind of vehicle is large?"")",1
3423213,Who is in front of the trees?,the man,./data/gqa/../images/2361006.jpg,family,"def execute_command_3423213(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly",0
18107197,Is the ottoman to the right or to the left of the brown chair?,left,./data/gqa/../images/2411038.jpg,right,"def execute_command_18107197(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # it is assumed that there is only one brown chair
    image_patch = ImagePatch(image)
    ottoman_patches = image_patch.find(""ottoman"")
    if len(ottoman_patches) == 0:
        return ""no""
    ottoman_patch = ottoman_patches[0]
    chair_patches = image_patch.find(""brown chair"")
    if len(chair_patches) == 0:
        return ""no""
    chair_patch = chair_patches[0]
    if ottoman_patch.horizontal_center > chair_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",0
5716578,Is there a laptop on the bed near the magazines?,no,./data/gqa/../images/2386029.jpg,no,"def execute_command_5716578(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # modified to only take one image
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")
    laptop_patch = laptop_patches[0]
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")
    bed_patch = bed_patches[0]
    magazine_patches = image_patch.find(""magazine"")
    # Question assumes only one magazine patch
    if len(magazine_patches) == 0:
        return ""no""
    magazine_patch = magazine_patches[0]
    return bool_to_yesno(laptop_patch.horizontal_center > bed_patch.horizontal_center and magazine_patch.horizontal_center > bed_patch.horizontal_center)",1
8215791,Is the porcelain toilet to the left or to the right of the small trash can?,right,./data/gqa/../images/2367752.jpg,right,"def execute_command_8215791(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one porcelain toilet and one small trash can
    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    small_trash_can_patches = image_patch.find(""small trash can"")
    porcelain_toilet = porcelain_toilet_patches[0]
    small_trash_can = small_trash_can_patches[0]
    if porcelain_toilet.horizontal_center > small_trash_can.horizontal_center:
        return ""right""
    else:
        return ""left""",1
17528455,What is in front of the wall?,chair,./data/gqa/../images/2410790.jpg,chair,"def execute_command_17528455(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"")",1
4896890,Do the goggles and the gloves have a different colors?,yes,./data/gqa/../images/2323940.jpg,yes,"def execute_command_4896890(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # goggles and gloves are assumed to be of the same color
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"")
    goggles_patch = goggles_patches[0]
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one gloves patch
    if len(gloves_patches) == 0:
        return ""no""
    gloves_patch = gloves_patches[0]
    if goggles_patch.simple_query(""What color are the goggles?"") != gloves_patch.simple_query(""What color are the gloves?""):
        return ""yes""
    return ""no""",1
947724,Is there any purple pillow or kite in this photograph?,yes,./data/gqa/../images/2363706.jpg,yes,"def execute_command_947724(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note: this is a simple case, the function is not very efficient for complex cases
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    kite_patches = image_patch.find(""kite"")
    for patch in pillow_patches + kite_patches:
        if patch.simple_query(""Is the object purple?"") == ""yes"":
            return ""yes""
    return ""no""",1
5679522,"What are the people to the right of the man doing, standing or sitting?",standing,./data/gqa/../images/2344481.jpg,sitting,"def execute_command_5679522(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # to the right of
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    people_patch = people_patches[0]
    if people_patch.horizontal_center > man_patch.horizontal_center:
        return people_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    return ""no""",0
15492262,Which kind of furniture is white?,bunk beds,./data/gqa/../images/2404401.jpg,bed,"def execute_command_15492262(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    return furniture_patches[0].simple_query(""Which kind of furniture is white?"")",0
151032547,Is the bear on the right side?,yes,./data/gqa/../images/2362719.jpg,yes,"def execute_command_151032547(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not sure what this does
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    if bear_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
5698674,Are there either any planters or benches?,no,./data/gqa/../images/2345759.jpg,no,"def execute_command_5698674(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # What is in the picture?
    image_patch = ImagePatch(image)
    is_planters = image_patch.exists(""planter"")
    is_benches = image_patch.exists(""bench"")
    return bool_to_yesno(is_planters or is_benches)",1
19397103,What is the person that is standing staring at?,laptop,./data/gqa/../images/2362477.jpg,display,"def execute_command_19397103(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person that is standing staring at?"")",0
11630681,What is the color of the necklace?,blue,./data/gqa/../images/2368188.jpg,blue,"def execute_command_11630681(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a color
    image_patch = ImagePatch(image)
    # contains a property (color, shape, etc), so ask directly
    return image_patch.simple_query(""What is the color of the necklace?"")",1
248245,Is the table to the left or to the right of the fence?,left,./data/gqa/../images/2399658.jpg,left,"def execute_command_248245(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes a fence and a table
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    table_patch = table_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        return ""no""
    fence_patch = fence_patches[0]
    if table_patch.horizontal_center < fence_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
837033,Are there round windows or doors?,no,./data/gqa/../images/2365264.jpg,no,"def execute_command_837033(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # What kind of window is that?
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Are there round windows or doors?"")
    is_round = window_patches[0].simple_query(""Is the window round?"") == ""yes""
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        return bool_to_yesno(is_round)
    is_round_door = door_patches[0].simple_query(""Is the door round?"") == ""yes""
    return bool_to_yesno(is_round or is_round_door)",1
5249150,Are there any bears or napkins in the picture?,no,./data/gqa/../images/2384131.jpg,no,"def execute_command_5249150(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)",1
13908598,What kind of vehicle is to the left of the person?,no vehicle,./data/gqa/../images/2368544.jpg,cars,"def execute_command_13908598(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < image_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"") # crop would include the person so keep it in the query
    return ""no vehicle""",0
61006749,Who is dressed in pink?,the girl,./data/gqa/../images/2343256.jpg,girls,"def execute_command_61006749(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a PIL image
    image = np.array(image) # convert to numpy array
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is dressed in pink?"")",0
6122955,Does the pillow have yellow color?,no,./data/gqa/../images/2395059.jpg,no,"def execute_command_6122955(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the pillow have yellow color?"")",1
6861738,Is the old woman to the right or to the left of the faucet?,right,./data/gqa/../images/2386261.jpg,right,"def execute_command_6861738(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")",1
15833048,Which kind of animal is on the road?,cow,./data/gqa/../images/2352085.jpg,cow,"def execute_command_15833048(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one road patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is on the road?"")
    return animal_patches[0].simple_query(""Which kind of animal is on the road?"")",1
9524339,What animal is large?,dog,./data/gqa/../images/2373158.jpg,dog,"def execute_command_9524339(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a list of strings
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal large?"") == ""yes"":
            return animal_patch.simple_query(""What animal is large?"") # crop would include the animal so keep it in the query
    # If no animal is large, pick the first animal
    return animal_patches[0].simple_query(""What animal is large?"")",1
18255749,How clean are the sheets the pillow is to the right of?,clean,./data/gqa/../images/2378355.jpg,clean,"def execute_command_18255749(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheet_patches = image_patch.find(""sheets"")
    if len(sheet_patches) == 0:
        # If no sheets are found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    for sheet_patch in sheet_patches:
        if sheet_patch.horizontal_center > pillow_patch.horizontal_center:
            return sheet_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    # If no sheets are found to the right of the pillow, query the pillow directly
    return pillow_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")",1
19797097,What's the man wearing?,hat,./data/gqa/../images/1498.jpg,coat,"def execute_command_19797097(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the man wearing?"")",0
6899090,Is the man to the right or to the left of the appliance that looks white?,right,./data/gqa/../images/2396386.jpg,right,"def execute_command_6899090(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")",1
3357701,Does the dog to the right of the other dog have white color?,yes,./data/gqa/../images/2380239.jpg,yes,"def execute_command_3357701(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not used
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    for dog_patch in dog_patches:
        # Question assumes only one dog patch
        if len(dog_patches) == 1:
            return bool_to_yesno(dog_patch.verify_property(""dog"", ""white""))
        for other_dog_patch in dog_patches:
            if other_dog_patch.horizontal_center > dog_patch.horizontal_center:
                return bool_to_yesno(dog_patch.verify_property(""dog"", ""white""))
    # If no dog is to the right of another dog, pick the first dog
    return bool_to_yesno(dog_patches[0].verify_property(""dog"", ""white""))",1
2829418,What's the girl holding?,a kite,./data/gqa/../images/2381595.jpg,kite,"def execute_command_2829418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What's the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What's the girl holding?"")",1
15930109,Which kind of vehicle is blue?,motorcycle,./data/gqa/../images/2382038.jpg,car,"def execute_command_15930109(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vehicle is blue?"")",0
1525382,What type of vegetable is on the food with the cheese?,peppers,./data/gqa/../images/2363859.jpg,pepper,"def execute_command_1525382(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a relation
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")",0
8548980,Are there either players or hand soaps?,yes,./data/gqa/../images/2348943.jpg,no,"def execute_command_8548980(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the object is a player
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)",0
4438348,"Which kind of food is not made, the sandwich or the croissant?",no,./data/gqa/../images/2405611.jpg,croissant,"def execute_command_4438348(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # food is a super category
    image_patch = ImagePatch(image)
    sandwich_patches = image_patch.find(""sandwich"")
    # Question assumes only one sandwich patch
    if len(sandwich_patches) == 0:
        # If no sandwich is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    croissant_patches = image_patch.find(""croissant"")
    # Question assumes only one croissant patch
    if len(croissant_patches) == 0:
        # If no croissant is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    is_sandwich_made = (sandwich_patches[0].simple_query(""Is the sandwich made?"") == ""yes"")
    is_croissant_made = (croissant_patches[0].simple_query(""Is the croissant made?"") == ""yes"")
    return bool_to_yesno(not is_sandwich_made and is_croissant_made)",0
6423906,Which kind of food is on the plate?,cake,./data/gqa/../images/2414271.jpg,sausage,"def execute_command_6423906(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    plate_patch = plate_patches[0]
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        return ""no food""
    food_patch = food_patches[0]
    return food_patch.best_text_match([""pizza"", ""cake"", ""sandwich""]) # crop would include the food so keep it in the query",0
1993231,Are the animals in the image of different types?,yes,./data/gqa/../images/2385977.jpg,yes,"def execute_command_1993231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # unused variable
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    for i in range(len(animal_patches)):
        for j in range(i + 1, len(animal_patches)):
            if animal_patches[i].simple_query(""What type of animal is this?"") != animal_patches[j].simple_query(""What type of animal is this?""):
                return ""yes""
    return ""no""",1
13949656,Are there any people to the left of the tray?,no,./data/gqa/../images/1592103.jpg,no,"def execute_command_13949656(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume one tray patch
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for people_patch in people_patches:
        tray_patches = image_patch.find(""tray"")
        for tray_patch in tray_patches:
            if tray_patch.horizontal_center > people_patch.horizontal_center:
                return ""yes""
    return ""no""",1
184032,Does the fresh pineapple appear to be ripe?,yes,./data/gqa/../images/2328765.jpg,yes,"def execute_command_184032(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is not a question about the image, so it should be the last one
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""fresh pineapple"", ""ripe"")) # the image already contains the object, so no need to crop it",1
9392591,Are there chairs or smoothies?,no,./data/gqa/../images/2323628.jpg,no,"def execute_command_9392591(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is a new function
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)",1
4285170,Which kind of animal is to the right of the sheep?,goat,./data/gqa/../images/2374871.jpg,cow,"def execute_command_4285170(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    for animal_patch in image_patch.find(""animal""):
        if animal_patch.horizontal_center > sheep_patches[0].horizontal_center:
            return animal_patch.simple_query(""Which kind of animal is to the right of the sheep?"") # crop would include the sheep so keep it in the query
    return ""no""",0
9896138,Are there any boxes to the left of the screen in the picture?,no,./data/gqa/../images/2379471.jpg,no,"def execute_command_9896138(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a PIL image object
    image_patch = ImagePatch(image)
    boxes_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(boxes_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in boxes_patches:
        if box_patch.left < image_patch.left:
            return ""yes""
    return ""no""",1
1400333,What do you think is the man on?,skateboard,./data/gqa/../images/2345833.jpg,skateboard,"def execute_command_1400333(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # uses a relation (on) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the man on?"")",1
13105327,Is the boot white or orange?,orange,./data/gqa/../images/2380045.jpg,orange,"def execute_command_13105327(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one boot patch
    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    boot_patch = boot_patches[0]
    return boot_patch.best_text_match([""white"", ""orange""]) # crop would include the color so keep it in the query",1
3659880,Does the wood boat have silver color?,no,./data/gqa/../images/2411226.jpg,no,"def execute_command_3659880(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # do we need to crop?
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""Does the wood boat have silver color?"")
    return bool_to_yesno(boat_patches[0].verify_property(""wood boat"", ""silver"")) # crop would include the boat so keep it in the query",1
1827802,Is the red pot on the appliance to the right of the mixer?,no,./data/gqa/../images/2321180.jpg,yes,"def execute_command_1827802(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # mixer and appliance are not objects in the image
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    red_pot_patch = red_pot_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""no""
    appliance_patch = appliance_patches[0]
    mixer_patches = image_patch.find(""mixer"")
    # Question assumes only one mixer patch
    if len(mixer_patches) == 0:
        return ""no""
    mixer_patch = mixer_patches[0]
    if mixer_patch.horizontal_center > appliance_patch.horizontal_center and appliance_patch.horizontal_center > red_pot_patch.horizontal_center:
        return ""yes""
    return ""no""",0
14809102,The phone that is in front of the camera is of what color?,white,./data/gqa/../images/2390981.jpg,white,"def execute_command_14809102(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: assumes only one phone in front of camera
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # Question assumes only one phone patch
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    if len(phone_patches) > 1:
        return ""There are multiple phones in front of the camera.""
    phone_patch = phone_patches[0]
    return phone_patch.simple_query(""The phone that is in front of the camera is of what color?"") # crop would include the camera so keep it in the query",1
61001545,What type of food is to the left of the silver spoon?,broccoli,./data/gqa/../images/2374409.jpg,cheese,"def execute_command_61001545(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")",0
799463,Are there both a window and a door in the picture?,no,./data/gqa/../images/2361911.jpg,no,"def execute_command_799463(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # boolean query
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",1
11260725,Does the water have small size and white color?,yes,./data/gqa/../images/2378779.jpg,no,"def execute_command_11260725(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not used
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""water"", ""small"") and image_patch.verify_property(""water"", ""white""))",0
2397653,Are there any fences that are white?,yes,./data/gqa/../images/2358708.jpg,yes,"def execute_command_2397653(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ->str
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any fences that are white?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""yes""
    return ""no""",1
1554603,Who is holding the animal?,the boy,./data/gqa/../images/2349439.jpg,boy,"def execute_command_1554603(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is only one person holding the animal
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    person_patch = person_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""Who is holding the animal?"")
    animal_patch = animal_patches[0]
    if animal_patch.horizontal_center < person_patch.horizontal_center:
        return person_patch.simple_query(""Who is holding the animal?"")
    return ""no one""",1
11606818,Is the man to the right or to the left of the people the stroller is to the right of?,left,./data/gqa/../images/2367450.jpg,left,"def execute_command_11606818(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one stroller patch
    image_patch = ImagePatch(image)
    stroller_patches = image_patch.find(""stroller"")
    if len(stroller_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    stroller_patch = stroller_patches[0]
    people_patches = image_patch.find(""people"")
    people_to_right_of_stroller = []
    for people_patch in people_patches:
        if people_patch.horizontal_center > stroller_patch.horizontal_center:
            people_to_right_of_stroller.append(people_patch)
    if len(people_to_right_of_stroller) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center > people_to_right_of_stroller[0].horizontal_center:
            return ""right""
        else:
            return ""left""",1
8988476,What kind of furniture is presented in this photo?,chair,./data/gqa/../images/2386661.jpg,chair,"def execute_command_8988476(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What kind of furniture is presented in this photo?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.best_text_match([""chair"", ""table"", ""bed"", ""sofa""])",1
10695214,What is the man with the backpack holding?,no,./data/gqa/../images/2371579.jpg,cell phone,"def execute_command_10695214(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the query asks about the man, but the man is not the subject of the query, so we need to find the man and then query the image
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center == man_patch.horizontal_center:
            return man_patch.simple_query(""What is the man holding?"") # crop would include the backpack so keep it in the query
    return ""no""",0
91058050,Are there both mouse pads and computer mice in the photograph?,yes,./data/gqa/../images/2371684.jpg,yes,"def execute_command_91058050(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a yes or no answer
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_computer_mouse = image_patch.exists(""computer mouse"")
    return bool_to_yesno(is_mouse_pad and is_computer_mouse)",1
1972064,Is the person in front of the tree wearing jeans?,no,./data/gqa/../images/286080.jpg,yes,"def execute_command_1972064(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note: person and tree must be in the same image patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")
    person_patch = person_patches[0]
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        return ""no""
    tree_patch = tree_patches[0]
    if person_patch.horizontal_center > tree_patch.horizontal_center:
        return ""yes"" if person_patch.simple_query(""Is the person wearing jeans?"") == ""yes"" else ""no""
    return ""no""",0
167162,Is there a bike to the right of the purse that is to the right of the woman?,yes,./data/gqa/../images/2351365.jpg,yes,"def execute_command_167162(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    purse_patch = purse_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if purse_patch.horizontal_center > woman_patch.horizontal_center:
        return ""no""
    bike_patches = image_patch.find(""bike"")
    # Question assumes only one bike patch
    if len(bike_patches) == 0:
        return ""no""
    bike_patch = bike_patches[0]
    if bike_patch.horizontal_center > purse_patch.horizontal_center:
        return ""yes""
    return ""no""",1
1695388,Who is wearing a shirt?,the man,./data/gqa/../images/2386308.jpg,guy,"def execute_command_1695388(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")",0
10960149,Is the woman to the left or to the right of the man in the bottom?,right,./data/gqa/../images/2347450.jpg,right,"def execute_command_10960149(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottom
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    woman_patch = woman_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    man_patch = man_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
16921984,What is the bent man to the right of the other men doing?,jumping,./data/gqa/../images/2378471.jpg,posing,"def execute_command_16921984(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one bent man patch
    image_patch = ImagePatch(image)
    bent_man_patch = image_patch.find(""bent man"")[0]
    other_man_patches = image_patch.find(""man"")
    for other_man_patch in other_man_patches:
        if other_man_patch.horizontal_center < bent_man_patch.horizontal_center:
            return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")",0
12175564,What animal are the men to the right of the girl leading?,cow,./data/gqa/../images/2326674.jpg,cows,"def execute_command_12175564(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    girl_patch = girl_patches[0]
    men_patches = image_patch.find(""men"")
    # Question assumes only one men patch
    if len(men_patches) == 0:
        return ""no""
    for men_patch in men_patches:
        if men_patch.horizontal_center > girl_patch.horizontal_center:
            animal_patches = image_patch.find(""animal"")
            # Question assumes only one animal patch
            if len(animal_patches) == 0:
                return ""no""
            return animal_patches[0].simple_query(""What animal are the men to the right of the girl leading?"") # crop would include the men so keep it in the query
    return ""no""",0
1219606,On which side of the image is the house?,left,./data/gqa/../images/2366688.jpg,left,"def execute_command_1219606(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is the input image
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
1770499,Is the black suitcase to the right or to the left of the person on the left?,right,./data/gqa/../images/1159718.jpg,right,"def execute_command_1770499(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left person is assumed to be on the left
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    person_patch = person_patches[0]
    black_suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one black suitcase patch
    if len(black_suitcase_patches) == 0:
        return ""no""
    black_suitcase_patch = black_suitcase_patches[0]
    if black_suitcase_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
5282406,Is the pot to the left of a chair?,yes,./data/gqa/../images/2401498.jpg,no,"def execute_command_5282406(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no image parameter needed
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    for pot_patch in pot_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if pot_patch.horizontal_center < chair_patch.horizontal_center:
                return ""yes""
    return ""no""",0
10914401,Where are the people?,the park,./data/gqa/../images/1437.jpg,park,"def execute_command_10914401(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # to the left, to the right, above, below
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    people_patch = people_patches[0]
    return people_patch.simple_query(""Where are the people?"") # crop would include the people so keep it in the query",1
1919722,What animal is eating the grass?,sheep,./data/gqa/../images/2402094.jpg,sheep,"def execute_command_1919722(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # use simple query instead
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is eating the grass?"")
    animal_patch = animal_patches[0]
    if animal_patch.verify_property(""animal"", ""eating""):
        return animal_patch.simple_query(""What animal is eating the grass?"")
    else:
        return ""no""",1
9681008,Who is wearing a helmet?,the boy,./data/gqa/../images/2353765.jpg,man,"def execute_command_9681008(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # helmet is a noun
    image_patch = ImagePatch(image)
    # not a relational verb so go step by step
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        is_wearing_helmet = (person_patch.simple_query(""Is the person wearing a helmet?"") == ""yes"")
        if is_wearing_helmet:
            return person_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no person is wearing a helmet, pick the first person
    return person_patches[0].simple_query(""Who is wearing a helmet?"")",0
16861675,Who is on the surfboard in the middle of the photo?,a man,./data/gqa/../images/2384357.jpg,man,"def execute_command_16861675(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")",1
10947426,What is the color of the lizard beside the banana?,brown,./data/gqa/../images/2410441.jpg,gray,"def execute_command_10947426(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one banana and one lizard
    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    # Question assumes only one lizard patch
    if len(lizard_patches) == 0:
        # If no lizard is found, query the image directly
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    for lizard_patch in lizard_patches:
        banana_patches = image_patch.find(""banana"")
        for banana_patch in banana_patches:
            if lizard_patch.horizontal_center > banana_patch.horizontal_center:
                return lizard_patch.simple_query(""What is the color of the lizard beside the banana?"") # crop would include the lizard and the banana so keep it in the query
    # If no lizard is beside a banana, query the image directly
    return image_patch.simple_query(""What is the color of the lizard beside the banana?"") # crop would include the lizard and the banana so keep it in the query",0
18200684,Is the wine glass in the top or in the bottom part?,top,./data/gqa/../images/2345208.jpg,top,"def execute_command_18200684(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not sure how to get the wine glass from the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")",1
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?,car,./data/gqa/../images/2316620.jpg,car,"def execute_command_3882988(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: implement
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    people_patch = people_patches[0]
    if people_patch.horizontal_center == image_patch.horizontal_center:
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < people_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")",1
171012637,Is the teddy bear to the right of a suitcase?,yes,./data/gqa/../images/2363844.jpg,yes,"def execute_command_171012637(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # to the right of
    image_patch = ImagePatch(image)
    teddy_bear_patches = image_patch.find(""teddy bear"")
    # Question assumes only one teddy bear patch
    if len(teddy_bear_patches) == 0:
        # If no teddy bear is found, query the image directly
        return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"")
    teddy_bear_patch = teddy_bear_patches[0]
    suitcase_patches = image_patch.find(""suitcase"")
    # Question assumes only one suitcase patch
    if len(suitcase_patches) == 0:
        return ""no""
    suitcase_patch = suitcase_patches[0]
    if teddy_bear_patch.horizontal_center > suitcase_patch.horizontal_center:
        return ""yes""
    return ""no""",1
19861372,Is the woman's hair long or short?,long,./data/gqa/../images/2350003.jpg,long,"def execute_command_19861372(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    return woman_patch.best_text_match([""long"", ""short""])",1
623889,Are both the television and the armchair the same color?,yes,./data/gqa/../images/2319836.jpg,yes,"def execute_command_623889(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # only one command per function
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""television"")
    # Question assumes only one TV patch
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Are both the television and the armchair the same color?"")
    tv_patch = tv_patches[0]
    armchair_patches = image_patch.find(""armchair"")
    # Question assumes only one armchair patch
    if len(armchair_patches) == 0:
        return ""no""
    armchair_patch = armchair_patches[0]
    return bool_to_yesno(tv_patch.verify_property(""television"", ""same color as"") == armchair_patch.verify_property(""armchair"", ""same color as""))",1
4917605,Is the shoe white or brown?,brown,./data/gqa/../images/2380186.jpg,brown,"def execute_command_4917605(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # asks for the predicate of a relational verb (shoe), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shoe white or brown?"")",1
91055143,What is on the table?,wine,./data/gqa/../images/2375931.jpg,glass,"def execute_command_91055143(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is the same as the simple_query method
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")",0
5430643,What do you think sits on the plate to the left of the tomato?,pizza,./data/gqa/../images/2338569.jpg,lemon,"def execute_command_5430643(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # or what sits on the plate next to the tomato?
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")",0
523936,Is the woman in the top part of the picture?,no,./data/gqa/../images/2318853.jpg,no,"def execute_command_523936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no relation so ask step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center > image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",1
3189548,Is there a bottle on the nightstand that is on the bed?,yes,./data/gqa/../images/2396367.jpg,yes,"def execute_command_3189548(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")",1
14292161,The pot is of which color?,white,./data/gqa/../images/2330795.jpg,white,"def execute_command_14292161(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # has a relation (in front of, on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The pot is of which color?"")",1
17495150,"What device is black, the microphone or the laptop?",Error Ejecucion: name 'verify_property' is not defined,./data/gqa/../images/2409112.jpg,laptop,"def execute_command_17495150(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # uses relation to find the device
    image_patch = ImagePatch(image)
    is_microphone = image_patch.exists(""microphone"")
    is_laptop = image_patch.exists(""laptop"")
    if is_microphone and is_laptop:
        microphone_patch = image_patch.find(""microphone"")[0]
        laptop_patch = image_patch.find(""laptop"")[0]
        if verify_property(microphone_patch.cropped_image, ""microphone"", ""black""):
            return ""microphone""
        elif verify_property(laptop_patch.cropped_image, ""laptop"", ""black""):
            return ""laptop""
        else:
            return ""neither""
    elif is_microphone:
        return ""microphone""
    elif is_laptop:
        return ""laptop""
    else:
        return ""neither""",0
1521847,Is the cat on a desk?,yes,./data/gqa/../images/2340804.jpg,yes,"def execute_command_1521847(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the cat on a desk?"")",1
16465081,The man is holding what?,phone,./data/gqa/../images/2380050.jpg,bat,"def execute_command_16465081(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    objects = man_patch.find(""object"")
    if len(objects) == 0:
        return image_patch.simple_query(""The man is holding what?"")
    return objects[0].best_text_match([""book"", ""phone"", ""backpack""]) # crop would include the object so keep it in the query",0
17387032,What is on the post?,letter,./data/gqa/../images/2357841.jpg,street sign,"def execute_command_17387032(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the best match
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.best_text_match([""post"", ""letter"", ""note"", ""envelope""]) # should be a list of the possible answers",0
1892436,What is in front of the kids that are looking at the cake?,table,./data/gqa/../images/2409346.jpg,table,"def execute_command_1892436(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")",1
18906705,How big is the crowd?,no,./data/gqa/../images/2364283.jpg,small,"def execute_command_18906705(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes the image is of a crowd
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How big is the crowd?"")",0
6157200,Does the sign on the pole have white color?,yes,./data/gqa/../images/2393048.jpg,no,"def execute_command_6157200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # execute_command
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    return bool_to_yesno(sign_patches[0].verify_property(""sign"", ""white""))",0
16760226,What's the laptop in front of?,television,./data/gqa/../images/2338131.jpg,screen,"def execute_command_16760226(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"")",0
111054070,How large is the bed?,large,./data/gqa/../images/2386495.jpg,large,"def execute_command_111054070(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns size of bed
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    return bed_patches[0].simple_query(""How large is the bed?"")",1
14143886,Where is the person with the luggage standing on?,sidewalk,./data/gqa/../images/2324284.jpg,ground,"def execute_command_14143886(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # has a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the person with the luggage standing on?"")",0
19872633,Are there either any fire extinguishers or pepper shakers?,no,./data/gqa/../images/2372702.jpg,no,"def execute_command_19872633(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # exists, or, or
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)",1
12755010,Is the bottle to the right of a napkin?,yes,./data/gqa/../images/2416649.jpg,no,"def execute_command_12755010(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        return ""no""
    for bottle_patch in bottle_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if bottle_patch.horizontal_center > napkin_patch.horizontal_center:
                return ""yes""
    return ""no""",0
2747001,Are there any soaps or bombs?,no,./data/gqa/../images/2378524.jpg,no,"def execute_command_2747001(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bomb is not a common object
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)",1
1553845,Do you see baby giraffes or elephants?,no,./data/gqa/../images/2326292.jpg,yes,"def execute_command_1553845(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see baby giraffes or elephants?"")",0
6898877,What is the sign on?,the motorcycle,./data/gqa/../images/2396386.jpg,post,"def execute_command_6898877(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"")",0
15862812,What is the sticker on?,suitcase,./data/gqa/../images/2331576.jpg,briefcase,"def execute_command_15862812(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: implement simple_query for sticker
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    sticker_patch = sticker_patches[0]
    object_patches = image_patch.find(""object"")
    for object_patch in object_patches:
        if object_patch.simple_query(""Is the sticker on this object?"") == ""yes"":
            return sticker_patch.simple_query(""What is the sticker on?"")
    return ""I couldn't find the object the sticker is on""",0
141031470,On which side of the image is the white towel?,left,./data/gqa/../images/2395695.jpg,right,"def execute_command_141031470(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left, right
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    if towel_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
41026846,Who rides a motorcycle?,no one,./data/gqa/../images/2342324.jpg,man,"def execute_command_41026846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who rides a motorcycle?"")",0
16540391,What is around the bathtub the towel is on?,top,./data/gqa/../images/2411094.jpg,wall,"def execute_command_16540391(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one bathtub and one towel
    image_patch = ImagePatch(image)
    bathtub_patch = image_patch.find(""bathtub"")
    towel_patch = image_patch.find(""towel"")
    # Question assumes only one bathtub and one towel patch
    if len(bathtub_patch) == 0 or len(towel_patch) == 0:
        # If no bathtub or towel is found, query the image directly
        return image_patch.simple_query(""What is around the bathtub the towel is on?"")
    bathtub_patch = bathtub_patch[0]
    towel_patch = towel_patch[0]
    if bathtub_patch.simple_query(""Is the towel on top of the bathtub?"") == ""yes"":
        return ""top""
    elif bathtub_patch.simple_query(""Is the towel to the side of the bathtub?"") == ""yes"":
        return ""side""
    else:
        return ""bottom""",0
7469617,Is the man to the left or to the right of the person that is to the left of the people?,"Error Codigo: expected an indented block after 'else' statement on line 30 (Codex, line 31)",./data/gqa/../images/2407446.jpg,left,"def execute_command_7469617(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left is the default, so it's to the left
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    person_patch = person_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    people_patch = people_patches[0]
    if people_patch.horizontal_center > person_patch.horizontal_center:
        if man_patch.horizontal_center > people_patch.horizontal_center:
            return ""right""
        else:
            return ""left""
    else:
        if man_patch.horizontal_center > people_patch.horizontal_center:
            return ""right""
        else:
           ",0
64308,What's located on top of the soup?,bread,./data/gqa/../images/2339845.jpg,spice,"def execute_command_64308(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one soup patch
    image_patch = ImagePatch(image)
    soup_patches = image_patch.find(""soup"")
    if len(soup_patches) == 0:
        return image_patch.simple_query(""What's located on top of the soup?"")
    soup_patch = soup_patches[0]
    return soup_patch.simple_query(""What's located on top of the soup?"")",0
16660910,Are both the fence and the bench made of the same material?,yes,./data/gqa/../images/2336505.jpg,yes,"def execute_command_16660910(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to be modified
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    fence_patch = fence_patches[0]
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        return ""no""
    bench_patch = bench_patches[0]
    if fence_patch.simple_query(""What material is the fence made of?"") == bench_patch.simple_query(""What material is the bench made of?""):
        return ""yes""
    return ""no""",1
3196255,Are there helmets that are not white?,yes,./data/gqa/../images/2409979.jpg,yes,"def execute_command_3196255(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    is_not_white = image_patch.simple_query(""Is the helmet not white?"")
    return bool_to_yesno(is_not_white)",1
2992630,Is the bowl to the right or to the left of the man that is drinking?,right,./data/gqa/../images/2400911.jpg,right,"def execute_command_2992630(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this query assumes the bowl is a bowl and the man is drinking
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    bowl_patch = bowl_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    if bowl_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
513894,Is the person above the sand wearing glasses?,no,./data/gqa/../images/2391205.jpg,yes,"def execute_command_513894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes the person is wearing glasses
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    person_patch = person_patches[0]
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    sand_patch = sand_patches[0]
    return bool_to_yesno(person_patch.vertical_center < sand_patch.vertical_center)",0
14167599,Is the color of the life preserver the same as that of the house?,no,./data/gqa/../images/2353515.jpg,yes,"def execute_command_14167599(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a comparison (same as, different from), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")",0
18264755,How is the weather?,sunny,./data/gqa/../images/2368037.jpg,overcast,"def execute_command_18264755(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no relation, so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"") # no relation, so go step by step",0
6711450,What is the animal that is looking into the toilet that is not closed?,unknown,./data/gqa/../images/2413428.jpg,cat,"def execute_command_6711450(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the command is the same as the question
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    for animal_patch in animal_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            is_not_closed = (toilet_patch.simple_query(""Is the toilet closed?"") == ""no"")
            if is_not_closed:
                return animal_patch.best_text_match([""cat"", ""dog"", ""bird""])
    return ""unknown""",0
8641613,Do you see any helmets in the picture that are not red?,no,./data/gqa/../images/2354584.jpg,no,"def execute_command_8641613(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # helmet
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.verify_property(""helmet"", ""red"") == False:
            return ""yes""
    return ""no""",1
2409779,What does the happy person hold?,umbrella,./data/gqa/../images/2409472.jpg,umbrella,"def execute_command_2409779(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one happy person
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    if len(happy_patches) == 0:
        return image_patch.simple_query(""What does the happy person hold?"")
    happy_patch = happy_patches[0]
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return happy_patch.simple_query(""What does the happy person hold?"")",1
8461507,Are there either tissue boxes or lamps in the picture?,yes,./data/gqa/../images/2364508.jpg,no,"def execute_command_8461507(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is an array-like
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)",0
10770916,Which kind of animal is it?,zebra,./data/gqa/../images/2349513.jpg,zebra,"def execute_command_10770916(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # asks for the category of an object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is it?"")",1
19102906,What type of drink is to the left of the plate?,coffee,./data/gqa/../images/2396664.jpg,juice,"def execute_command_19102906(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of drink is to the left of the plate?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly",0
18315440,Is the sky cloudy and blue?,yes,./data/gqa/../images/1016.jpg,yes,"def execute_command_18315440(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_cloudy = image_patch.verify_property(""sky"", ""cloudy"")
    is_blue = image_patch.verify_property(""sky"", ""blue"")
    return bool_to_yesno(is_cloudy and is_blue)",1
453061,Is the fork on the right of the image?,yes,./data/gqa/../images/2407184.jpg,yes,"def execute_command_453061(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on, next to, above, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the fork on the right of the image?"")",1
71002567,"What is the broccoli on, a table or a nightstand?",table,./data/gqa/../images/2386067.jpg,table,"def execute_command_71002567(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on, next to, in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"") # crop would include the surface so keep it in the query",1
17465089,Is the field green and small?,yes,./data/gqa/../images/2320864.jpg,no,"def execute_command_17465089(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a verb so go step by step
    image_patch = ImagePatch(image)
    is_green = image_patch.simple_query(""Is the field green?"")
    is_small = image_patch.simple_query(""Is the field small?"")
    return bool_to_yesno(is_green and is_small)",0
16150157,What is on the wall?,flowers,./data/gqa/../images/2416156.jpg,flowers,"def execute_command_16150157(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: Ask about objects that are on walls
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")",1
17882658,Is the van to the left or to the right of the SUV on the right side?,right,./data/gqa/../images/2364043.jpg,left,"def execute_command_17882658(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image_patch is not defined
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    van_patch = van_patches[0]
    if van_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
15101358,Is the girl to the left of the boy?,no,./data/gqa/../images/2316757.jpg,no,"def execute_command_15101358(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the boy so keep it in the query
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    girl_patch = girl_patches[0]
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        return ""no""
    boy_patch = boy_patches[0]
    if girl_patch.horizontal_center < boy_patch.horizontal_center:
        return ""yes""
    else:
        return ""no""",1
12785181,What animals are in the grass?,cows,./data/gqa/../images/2363105.jpg,cows,"def execute_command_12785181(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # grass is a location so query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in the grass?"")",1
348093,Are there both an apple and a bag in the picture?,no,./data/gqa/../images/2376548.jpg,no,"def execute_command_348093(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # a relation between two objects
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)",1
314181,Which sign is shown?,stop sign,./data/gqa/../images/2357167.jpg,stop sign,"def execute_command_314181(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the sign that is shown
    image_patch = ImagePatch(image)
    signs_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(signs_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Which sign is shown?"")
    return signs_patches[0].simple_query(""Which sign is shown?"") # crop would include the sign so keep it in the query",1
16275314,"On which side is the woman, the right or the left?",right,./data/gqa/../images/2380483.jpg,right,"def execute_command_16275314(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image not used in this function
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
19535592,Who runs on the sand?,people,./data/gqa/../images/2336202.jpg,boy,"def execute_command_19535592(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one patch of sand
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who runs on the sand?"")",0
156886,Is there a giraffe near the bush?,yes,./data/gqa/../images/2318497.jpg,yes,"def execute_command_156886(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume image is cropped to the bush
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    for giraffe_patch in giraffe_patches:
        if giraffe_patch.simple_query(""Is the giraffe near the bush?"") == ""yes"":
            return ""yes""
    return ""no""",1
1756642,Which place is it?,beach,./data/gqa/../images/2366730.jpg,ocean,"def execute_command_1756642(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not used
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
11177243,Who wears the shirt?,the boy,./data/gqa/../images/2329182.jpg,boy,"def execute_command_11177243(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # who wears the shirt
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who wears the shirt?"")",1
1972390,What type of animal is standing in the field?,sheep,./data/gqa/../images/2387777.jpg,lamb,"def execute_command_1972390(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the field so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal is standing in the field?"") # crop would include the field so keep it in the query",0
14579439,Is the stuffed animal on the right?,no,./data/gqa/../images/2333167.jpg,no,"def execute_command_14579439(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    return bool_to_yesno(stuffed_animal_patches[0].horizontal_center > image_patch.horizontal_center)",1
6645395,Is the gray building behind the passengers that are boarding the airplane?,yes,./data/gqa/../images/2372224.jpg,yes,"def execute_command_6645395(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # query asks for a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")",1
19610200,Is the fence metallic?,yes,./data/gqa/../images/2346093.jpg,yes,"def execute_command_19610200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the fence is in the top part of the image
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return bool_to_yesno(fence_patches[0].verify_property(""fence"", ""metallic""))",1
5299471,What does the girl that to the left of the trashcan carry?,purse,./data/gqa/../images/2412670.jpg,shopping bag,"def execute_command_5299471(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one girl and one trashcan
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    trashcan_patches = image_patch.find(""trashcan"")
    if len(girl_patches) == 0 or len(trashcan_patches) == 0:
        # If no girl or trashcan is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    girl_patch = girl_patches[0]
    trashcan_patch = trashcan_patches[0]
    if girl_patch.horizontal_center < trashcan_patch.horizontal_center:
        return girl_patch.simple_query(""What does the girl carry?"")
    return ""no""",0
7548203,Which kind of vegetable is on the pizza?,tomatoes,./data/gqa/../images/2389312.jpg,olive,"def execute_command_7548203(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to be able to get the vegetable
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")",0
91027737,On which side is the pan?,right,./data/gqa/../images/2384376.jpg,right,"def execute_command_91027737(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # what is the side of the pan? (left, right, top, bottom)
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    for pan_patch in pan_patches:
        if pan_patch.left == 0:
            return ""left""
        elif pan_patch.right == image_patch.cropped_image.shape[2]:
            return ""right""
        elif pan_patch.lower == 0:
            return ""top""
        elif pan_patch.upper == image_patch.cropped_image.shape[1]:
            return ""bottom""",1
19133443,Are the black cars in the top part of the photo?,yes,./data/gqa/../images/2374328.jpg,no,"def execute_command_19133443(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes image is RGB
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    if black_car_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",0
6144031,Who is in the living room?,three girls,./data/gqa/../images/2390488.jpg,girl,"def execute_command_6144031(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # (living room, bedroom, etc)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is in the living room?"")",0
14300987,What is the sink made of?,stainless steel,./data/gqa/../images/2417910.jpg,porcelain,"def execute_command_14300987(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one sink patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"")",0
16464341,Is there a black cat or bird?,no,./data/gqa/../images/2386341.jpg,no,"def execute_command_16464341(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is the main function to call to execute the command
    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)",1
1241741,Do you see a bicycle or a biker in this picture?,yes,./data/gqa/../images/2322635.jpg,yes,"def execute_command_1241741(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ImagePatch
    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return bool_to_yesno(is_bicycle or is_biker)",1
844747,Are there both a pillow and a kitten in the image?,no,./data/gqa/../images/2407209.jpg,no,"def execute_command_844747(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Pillow or kitten
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)",1
1104500,What kind of food is in the box?,fish,./data/gqa/../images/2413283.jpg,onion ring,"def execute_command_1104500(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the name of the food
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What kind of food is in the box?"")
    box_patch = box_patches[0]
    food_patches = box_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return box_patch.simple_query(""What kind of food is in the box?"")
    return food_patches[0].simple_query(""What kind of food is in the box?"")",0
4204973,What is the food that is to the left of the kid called?,donuts,./data/gqa/../images/2327387.jpg,donuts,"def execute_command_4204973(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # food is a relational verb so ask directly
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the food that is to the left of the kid called?"")",1
11820726,"What device is the desk in front of, a television or a printer?",television,./data/gqa/../images/2401576.jpg,printer,"def execute_command_11820726(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not tested
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    for desk_patch in desk_patches:
        device_patches = image_patch.find(""device"")
        # Question assumes only one device patch
        if len(device_patches) == 0:
            # If no device is found, query the image directly
            return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
        device_patch = device_patches[0]
        if device_patch.horizontal_center > desk_patch.horizontal_center:
            return device_patch.best_text_match([""television"", ""printer""])
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"") # no device found",0
18114588,Do you see a helmet there?,yes,./data/gqa/../images/2355905.jpg,yes,"def execute_command_18114588(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is there a helmet in the image?
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""helmet""))",1
11950874,What animal is standing on the ground?,no,./data/gqa/../images/2348673.jpg,bear,"def execute_command_11950874(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one animal and one ground patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        ground_patch = image_patch.find(""ground"")[0]
        if animal_patch.horizontal_center > ground_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is standing on the ground?"")
    return ""no"" # If no animal is standing on the ground, query the image directly",0
10216953,Is the small car to the left of the fork on the right?,yes,./data/gqa/../images/2412469.jpg,yes,"def execute_command_10216953(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Assuming one fork and one car patch
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    car_patches = image_patch.find(""car"")
    if len(fork_patches) == 0 or len(car_patches) == 0:
        return ""no""
    fork_patch = fork_patches[0]
    car_patch = car_patches[0]
    if car_patch.horizontal_center > fork_patch.horizontal_center:
        return ""yes""
    return ""no""",1
16184942,Does that grass look brown and short?,yes,./data/gqa/../images/2356100.jpg,no,"def execute_command_16184942(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Not implemented
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does that grass look brown and short?"")",0
6312238,Is the hydrant to the left of the car?,yes,./data/gqa/../images/2324132.jpg,no,"def execute_command_6312238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this function is only used for testing, not in the original code
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    # Question assumes only one hydrant patch
    if len(hydrant_patches) == 0:
        # If no hydrant is found, query the image directly
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    for hydrant_patch in hydrant_patches:
        car_patches = image_patch.find(""car"")
        # Question assumes only one car patch
        if len(car_patches) == 0:
            return ""no""
        for car_patch in car_patches:
            if car_patch.horizontal_center > hydrant_patch.horizontal_center:
                return ""no""
    return ""yes""",0
16646227,On which side of the picture is the gray car?,right,./data/gqa/../images/2361354.jpg,left,"def execute_command_16646227(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # right or left
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    if gray_car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?,left,./data/gqa/../images/2417660.jpg,left,"def execute_command_10484636(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # only works if there's one person and one ball
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for ball_patch in ball_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
        person_patch = person_patches[0]
        if ball_patch.horizontal_center > person_patch.horizontal_center:
            return ""right""
        else:
            return ""left""",1
3443704,What is the woman wearing?,jeans,./data/gqa/../images/2416524.jpg,jacket,"def execute_command_3443704(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # could be simplified to just return image_patch.simple_query(""What is the woman wearing?"")
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is the woman wearing?"") # crop would include the clothing so keep it in the query",0
19313572,What is the color of the tent to the left of the vehicles?,white,./data/gqa/../images/2381995.jpg,white,"def execute_command_19313572(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the tent
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    tent_patch = tent_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.horizontal_center < tent_patch.horizontal_center:
        return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    return tent_patch.simple_query(""What is the color of the tent to the right of the vehicles?"")",1
10885675,What is the toilet seat made of?,wood,./data/gqa/../images/2321578.jpg,plastic,"def execute_command_10885675(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: verify property
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the toilet seat made of?"")",0
6926432,What animal is resting on the blanket?,dog,./data/gqa/../images/2341891.jpg,dog,"def execute_command_6926432(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # a relation (resting on)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is resting on the blanket?"")",1
14561612,What color do you think the bikini that the woman is wearing is?,blue,./data/gqa/../images/2358167.jpg,green,"def execute_command_14561612(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the ""execute_command"" function is just a placeholder
    image_patch = ImagePatch(image)
    bikini_patches = image_patch.find(""bikini"")
    # Question assumes only one bikini patch
    if len(bikini_patches) == 0:
        # If no bikini is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    return bikini_patches[0].best_text_match([""red"", ""blue"", ""green""]) # crop would include the bikini so keep it in the query",0
6587755,Are both the room and the bowl the same color?,yes,./data/gqa/../images/28.jpg,yes,"def execute_command_6587755(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is this the same as color?
    image_patch = ImagePatch(image)
    is_room_color = image_patch.verify_property(""room"", ""color"")
    is_bowl_color = image_patch.verify_property(""bowl"", ""color"")
    return bool_to_yesno(is_room_color and is_bowl_color)",1
4479543,Is the barn white or brown?,brown,./data/gqa/../images/2399909.jpg,brown,"def execute_command_4479543(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer
    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    # Question assumes only one barn patch
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    return barn_patches[0].best_text_match([""white"", ""brown""]) # crop would include the color so keep it in the query",1
972522,Does the box look white or brown?,white,./data/gqa/../images/2412806.jpg,white,"def execute_command_972522(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is the cropped image
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""white"", ""brown""])",1
3948528,What is the bowl made of?,plastic,./data/gqa/../images/2358903.jpg,plastic,"def execute_command_3948528(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the bowl is not visible in the image
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What is the bowl made of?"")
    return bowl_patches[0].simple_query(""What is the bowl made of?"")",1
15724828,Is the bench in front of the rock gray or red?,no,./data/gqa/../images/2390800.jpg,gray,"def execute_command_15724828(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this one is incorrect because it doesn't take into account the bench being in front of the rock
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    for bench_patch in bench_patches:
        is_gray = bench_patch.simple_query(""Is the bench gray?"")
        is_red = bench_patch.simple_query(""Is the bench red?"")
        if is_gray and bench_patch.verify_property(""bench"", ""in front of rock""):
            return ""gray""
        elif is_red and bench_patch.verify_property(""bench"", ""in front of rock""):
            return ""red""
    return ""no"" # return ""no"" if no bench is found in front of a rock",0
866459,On which side is the couch?,right,./data/gqa/../images/2360132.jpg,left,"def execute_command_866459(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # need to implement ""on which side"" question
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    for couch_patch in couch_patches:
        if couch_patch.left > image_patch.left and couch_patch.right < image_patch.right:
            return ""right""
        elif couch_patch.left < image_patch.left and couch_patch.right > image_patch.right:
            return ""left""
    return ""right"" # default answer",0
8614812,Is the person that is playing wearing shorts?,no,./data/gqa/../images/2411380.jpg,yes,"def execute_command_8614812(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Is the person wearing shorts?"")",0
167438,What is wearing the ground?,motorcycles,./data/gqa/../images/2351365.jpg,helmet,"def execute_command_167438(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"")",0
9418088,Which kind of furniture is wooden?,table,./data/gqa/../images/2417483.jpg,cabinets,"def execute_command_9418088(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # uses simple_qa to query the image directly if no furniture is found
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wooden""):
            return furniture_patch.simple_query(""Which kind of furniture is wooden?"")
    return image_patch.simple_query(""Which kind of furniture is wooden?"")",0
1042377,Who is standing beside the person that is wearing a dress?,the man,./data/gqa/../images/2861.jpg,man,"def execute_command_1042377(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")",1
16889676,Is it an indoors or outdoors scene?,indoors,./data/gqa/../images/1159654.jpg,indoors,"def execute_command_16889676(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ->str
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")",1
10324400,How fat are the long skis?,no,./data/gqa/../images/2408676.jpg,skinny,"def execute_command_10324400(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ski is a noun, so go step by step
    image_patch = ImagePatch(image)
    ski_patches = image_patch.find(""ski"")
    # Question assumes only one ski patch
    if len(ski_patches) == 0:
        # If no ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    for ski_patch in ski_patches:
        return ski_patch.simple_query(""How fat are the long skis?"") # crop would include the skis so keep it in the query",0
2211743,Is the sky clear or overcast?,clear,./data/gqa/../images/2391023.jpg,overcast,"def execute_command_2211743(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not used in the example
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")",0
4224772,Are there bottles to the left of the pencils in the bottom part of the image?,yes,./data/gqa/../images/2403935.jpg,yes,"def execute_command_4224772(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is there a bottle
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
    for bottle_patch in bottle_patches:
        pencil_patches = image_patch.find(""pencil"")
        # Question assumes only one pencil patch
        if len(pencil_patches) == 0:
            return ""no""
        for pencil_patch in pencil_patches:
            if pencil_patch.horizontal_center > bottle_patch.horizontal_center and pencil_patch.vertical_center < image_patch.vertical_center:
                return ""yes""
    return ""no""",1
15478302,Is there any dark door or window in the image?,no,./data/gqa/../images/2390633.jpg,no,"def execute_command_15478302(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Door and window are similar, so it is the same query
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    window_patches = image_patch.find(""window"")
    for door_patch in door_patches:
        if door_patch.simple_query(""Is the door dark?"") == ""yes"":
            return ""yes""
    for window_patch in window_patches:
        if window_patch.simple_query(""Is the window dark?"") == ""yes"":
            return ""yes""
    return ""no""",1
18414234,Do you see either a knife or a chair in the picture?,yes,./data/gqa/../images/2354394.jpg,yes,"def execute_command_18414234(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # or just the image?
    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)",1
19779815,Is the book red or yellow?,yellow,./data/gqa/../images/2406639.jpg,yellow,"def execute_command_19779815(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one book
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    return book_patches[0].best_text_match([""red"", ""yellow""])",1
7257283,Are there men to the left of the picture?,Error Ejecucion: ImagePatch.exists() got an unexpected keyword argument 'left',./data/gqa/../images/2372539.jpg,no,"def execute_command_7257283(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes the picture is in the center
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return bool_to_yesno(image_patch.exists(""man"", left=""left"")) # left is a relation",0
6621625,On which side of the picture is the bench?,left,./data/gqa/../images/2352581.jpg,right,"def execute_command_6621625(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # has a relation (left, right, on top of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the picture is the bench?"")",0
19311589,Are there both fences and horses in this picture?,yes,./data/gqa/../images/2336493.jpg,yes,"def execute_command_19311589(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # only one image
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)",1
171018070,What device is to the right of the container that the person is to the left of?,computer,./data/gqa/../images/2344162.jpg,screen,"def execute_command_171018070(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    person_patch = person_patches[0]
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    container_patch = container_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    device_patch = device_patches[0]
    if device_patch.horizontal_center > container_patch.horizontal_center and container_patch.horizontal_center > person_patch.horizontal_center:
        return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")",0
171031333,Do you see blankets in the picture that are not black?,yes,./data/gqa/../images/2390560.jpg,no,"def execute_command_171031333(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # function name should be more descriptive
    image_patch = ImagePatch(image)
    # not a relational verb, so go step by step
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Do you see blankets in the picture that are not black?"")
    for blanket_patch in blanket_patches:
        if not blanket_patch.simple_query(""Is the blanket black?"") == ""yes"":
            return ""yes""
    return ""no""",0
16695341,What is the fence made of?,Error Ejecucion: name 'Image' is not defined,./data/gqa/../images/2394728.jpg,wood,"def execute_command_16695341(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no image patch object used
    image = Image.open(""path_to_image.jpg"")
    return simple_qa(image, ""What is the fence made of?"")",0
8314287,Do you see any bottle or child there?,no,./data/gqa/../images/2326150.jpg,no,"def execute_command_8314287(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # in the image
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)",1
5111363,Are there chairs or tables that are not blue?,no,./data/gqa/../images/2363283.jpg,no,"def execute_command_5111363(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: check if chair or table is not blue
    image_patch = ImagePatch(image)
    is_chair_not_blue = image_patch.exists(""chair"") and not image_patch.verify_property(""chair"", ""blue"")
    is_table_not_blue = image_patch.exists(""table"") and not image_patch.verify_property(""table"", ""blue"")
    return bool_to_yesno(is_chair_not_blue or is_table_not_blue)",1
9230971,Which place is it?,a city,./data/gqa/../images/2367570.jpg,harbor,"def execute_command_9230971(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Assuming one place patch
    image_patch = ImagePatch(image)
    place_patches = image_patch.find(""place"")
    if len(place_patches) == 0:
        return image_patch.simple_query(""Which place is it?"")
    return place_patches[0].simple_query(""Which place is it?"")",0
132422,Does the hair have short length and white color?,yes,./data/gqa/../images/2324466.jpg,yes,"def execute_command_132422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # short length is a property, white color is a property, so use verify_property
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    return bool_to_yesno(hair_patches[0].verify_property(""hair"", ""short"") and hair_patches[0].verify_property(""hair"", ""white""))",1
4822200,Do you see any lettuce on the food with the meat?,yes,./data/gqa/../images/2344108.jpg,no,"def execute_command_4822200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a property question, so answer directly
    image_patch = ImagePatch(image)
    food_with_meat_patches = image_patch.find(""food with meat"")
    # Question assumes only one food with meat patch
    if len(food_with_meat_patches) == 0:
        # If no food with meat is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    food_with_meat_patch = food_with_meat_patches[0]
    lettuce_patches = food_with_meat_patch.find(""lettuce"")
    return bool_to_yesno(len(lettuce_patches) > 0)",0
3726666,What device is to the left of the curtain that is to the left of the glasses?,wii,./data/gqa/../images/2348427.jpg,remote control,"def execute_command_3726666(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # device, curtain, glasses
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")",0
9954849,What kind of furniture is it?,desk,./data/gqa/../images/2375014.jpg,desk,"def execute_command_9954849(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # should be a question but not necessary for the function
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is it?"")",1
19409495,Are there any red trains or buses?,yes,./data/gqa/../images/2361783.jpg,yes,"def execute_command_19409495(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any red trains or buses?"")",1
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?,orange,./data/gqa/../images/2416035.jpg,lemons,"def execute_command_8965422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # execute_command is a reserved name in Python, so it is better to use a different name
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")",0
623393,"What type of clothing is tan, the hat or the vest?",hat,./data/gqa/../images/713860.jpg,vest,"def execute_command_623393(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ""What type of clothing is tan, the hat or the vest?""
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    tan_patch = tan_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    hat_patch = hat_patches[0]
    vest_patches = image_patch.find(""vest"")
    # Question assumes only one vest patch
    if len(vest_patches) == 0:
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    vest_patch = vest_patches[0]
    if tan_patch.simple_query(""Is the tan patch on top of the hat patch?"") == ""yes"":
        return ""hat""
    elif tan_patch.simple_query(""Is the tan patch on top of the vest patch?"") == ""yes"":
        return ""vest""
    else:
        return ""unknown""",0
6436448,Is the color of the skirt the same as the scarf?,no,./data/gqa/../images/2373592.jpg,no,"def execute_command_6436448(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # and is the scarf the same color as the shirt?
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        return ""no""
    skirt_color = skirt_patches[0].best_text_match([""red"", ""blue"", ""green""])
    scarf_color = scarf_patches[0].best_text_match([""red"", ""blue"", ""green""])
    return bool_to_yesno(skirt_color == scarf_color)",1
3303313,Is the blanket under a cat?,no,./data/gqa/../images/2344857.jpg,no,"def execute_command_3303313(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # a relational verb so go step by step
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is the blanket under a cat?"")
    for blanket_patch in blanket_patches:
        cat_patches = image_patch.find(""cat"")
        # Question assumes only one cat patch
        if len(cat_patches) == 0:
            return ""no""
        for cat_patch in cat_patches:
            if cat_patch.vertical_center > blanket_patch.vertical_center:
                return ""yes""
    return ""no""",1
443663,What color is the picture?,black,./data/gqa/../images/2343442.jpg,blue,"def execute_command_443663(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to be a specific image, cannot be generalized
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"") # assumes no color is given",0
17267472,Is there any umbrella to the right of the man?,no,./data/gqa/../images/930.jpg,no,"def execute_command_17267472(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    if len(umbrella_patches) == 0:
        return ""no""
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patches[0].horizontal_center:
            return ""yes""
    return ""no""",1
1885406,What is the toy on the bed?,bear,./data/gqa/../images/2374740.jpg,stuffed bear,"def execute_command_1885406(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # todo: implement
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the toy on the bed?"")",0
5557965,On which side is the bag?,left,./data/gqa/../images/2347380.jpg,right,"def execute_command_5557965(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a verb, so goes step by step
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    bag_patch = bag_patches[0]
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return bag_patch.simple_query(""On which side is the bag?"")",0
4325825,On which side is the banana?,left side,./data/gqa/../images/2326465.jpg,left,"def execute_command_4325825(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: Add relation
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""On which side is the banana?"")",0
3196355,What does the batter hold?,bat,./data/gqa/../images/2409979.jpg,bat,"def execute_command_3196355(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # batter is a noun
    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    return batter_patches[0].simple_query(""What does the batter hold?"") # crop would include the object being held so keep it in the query",1
14470748,Who wears a jacket?,the woman,./data/gqa/../images/713118.jpg,guy,"def execute_command_14470748(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is not a relational verb so we need to go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for person_patch in person_patches:
        is_wearing_jacket = person_patch.simple_query(""Is the person wearing a jacket?"") == ""yes""
        if is_wearing_jacket:
            return person_patch.simple_query(""Who wears a jacket?"")
    # If no person is wearing a jacket, pick the first person
    return person_patches[0].simple_query(""Who wears a jacket?"")",0
16537736,Are there any houses behind the shrubs?,yes,./data/gqa/../images/2412552.jpg,yes,"def execute_command_16537736(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # house is in the image
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    for house_patch in house_patches:
        shrub_patches = image_patch.find(""shrub"")
        for shrub_patch in shrub_patches:
            if house_patch.horizontal_center < shrub_patch.horizontal_center:
                return ""yes""
    return ""no""",1
1129541,What piece of furniture is made of wood?,chair,./data/gqa/../images/2361386.jpg,bookcase,"def execute_command_1129541(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ->str
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    furniture_patch = furniture_patches[0]
    if furniture_patch.verify_property(""furniture"", ""wood""):
        return furniture_patch.simple_query(""What piece of furniture is made of wood?"")
    else:
        return ""no""",0
15270011,Is the racket to the right or to the left of the man that is wearing a hat?,right,./data/gqa/../images/2404683.jpg,right,"def execute_command_15270011(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # only one man and one racket
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    racket_patch = racket_patches[0]
    if racket_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
12416703,Where is that cat?,in the middle,./data/gqa/../images/2409055.jpg,car,"def execute_command_12416703(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming one cat
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    if len(cat_patches) == 0:
        return image_patch.simple_query(""Where is that cat?"")
    return cat_patches[0].simple_query(""Where is that cat?"")",0
15603088,The animal to the right of the envelope is lying on what?,bed,./data/gqa/../images/2365166.jpg,chair,"def execute_command_15603088(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    animal_patch = animal_patches[0]
    envelope_patches = image_patch.find(""envelope"")
    if len(envelope_patches) == 0:
        # If no envelope is found, query the image directly
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    envelope_patch = envelope_patches[0]
    if envelope_patch.horizontal_center > animal_patch.horizontal_center:
        return animal_patch.simple_query(""The animal to the right of the envelope is lying on what?"") # crop would include the envelope so keep it in the query
    return envelope_patch.simple_query(""The animal to the right of the envelope is lying on what?"")",0
5329077,Is the man on a bench?,no,./data/gqa/../images/2321094.jpg,yes,"def execute_command_5329077(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on a bench?"")",0
1945705,What kind of device is to the left of the device that looks silver and gray?,wii remote,./data/gqa/../images/2375580.jpg,monitor,"def execute_command_1945705(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # execute_command is used to avoid name conflicts
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    device_patch = device_patches[0]
    if device_patch.simple_query(""What kind of device looks silver and gray?"") == ""silver and gray device"":
        left_device_patches = image_patch.find(""device"")
        # Question assumes only one left device patch
        if len(left_device_patches) == 0:
            # If no left device is found, query the image directly
            return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
        left_device_patch = left_device_patches[0]
        return left_device_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    else:
        return device_patch.simple_query",0
17520003,What vehicle is to the right of the pine tree?,train,./data/gqa/../images/2391939.jpg,train,"def execute_command_17520003(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")",1
1259983,Who is wearing pants?,the man,./data/gqa/../images/2354042.jpg,guy,"def execute_command_1259983(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no ""is"" or ""are"" in question
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    for person_patch in person_patches:
        is_wearing_pants = (person_patch.simple_query(""Is the person wearing pants?"") == ""yes"")
        if is_wearing_pants:
            return person_patch.simple_query(""Who is wearing pants?"") # crop would include the pants so keep it in the query
    # If no person is wearing pants, pick the first person
    return person_patches[0].simple_query(""Who is wearing pants?"")",0
6413378,Is there a black keyboard or camera?,no,./data/gqa/../images/2339847.jpg,yes,"def execute_command_6413378(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume only one patch
    image_patch = ImagePatch(image)
    is_black_keyboard = image_patch.exists(""black keyboard"")
    is_black_camera = image_patch.exists(""black camera"")
    return bool_to_yesno(is_black_keyboard or is_black_camera)",0
947305,Is the sunny water blue and high?,yes,./data/gqa/../images/2363705.jpg,yes,"def execute_command_947305(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # has a relation (around, next to, on, near, on top of, in front of, behind, etc)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sunny water blue and high?"")",1
4367817,What type of animal in this scene is brown?,no animal is brown,./data/gqa/../images/2391559.jpg,dog,"def execute_command_4367817(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the type of animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal brown?"") == ""yes"":
            return animal_patch.simple_query(""What type of animal in this scene is brown?"") # crop would include the color so keep it in the query
    return ""no animal is brown""",0
15485572,What is the vegetable on the hot dog with the cheese?,onions,./data/gqa/../images/2404539.jpg,onion,"def execute_command_15485572(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume only one hot dog patch
    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    for hot_dog_patch in hot_dog_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if hot_dog_patch.crop(vegetable_patch.left, vegetable_patch.lower, vegetable_patch.right, vegetable_patch.upper).simple_query(""Is the hot dog with the cheese?"") == ""yes"":
                return vegetable_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"") # crop would include the cheese so keep it in the query
    # If no hot dog with cheese is found, query the image directly
    return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")",0
12661142,What is the appliance in the kitchen called?,oven,./data/gqa/../images/2340480.jpg,oven,"def execute_command_12661142(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one appliance and one kitchen
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    appliance_patch = appliance_patches[0]
    kitchen_patches = image_patch.find(""kitchen"")
    # Question assumes only one kitchen patch
    if len(kitchen_patches) == 0:
        return ""no""
    kitchen_patch = kitchen_patches[0]
    if appliance_patch.exists(""kitchen""):
        return appliance_patch.simple_query(""What is the appliance in the kitchen called?"")
    return ""no""",1
41012743,The arrow is on what?,pole,./data/gqa/../images/2345563.jpg,pole,"def execute_command_41012743(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The arrow is on what?"")",1
4777414,What color is the bicycle in the bottom of the photo?,white,./data/gqa/../images/2323146.jpg,white,"def execute_command_4777414(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # photo is assumed to be a photo
    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    # Question assumes only one bicycle patch
    if len(bicycle_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    if bicycle_patches[0].vertical_center > image_patch.vertical_center:
        return bicycle_patches[0].simple_query(""What color is the bicycle in the bottom of the photo?"")
    return bicycle_patches[0].simple_query(""What color is the bicycle in the top of the photo?"")",1
1185988,What is the device on top of the table that is to the right of the trashcan?,computer,./data/gqa/../images/2391692.jpg,monitor,"def execute_command_1185988(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # device could be a computer or a book
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    for table_patch in table_patches:
        trashcan_patches = image_patch.find(""trashcan"")
        # Question assumes only one trashcan patch
        if len(trashcan_patches) == 0:
            # If no trashcan is found, query the image directly
            return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
        trashcan_patch = trashcan_patches[0]
        device_patches = image_patch.find(""device"")
        # Question assumes only one device patch
        if len(device_patches) == 0:
            # If no device is found, query the image directly
            return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
        device_patch = device_patches[0]
        if (device_patch.horizontal_center > trashcan_patch.horizontal_center) and (device_patch.vertical_center < table_patch.vertical_center):
            return device_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")",0
13582968,Was granite used to make that floor?,no,./data/gqa/../images/2355417.jpg,yes,"def execute_command_13582968(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to be rewritten
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was granite used to make that floor?"")",0
6235273,Are there women in the photo?,yes,./data/gqa/../images/2376201.jpg,yes,"def execute_command_6235273(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this one is not correct
    image_patch = ImagePatch(image)
    is_woman = image_patch.exists(""woman"")
    return bool_to_yesno(is_woman)",1
5377974,What is the girl playing with?,ball,./data/gqa/../images/2394351.jpg,frisbee,"def execute_command_5377974(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one girl and one object
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    girl_patch = girl_patches[0]
    object_patches = image_patch.find(""object"")
    if len(object_patches) == 0:
        return image_patch.simple_query(""What is the girl playing with?"")
    object_patch = object_patches[0]
    if girl_patch.horizontal_center > object_patch.horizontal_center:
        return object_patch.best_text_match([""ball"", ""doll""])
    else:
        return girl_patch.best_text_match([""ball"", ""doll""])",0
51037065,On which side of the image is the fridge?,left,./data/gqa/../images/2391630.jpg,left,"def execute_command_51037065(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is not used
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    if fridge_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
5299477,Which kind of bag does the girl carry?,backpack,./data/gqa/../images/2412670.jpg,shopping bag,"def execute_command_5299477(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patch = image_patch.find(""girl"")[0]
    bag_patches = image_patch.find(""bag"")
    for bag_patch in bag_patches:
        if bag_patch.horizontal_center > girl_patch.horizontal_center:
            return bag_patch.simple_query(""Which kind of bag does the girl carry?"")
    return bag_patches[0].simple_query(""Which kind of bag does the girl carry?"")",0
15135617,Is the white dog on a bench?,Error Ejecucion: 'Tensor' object has no attribute 'find',./data/gqa/../images/2410392.jpg,yes,"def execute_command_15135617(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is an ImagePatch
    image_patch = image
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog on a bench?"")
    for white_dog_patch in white_dog_patches:
        is_on_bench = (image_patch.simple_query(""Is the white dog on a bench?"") == ""yes"")
        if is_on_bench:
            return image_patch.simple_query(""Is the white dog on a bench?"") # crop would include the bench so keep it in the query
    # If no white dog is on a bench, query the image directly
    return image_patch.simple_query(""Is the white dog on a bench?"") # crop would include the bench so keep it in the query",0
1111583,Is the male person to the right of a person?,yes,./data/gqa/../images/2381241.jpg,no,"def execute_command_1111583(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note: ""person"" is a broad category
    image_patch = ImagePatch(image)
    male_patches = image_patch.find(""male"")
    # Question assumes only one male patch
    if len(male_patches) == 0:
        # If no male is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_patch in male_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > male_patch.horizontal_center:
                return ""yes""
    return ""no""",0
12352269,Are there both windows and doors in this photograph?,no,./data/gqa/../images/2361646.jpg,yes,"def execute_command_12352269(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming a single room
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",0
15610844,What kind of place is shown?,residential,./data/gqa/../images/2942.jpg,sidewalk,"def execute_command_15610844(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # could be a room, a store, etc.
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")",0
11869032,Is the banana below a bird?,yes,./data/gqa/../images/2368611.jpg,no,"def execute_command_11869032(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not sure what the question is asking
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Is the banana below a bird?"")
    for banana_patch in banana_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if bird_patch.vertical_center > banana_patch.vertical_center:
                return ""yes""
    return ""no""",0
9878360,What color is the vehicle to the left of the fence?,orange,./data/gqa/../images/2322955.jpg,orange,"def execute_command_9878360(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle and one fence
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center > vehicle_patch.horizontal_center:
                return vehicle_patch.simple_query(""What color is the vehicle?"")
    return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")",1
481765,Are there either any buses or trains in the image?,yes,./data/gqa/../images/2406968.jpg,yes,"def execute_command_481765(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)",1
6665919,What is the fence made of?,wood,./data/gqa/../images/2336198.jpg,wood,"def execute_command_6665919(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # fence is a common noun so go step by step
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    fence_patch = fence_patches[0]
    return fence_patch.best_text_match([""wood"", ""metal"", ""plastic""])",1
9218340,Does the man to the left of the traffic cone wear a cap?,yes,./data/gqa/../images/2412648.jpg,no,"def execute_command_9218340(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one traffic cone
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes only one traffic cone patch
    if len(traffic_cone_patches) == 0:
        return ""no""
    traffic_cone_patch = traffic_cone_patches[0]
    if man_patch.horizontal_center < traffic_cone_patch.horizontal_center:
        return ""yes""
    return ""no""",0
11981238,What is common to the blazer and the suit?,they are both made of cloth,./data/gqa/../images/3180.jpg,color,"def execute_command_11981238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one blazer and one suit patch
    image_patch = ImagePatch(image)
    blazer_patch = image_patch.find(""blazer"")[0]
    suit_patch = image_patch.find(""suit"")[0]
    common_properties = blazer_patch.simple_query(""What is common to the blazer and the suit?"")
    return common_properties",0
16245,Is the shirt white or green?,white,./data/gqa/../images/2399408.jpg,white,"def execute_command_16245(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shirt is a common name for an object, so it will be found
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    return shirt_patches[0].best_text_match([""white"", ""green""])",1
2595103,"In which part of the image are the cars, the bottom or the top?",top,./data/gqa/../images/2364312.jpg,top,"def execute_command_2595103(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    car_patch = car_patches[0]
    if car_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
2429130,"How does the sand look, dry or wet?",wet,./data/gqa/../images/2383620.jpg,wet,"def execute_command_2429130(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # a predicate of a relational verb (e.g. is on top of)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""How does the sand look, dry or wet?"")",1
4325920,Are there fruits to the right of the banana which is on the table?,yes,./data/gqa/../images/2326465.jpg,yes,"def execute_command_4325920(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # table, fruit, banana
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    banana_patch = banana_patches[0]
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        return ""no""
    table_patch = table_patches[0]
    if banana_patch.horizontal_center > table_patch.horizontal_center:
        return ""no""
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        return ""no""
    for fruit_patch in fruit_patches:
        if fruit_patch.horizontal_center > banana_patch.horizontal_center:
            return ""yes""
    return ""no""",1
6376614,What color is the car in the middle?,yellow,./data/gqa/../images/2352530.jpg,yellow,"def execute_command_6376614(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the car in the middle of the image
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    middle_patch = image_patch.crop(image_patch.left + (image_patch.right - image_patch.left) / 2, image_patch.lower + (image_patch.upper - image_patch.lower) / 2, image_patch.right, image_patch.upper)
    return middle_patch.simple_query(""What color is the car in the middle?"")",1
712063,What's the lamp made of?,wood,./data/gqa/../images/2374892.jpg,metal,"def execute_command_712063(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one patch of lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What's the lamp made of?"")",0
19358285,Which kind of furniture is to the right of the pillow?,bed,./data/gqa/../images/1159380.jpg,bed,"def execute_command_19358285(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # furniture is a property of objects, so ask directly
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is to the right of the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is to the right of the pillow, query the image directly
    return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")",1
9647343,What type of material is the patio made of?,concrete,./data/gqa/../images/2383402.jpg,wood,"def execute_command_9647343(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # patio is the object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")",0
12545434,Who is wearing the suit?,a girl,./data/gqa/../images/2402811.jpg,child,"def execute_command_12545434(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (wearing) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the suit?"")",0
12894285,What is the color of the clouds in the sky?,blue,./data/gqa/../images/2368430.jpg,white,"def execute_command_12894285(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one sky patch
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""What is the color of the clouds in the sky?"")
    return sky_patches[0].simple_query(""What is the color of the clouds in the sky?"")",0
9843309,Do the flowers look orange?,no,./data/gqa/../images/2396539.jpg,no,"def execute_command_9843309(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 #TODO: update
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flower"", ""orange""))",1
618996,Is there a chair or a bed in this image?,no,./data/gqa/../images/4652.jpg,yes,"def execute_command_618996(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)",0
18959736,Are there trucks to the left of the umbrella?,no,./data/gqa/../images/2359792.jpg,no,"def execute_command_18959736(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # only one truck and one umbrella
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        return ""no""
    umbrella_patch = umbrella_patches[0]
    for truck_patch in truck_patches:
        if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
            return ""yes""
    return ""no""",1
867869,What color are the pants the man is wearing?,black,./data/gqa/../images/2413471.jpg,black,"def execute_command_867869(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # requires that the man is wearing pants
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return ""no""
    pants_patch = pants_patches[0]
    return pants_patch.simple_query(""What color are the pants the man is wearing?"") # crop would include the pants so keep it in the query",1
551601,Are there any pillows or chairs in the image?,yes,./data/gqa/../images/2409911.jpg,yes,"def execute_command_551601(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)",1
10775785,Are there women to the left of the person with the bag?,yes,./data/gqa/../images/2390608.jpg,yes,"def execute_command_10775785(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bag is a container
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    for bag_patch in bag_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
        person_patch = person_patches[0]
        woman_patches = image_patch.find(""woman"")
        # Question assumes only one woman patch
        if len(woman_patches) == 0:
            # If no woman is found, query the image directly
            return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center < person_patch.horizontal_center:
                return ""yes""
    return ""no""",1
5925408,What is the bike in front of?,a fire hydrant,./data/gqa/../images/2352009.jpg,tree,"def execute_command_5925408(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"")",0
11328059,What type of fast food is shown in this photo?,fries,./data/gqa/../images/2350669.jpg,fries,"def execute_command_11328059(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes the image has a fast food item
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""pizza"", ""burger"", ""fries""])",1
15427544,Are there either beds or desks in the picture?,no,./data/gqa/../images/2363939.jpg,no,"def execute_command_15427544(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming the image is a picture
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)",1
13778498,What type of vehicle is behind the green tree?,train,./data/gqa/../images/2400942.jpg,train,"def execute_command_13778498(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # green tree is a relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly",1
41019603,What is the child standing on?,skis,./data/gqa/../images/2417896.jpg,skis,"def execute_command_41019603(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # has a relation (on) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child standing on?"")",1
11705574,What is the wooden item of furniture called?,cabinet,./data/gqa/../images/2344018.jpg,table,"def execute_command_11705574(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Does not work as expected, as it doesn't account for the wooden item being a chair
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wooden item of furniture called?"")",0
16817277,Is the man to the left or to the right of the woman?,left,./data/gqa/../images/3898.jpg,right,"def execute_command_16817277(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
1316363,Who is wearing the shirt?,catcher,./data/gqa/../images/2396614.jpg,umpire,"def execute_command_1316363(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the shirt?"")",0
18546659,What is the fence made of?,plastic,./data/gqa/../images/2322017.jpg,wood,"def execute_command_18546659(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # material of fence
    image_patch = ImagePatch(image)
    # not a relational verb so go step by step
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    for fence_patch in fence_patches:
        return fence_patch.best_text_match([""wood"", ""metal"", ""plastic""])",0
10519192,What color is the kite that looks triangular?,white,./data/gqa/../images/2389362.jpg,black,"def execute_command_10519192(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # asks for the predicate of a relational verb (looks triangular), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the kite that looks triangular?"")",0
1672200,Who is drinking?,a man,./data/gqa/../images/2357852.jpg,child,"def execute_command_1672200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (drinking), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is drinking?"")",0
5703748,Is the building behind the tree white or brown?,brown,./data/gqa/../images/2390146.jpg,brown,"def execute_command_5703748(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the building behind the tree
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    for building_patch in building_patches:
        tree_patches = image_patch.find(""tree"")
        # Question assumes only one tree patch
        if len(tree_patches) == 0:
            return image_patch.simple_query(""Is the building behind the tree white or brown?"")
        for tree_patch in tree_patches:
            if tree_patch.horizontal_center > building_patch.horizontal_center:
                return building_patch.best_text_match([""white"", ""brown""])
    # If no building is behind the tree, query the image directly
    return image_patch.simple_query(""Is the building behind the tree white or brown?"") # crop would include the tree so keep it in the query",1
5749240,Are the glove and the undershirt both black?,no,./data/gqa/../images/2371802.jpg,yes,"def execute_command_5749240(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes that the glove is to the left of the undershirt
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    glove_patch = glove_patches[0]
    undershirt_patches = image_patch.find(""undershirt"")
    # Question assumes only one undershirt patch
    if len(undershirt_patches) == 0:
        return ""no""
    undershirt_patch = undershirt_patches[0]
    glove_color = glove_patch.simple_query(""What color is the glove?"")
    undershirt_color = undershirt_patch.simple_query(""What color is the undershirt?"")
    return bool_to_yesno(glove_color == undershirt_color)",0
18573157,Is the juice in a cup?,no,./data/gqa/../images/2395994.jpg,no,"def execute_command_18573157(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not sure if the juice is in a cup
    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one juice patch
    if len(juice_patches) == 0:
        # If no juice is found, query the image directly
        return image_patch.simple_query(""Is the juice in a cup?"")
    if len(cup_patches) == 0:
        return ""no""
    juice_patch = juice_patches[0]
    cup_patch = cup_patches[0]
    if juice_patch.horizontal_center > cup_patch.horizontal_center:
        return ""no""
    return ""yes""",1
3445929,Is the brown horse on the right side of the photo?,no,./data/gqa/../images/2394426.jpg,yes,"def execute_command_3445929(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # uses the ImagePatch class
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    brown_horse_patch = horse_patches[0]
    if brown_horse_patch.simple_query(""Is the horse brown?"") == ""yes"":
        if brown_horse_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no""",0
16541709,Where is the grass?,on the ground,./data/gqa/../images/2411098.jpg,ground,"def execute_command_16541709(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one image patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"") # crop would include the grass so keep it in the query",0
15764335,Are there any dogs on the tan sand?,no,./data/gqa/../images/2338855.jpg,no,"def execute_command_15764335(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # also assumes tan sand
    image_patch = ImagePatch(image)
    is_dog = image_patch.exists(""dog"")
    is_sand = image_patch.exists(""sand"")
    is_tan = image_patch.exists(""tan"")
    return bool_to_yesno(is_dog and is_sand and is_tan)",1
1478089,Are the door and the garage door made of the same material?,no,./data/gqa/../images/2391928.jpg,no,"def execute_command_1478089(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # material could be different, so go step by step
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    garage_door_patches = image_patch.find(""garage door"")
    # Question assumes only one door and one garage door patch
    if len(door_patches) == 0 or len(garage_door_patches) == 0:
        # If no door or garage door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_patch = door_patches[0]
    garage_door_patch = garage_door_patches[0]
    door_material = door_patch.simple_query(""What material is the door made of?"")
    garage_door_material = garage_door_patch.simple_query(""What material is the garage door made of?"")
    return bool_to_yesno(door_material == garage_door_material)",1
1250685,Was this picture taken in a bathroom or at a dining room?,yes,./data/gqa/../images/2342742.jpg,bathroom,"def execute_command_1250685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming it has a window
    image_patch = ImagePatch(image)
    is_bathroom = image_patch.verify_property(""window"", ""shower"")
    is_dining_room = image_patch.verify_property(""window"", ""table"")
    return bool_to_yesno(is_bathroom or is_dining_room)",0
10436844,Is the zebra's nose soft and brown?,yes,./data/gqa/../images/2407455.jpg,yes,"def execute_command_10436844(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not implemented
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    zebra_patch = zebra_patches[0]
    is_nose = zebra_patch.simple_query(""Is the zebra's nose soft and brown?"")
    is_nose_soft = zebra_patch.simple_query(""Is the zebra's nose soft?"")
    is_nose_brown = zebra_patch.simple_query(""Is the zebra's nose brown?"")
    return bool_to_yesno(is_nose and is_nose_soft and is_nose_brown)",1
10683765,Does the shirt have blue color?,no,./data/gqa/../images/2393610.jpg,yes,"def execute_command_10683765(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # changed to a function
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return bool_to_yesno(image_patch.verify_property(""shirt"", ""blue""))",0
1593352,Do the draperies look white and striped?,yes,./data/gqa/../images/2317027.jpg,no,"def execute_command_1593352(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # 'striped' is a property
    image_patch = ImagePatch(image)
    draperies_patches = image_patch.find(""draperies"")
    # Question assumes only one draperies patch
    if len(draperies_patches) == 0:
        # If no draperies is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    draperies_patch = draperies_patches[0]
    is_white = draperies_patch.verify_property(""draperies"", ""white"")
    is_striped = draperies_patch.verify_property(""draperies"", ""striped"")
    return bool_to_yesno(is_white and is_striped)",0
16553304,Are the trunks both long and wide?,yes,./data/gqa/../images/2413209.jpg,no,"def execute_command_16553304(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one trunk patch
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    trunk_patch = trunk_patches[0]
    is_long = trunk_patch.verify_property(""trunk"", ""long"")
    is_wide = trunk_patch.verify_property(""trunk"", ""wide"")
    return bool_to_yesno(is_long and is_wide)",0
7165102,Is the car on the left of the photo?,no,./data/gqa/../images/2369857.jpg,no,"def execute_command_7165102(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no simple query
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the car on the left of the photo?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?,no,./data/gqa/../images/2406169.jpg,yes,"def execute_command_11848830(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (and), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")",0
19279872,What is the man to the right of the helmet wearing?,no,./data/gqa/../images/712975.jpg,hat,"def execute_command_19279872(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a string
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        return ""no""
    for helmet_patch in helmet_patches:
        if helmet_patch.horizontal_center > man_patch.horizontal_center:
            return man_patch.simple_query(""What is the man to the right of the helmet wearing?"") # crop would include the helmet so keep it in the query
    return ""no""",0
4285513,What is the color of the floor?,brown,./data/gqa/../images/2387727.jpg,light brown,"def execute_command_4285513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Returns the color of the floor
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor?"") # asks directly",0
3974266,Do the trousers look tan?,no,./data/gqa/../images/2371457.jpg,yes,"def execute_command_3974266(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the trousers so keep it in the query
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return trousers_patches[0].simple_query(""Do the trousers look tan?"")",0
11595009,What are the devices to the right of the device that is to the right of the remote control?,laptop,./data/gqa/../images/2407602.jpg,earphones,"def execute_command_11595009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the name of the devices
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    remote_control_patch = remote_control_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes one device patch to the right of the remote control
    if len(device_patches) == 0:
        return ""no device to the right of the remote control""
    for device_patch in device_patches:
        if device_patch.horizontal_center > remote_control_patch.horizontal_center:
            continue
        for other_device_patch in device_patches:
            if other_device_patch.horizontal_center > device_patch.horizontal_center:
                return other_device_patch.simple_query(""What is the device?"") # crop would include the device so keep it in the query
    return ""no device to the right of the remote control""",0
6183000,Are there nightstands or beds?,no,./data/gqa/../images/2395834.jpg,yes,"def execute_command_6183000(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # has a relation, so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""nightstand"") or image_patch.exists(""bed"")) # has a relation, so ask directly",0
14143982,Is it an outdoors scene?,yes,./data/gqa/../images/2324286.jpg,yes,"def execute_command_14143982(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: need a way to determine whether a scene is indoors or outdoors
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it an outdoors scene?""))",1
6123160,Are the speakers to the left of a Wii controller?,yes,./data/gqa/../images/2395059.jpg,no,"def execute_command_6123160(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume only one speaker and one Wii controller
    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    wii_controller_patches = image_patch.find(""Wii controller"")
    # Question assumes only one speaker patch and one Wii controller patch
    if len(speaker_patches) == 0 or len(wii_controller_patches) == 0:
        # If no speaker or Wii controller is found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    speaker_patch = speaker_patches[0]
    wii_controller_patch = wii_controller_patches[0]
    if speaker_patch.horizontal_center < wii_controller_patch.horizontal_center:
        return ""yes""
    return ""no""",0
3681634,Is the plastic fork in the top or in the bottom part of the photo?,top,./data/gqa/../images/2345076.jpg,top,"def execute_command_3681634(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # type: ignore
    image_patch = ImagePatch(image)
    plastic_fork_patches = image_patch.find(""plastic fork"")
    # Question assumes only one plastic fork patch
    if len(plastic_fork_patches) == 0:
        # If no plastic fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    if plastic_fork_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
13629530,What is the vehicle on the street?,bus,./data/gqa/../images/2324176.jpg,bus,"def execute_command_13629530(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle on the street?"")
    return vehicle_patches[0].simple_query(""What is the vehicle on the street?"")",1
1718325,Are there chairs or windows in the scene?,yes,./data/gqa/../images/2364800.jpg,yes,"def execute_command_1718325(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Not used
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)",1
10607062,What color is the hat the man is in?,black,./data/gqa/../images/2404261.jpg,black,"def execute_command_10607062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch and one hat patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    hat_patches = image_patch.find(""hat"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    if len(hat_patches) == 0:
        return ""no""
    return hat_patches[0].simple_query(""What color is the hat the man is in?"") # crop would include the man so keep it in the query",1
1849976,What vegetables are to the left of the spoon?,onions,./data/gqa/../images/2342679.jpg,tomatoes,"def execute_command_1849976(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one spoon patch
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    for vegetable_patch in vegetable_patches:
        for spoon_patch in spoon_patches:
            if vegetable_patch.horizontal_center < spoon_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetables are to the left of the spoon?"") # crop would include the spoon so keep it in the query
    return ""no""",0
14827816,Is the statue made of bronze or stone?,stone,./data/gqa/../images/2334605.jpg,stone,"def execute_command_14827816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one statue patch
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    statue_patch = statue_patches[0]
    return statue_patch.best_text_match([""bronze"", ""stone""])",1
857204,What's the woman wearing?,dress,./data/gqa/../images/2407372.jpg,dress,"def execute_command_857204(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # The woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"")",1
2201105,Is the ball pink?,yes,./data/gqa/../images/2373240.jpg,yes,"def execute_command_2201105(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # can be replaced with image_patch.simple_query(""Is the ball pink?"")
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return bool_to_yesno(ball_patches[0].verify_property(""ball"", ""pink"")) # crop would include the color so keep it in the query",1
14616023,What piece of furniture are the cords in front of?,laptop,./data/gqa/../images/713353.jpg,table,"def execute_command_14616023(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")",0
161027411,Are there both doors and windows in this photo?,no,./data/gqa/../images/2368893.jpg,yes,"def execute_command_161027411(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)",0
8249677,On which side of the image is the black car?,left,./data/gqa/../images/2386080.jpg,left,"def execute_command_8249677(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not necessary to return a string
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    if black_car_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
16184856,What is the striped animal called?,giraffe,./data/gqa/../images/2356100.jpg,zebra,"def execute_command_16184856(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # change the image to image_patch
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the striped animal called?"") # change the image to image_patch",0
1479068,Is it outdoors?,Error Ejecucion: ImagePatch.verify_property() missing 1 required positional argument: 'attribute',./data/gqa/../images/2349540.jpg,yes,"def execute_command_1479068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # or in a park or a garden, etc
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""outdoor""))",0
16155046,Is the dry grass below a zebra?,yes,./data/gqa/../images/2394019.jpg,yes,"def execute_command_16155046(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the dry grass below a zebra?"")",1
16515071,What is the person in the water wearing?,blue,./data/gqa/../images/2402712.jpg,swimsuit,"def execute_command_16515071(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person in the water wearing?"")",0
161015042,Who is wearing the goggles?,the child,./data/gqa/../images/2414543.jpg,boy,"def execute_command_161015042(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this one doesn't work
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is wearing the goggles?"")",0
19149868,What is pulled by the lady?,bananas,./data/gqa/../images/2361612.jpg,banana,"def execute_command_19149868(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (pulled by), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is pulled by the lady?"")",0
5199994,What's the man wearing?,black shirt,./data/gqa/../images/2413903.jpg,t-shirt,"def execute_command_5199994(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer to ""What is the man wearing?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the man wearing?"")",0
19184475,Are the man glasses on the left side of the image?,yes,./data/gqa/../images/2347169.jpg,yes,"def execute_command_19184475(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume that there is only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center < man_patch.horizontal_center:
        return ""yes""
    return ""no""",1
7149602,Is the shirt orange or blue?,no,./data/gqa/../images/2353209.jpg,blue,"def execute_command_7149602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # changed to def execute_command(image)->str:
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    shirt_patch = shirt_patches[0]
    is_orange = (shirt_patch.simple_query(""Is the shirt orange?"") == ""yes"")
    is_blue = (shirt_patch.simple_query(""Is the shirt blue?"") == ""yes"")
    return bool_to_yesno(is_orange or is_blue)",0
19479555,What is the person to the right of the benches holding?,bat,./data/gqa/../images/2396663.jpg,baseball bat,"def execute_command_19479555(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    for person_patch in person_patches:
        bench_patches = image_patch.find(""bench"")
        for bench_patch in bench_patches:
            if bench_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.best_text_match([""book"", ""phone"", ""pen"", ""apple""])
    # If no bench is to the right of the person, query the image directly
    return image_patch.simple_query(""What is the person to the right of the benches holding?"")",0
19273393,Are there both a door and a window in this photo?,no,./data/gqa/../images/2410350.jpg,no,"def execute_command_19273393(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # photo is assumed to be the input image
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)",1
6481656,What is the man doing?,jumping,./data/gqa/../images/2406865.jpg,jumping,"def execute_command_6481656(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    return man_patches[0].simple_query(""What is the man doing?"")",1
13127703,What kind of drink is to the left of the bottle the woman is pouring?,wine,./data/gqa/../images/2403783.jpg,wine,"def execute_command_13127703(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle the woman is pouring is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")",1
2378018,What is the toilet in front of?,bathtub,./data/gqa/../images/2390202.jpg,toilet paper,"def execute_command_2378018(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one toilet patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"")",0
8430841,Is the frisbee to the left of the guy?,no,./data/gqa/../images/2371994.jpg,yes,"def execute_command_8430841(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is only one guy and one frisbee
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    guy_patches = image_patch.find(""guy"")
    if len(frisbee_patches) == 0 or len(guy_patches) == 0:
        # If no frisbee or guy is found, query the image directly
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    frisbee_patch = frisbee_patches[0]
    guy_patch = guy_patches[0]
    if frisbee_patch.horizontal_center < guy_patch.horizontal_center:
        return ""yes""
    return ""no""",0
18616818,The man is watching who?,the woman,./data/gqa/../images/2402361.jpg,woman,"def execute_command_18616818(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (watching), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is watching who?"")",1
179526,Is the white dog behind a girl?,no,./data/gqa/../images/286099.jpg,yes,"def execute_command_179526(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one white dog and one girl
    image_patch = ImagePatch(image)
    white_dog_patch = image_patch.find(""white dog"")[0]
    girl_patch = image_patch.find(""girl"")[0]
    if white_dog_patch.horizontal_center < girl_patch.horizontal_center:
        return ""yes""
    return ""no""",0
21018827,Is the river murky and calm?,yes,./data/gqa/../images/2399964.jpg,no,"def execute_command_21018827(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no relation, so go step by step
    image_patch = ImagePatch(image)
    river_patches = image_patch.find(""river"")
    # Question assumes only one river patch
    if len(river_patches) == 0:
        # If no river is found, query the image directly
        return image_patch.simple_query(""Is the river murky and calm?"")
    river_patch = river_patches[0]
    is_murky = river_patch.verify_property(""river"", ""murky"")
    is_calm = river_patch.verify_property(""river"", ""calm"")
    return bool_to_yesno(is_murky and is_calm)",0
3697449,Who is wearing a shirt?,no one,./data/gqa/../images/2380464.jpg,man,"def execute_command_3697449(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    is_wearing_shirt = (person_patches[0].simple_query(""Is the person wearing a shirt?"") == ""yes"")
    if is_wearing_shirt:
        return person_patches[0].simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    return ""no one""",0
3697807,Are there both a racket and a toothbrush in the image?,no,./data/gqa/../images/2343973.jpg,no,"def execute_command_3697807(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # takes an image as input
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)",1
1904643,What do both the car and the sign have in common?,,./data/gqa/../images/3402.jpg,color,"def execute_command_1904643(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the common property
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        return ""no common property""
    sign_patch = sign_patches[0]
    common_properties = set(car_patch.simple_query(""What property do you have in common with the car?"").split("" and ""))
    common_properties = common_properties.intersection(set(sign_patch.simple_query(""What property do you have in common with the sign?"").split("" and "")))
    return "", "".join(common_properties)",0
11764476,Which place is it?,beach,./data/gqa/../images/2334489.jpg,beach,"def execute_command_11764476(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # list of possible places
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",1
4903948,On what kind of furniture is the plate?,table,./data/gqa/../images/2386929.jpg,shelf,"def execute_command_4903948(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on, in, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On what kind of furniture is the plate?"")",0
61022361,What is the painting that is to the left of the clock hanging on?,portrait,./data/gqa/../images/2348442.jpg,wall,"def execute_command_61022361(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note the hanging on relation is assumed to be a preposition, so ask directly
    image_patch = ImagePatch(image)
    painting_patches = image_patch.find(""painting"")
    # Question assumes only one painting patch
    if len(painting_patches) == 0:
        # If no painting is found, query the image directly
        return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    for painting_patch in painting_patches:
        clock_patches = image_patch.find(""clock"")
        # Question assumes only one clock patch
        if len(clock_patches) == 0:
            return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
        for clock_patch in clock_patches:
            if clock_patch.horizontal_center < painting_patch.horizontal_center:
                return painting_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    # If no painting is to the left of a clock, query the image directly
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")",0
1527392,"What color is the fence, tan or black?",tan,./data/gqa/../images/2317403.jpg,tan,"def execute_command_1527392(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming there's a fence and it's the only one
    image_patch = ImagePatch(image)
    fence_patch = image_patch.find(""fence"")[0]
    fence_color = fence_patch.best_text_match([""tan"", ""black""])
    return fence_color",1
19229351,Do you see both bowls and carrots?,yes,./data/gqa/../images/2332488.jpg,yes,"def execute_command_19229351(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # return bool_to_yesno
    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)",1
1297082,On which side is the silver fork?,right,./data/gqa/../images/2363316.jpg,left,"def execute_command_1297082(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    fork_patch = fork_patches[0]
    if fork_patch.simple_query(""Is the fork silver?"") == ""yes"":
        return ""left"" if fork_patch.left < image_patch.width / 2 else ""right""
    else:
        return image_patch.simple_query(""On which side is the silver fork?"")",0
16757832,Are there any blue helmets or napkins?,no,./data/gqa/../images/2395254.jpg,yes,"def execute_command_16757832(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # query has to be in the form of a question
    image_patch = ImagePatch(image)
    is_helmet = image_patch.exists(""helmet"") and image_patch.verify_property(""helmet"", ""blue"")
    is_napkin = image_patch.exists(""napkin"") and image_patch.verify_property(""napkin"", ""blue"")
    return bool_to_yesno(is_helmet or is_napkin) # query has to be in the form of a question",0
839816,"In which part of the photo is the racket, the top or the bottom?",top,./data/gqa/../images/2407655.jpg,top,"def execute_command_839816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # asks for the predicate of a relational verb (above, below), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")",1
12385226,Is there a mirror in the bathroom?,no,./data/gqa/../images/2394690.jpg,no,"def execute_command_12385226(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is a simple query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a mirror in the bathroom?"")",1
18720852,Are there either blankets or tents in this picture?,no,./data/gqa/../images/2359384.jpg,no,"def execute_command_18720852(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)",1
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?,right,./data/gqa/../images/2402947.jpg,right,"def execute_command_4675139(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman and one box
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    woman_patch = woman_patches[0]
    cardboard_box_patches = image_patch.find(""cardboard box"")
    # Question assumes only one cardboard box patch
    if len(cardboard_box_patches) == 0:
        return ""no""
    cardboard_box_patch = cardboard_box_patches[0]
    if cardboard_box_patch.horizontal_center > woman_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
19453453,Who is wearing a shirt?,the man,./data/gqa/../images/2394240.jpg,man,"def execute_command_19453453(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    return person_patches[0].simple_query(""Who is wearing a shirt?"")",1
19562503,Is the house in the bottom part or in the top of the photo?,bottom,./data/gqa/../images/2386817.jpg,bottom,"def execute_command_19562503(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # todo: implement bottom, top
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    if house_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
11737187,What is in front of the flowers that look red?,table,./data/gqa/../images/2367641.jpg,couch,"def execute_command_11737187(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This query assumes that the image has flowers that look red
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flowers"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""What is in front of the flowers that look red?"")
    flower_patch = flower_patches[0]
    if flower_patch.simple_query(""Do the flowers look red?"") == ""yes"":
        return image_patch.simple_query(""What is in front of the flowers that look red?"")
    else:
        return ""I do not know""",0
15710688,Is the shirt short sleeved or sleeveless?,yes,./data/gqa/../images/2402286.jpg,short sleeved,"def execute_command_15710688(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a 3D array
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    is_sleeveless = shirt_patch.simple_query(""Is the shirt sleeveless?"")
    return bool_to_yesno(is_sleeveless) # bool_to_yesno is a helper function",0
5533952,What are the white wires connected to?,a kite,./data/gqa/../images/2412046.jpg,kite,"def execute_command_5533952(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one wire
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What are the white wires connected to?"")",1
11313555,"What type of furniture is that, a table or a nightstand?",table,./data/gqa/../images/713781.jpg,table,"def execute_command_11313555(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    furniture_patch = furniture_patches[0]
    is_table = furniture_patch.verify_property(""furniture"", ""table"")
    is_nightstand = furniture_patch.verify_property(""furniture"", ""nightstand"")
    return ""table"" if is_table else ""nightstand""",1
10508893,What animals are in front of the trees?,horse,./data/gqa/../images/2398196.jpg,giraffes,"def execute_command_10508893(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This function assumes only one tree patch
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""What animals are in front of the trees?"")
    for tree_patch in tree_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center < tree_patch.horizontal_center:
                return animal_patch.best_text_match([""dog"", ""cat"", ""bird"", ""horse"", ""elephant""])
    return image_patch.simple_query(""What animals are in front of the trees?"") # No animal is in front of the tree",0
14501997,What is the gate made of?,metal,./data/gqa/../images/2365781.jpg,metal,"def execute_command_14501997(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is this a relational question? no
    image_patch = ImagePatch(image)
    gate_patches = image_patch.find(""gate"")
    # Question assumes only one gate patch
    if len(gate_patches) == 0:
        # If no gate is found, query the image directly
        return image_patch.simple_query(""What is the gate made of?"")
    return gate_patches[0].simple_query(""What is the gate made of?"")",1
45624,What color is the device on top of the table?,white,./data/gqa/../images/2365281.jpg,gray,"def execute_command_45624(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a color
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What color is the device on top of the table?"")",0
181032044,Are these closed drawers?,yes,./data/gqa/../images/2323054.jpg,yes,"def execute_command_181032044(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume only one drawer
    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    drawer_patch = drawer_patches[0]
    return bool_to_yesno(drawer_patch.verify_property(""drawer"", ""closed""))",1
383,What kind of furniture is made of wood?,bed,./data/gqa/../images/2390913.jpg,bed,"def execute_command_383(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (made of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is made of wood?"")",1
101054962,What is the person by the bananas wearing?,an apron,./data/gqa/../images/2342539.jpg,apron,"def execute_command_101054962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the bananas so keep it in the query
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    for person_patch in person_patches:
        is_by_bananas = (person_patch.simple_query(""Is the person by the bananas?"") == ""yes"")
        if is_by_bananas:
            return person_patch.simple_query(""What is the person by the bananas wearing?"") # crop would include the bananas so keep it in the query
    # If no person is by the bananas, pick the first person
    return person_patches[0].simple_query(""What is the person by the bananas wearing?"")",1
759165,What is the color of the tower in the middle of the picture?,black,./data/gqa/../images/882.jpg,gray,"def execute_command_759165(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")",0
10775539,Is this giraffe tall and white?,no,./data/gqa/../images/2390608.jpg,no,"def execute_command_10775539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # giraffe is a specific type of animal
    image_patch = ImagePatch(image)
    # assumes only one giraffe patch
    giraffe_patch = image_patch.find(""giraffe"")
    if len(giraffe_patch) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is this giraffe tall and white?"")
    return bool_to_yesno(giraffe_patch[0].verify_property(""giraffe"", ""tall"") and giraffe_patch[0].verify_property(""giraffe"", ""white""))",1
19981804,On which side of the photo is the colorful screen?,left,./data/gqa/../images/2400343.jpg,left,"def execute_command_19981804(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the screen is colorful
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""On which side of the photo is the colorful screen?"") # screen is colorful",1
7903654,Is the tap on the left side or on the right?,right,./data/gqa/../images/2368848.jpg,left,"def execute_command_7903654(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # tap is the name of the object
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the tap on the left side or on the right?"")",0
6206183,Which place is it?,a store,./data/gqa/../images/2334194.jpg,store,"def execute_command_6206183(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # list of places
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",1
15212437,Is the coat black or beige?,black,./data/gqa/../images/1160140.jpg,black,"def execute_command_15212437(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume only one coat
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        return image_patch.simple_query(""Is the coat black or beige?"")
    return coat_patches[0].best_text_match([""black"", ""beige""]) # crop would include the color so keep it in the query",1
13123207,Does the kite near the field look high and red?,no,./data/gqa/../images/2400255.jpg,yes,"def execute_command_13123207(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one kite and one field
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    field_patches = image_patch.find(""field"")
    if len(kite_patches) == 0 or len(field_patches) == 0:
        # If no kite or field is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    kite_patch = kite_patches[0]
    field_patch = field_patches[0]
    if kite_patch.horizontal_center > field_patch.horizontal_center:
        return ""yes"" if (kite_patch.simple_query(""Is the kite high and red?"") == ""yes"") else ""no""
    return ""no""",0
7740092,Are there any utensils in this picture?,yes,./data/gqa/../images/2318172.jpg,no,"def execute_command_7740092(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""utensil"")) # assumes only one utensil",0
8774975,What is around the guy?,white wall,./data/gqa/../images/2358921.jpg,collar,"def execute_command_8774975(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")",0
17728574,Do you see bananas or cookies?,no,./data/gqa/../images/2391600.jpg,no,"def execute_command_17728574(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is the input image
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)",1
14274506,Is the staircase different in color than the sky?,no,./data/gqa/../images/2401595.jpg,yes,"def execute_command_14274506(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # question is different in color, not in color
    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    # Question assumes only one staircase patch
    if len(staircase_patches) == 0:
        # If no staircase is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    staircase_color = staircase_patches[0].best_text_match([""blue"", ""red"", ""green""])
    sky_color = image_patch.best_text_match([""blue"", ""red"", ""green""])
    return bool_to_yesno(staircase_color != sky_color)",0
1605874,What color are the containers that are on the right?,yellow,./data/gqa/../images/2395605.jpg,black,"def execute_command_1605874(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to be adjusted
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center > image_patch.horizontal_center:
            return container_patch.simple_query(""What color are the containers that are on the right?"")
    return ""no""",0
12495781,Are the people to the right or to the left of the cone that is orange?,right,./data/gqa/../images/2375066.jpg,right,"def execute_command_12495781(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")",1
14165681,"What type of clothing is light, the sweater or the cap?",cap,./data/gqa/../images/2341698.jpg,sweater,"def execute_command_14165681(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the clothing so keep it in the query
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    for clothing_patch in clothing_patches:
        is_light = (clothing_patch.simple_query(""Is the clothing light?"") == ""yes"")
        if is_light:
            return clothing_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    # If no clothing is light, pick the first clothing
    return clothing_patches[0].simple_query(""What type of clothing is light, the sweater or the cap?"")",0
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?,to the right,./data/gqa/../images/2400343.jpg,right,"def execute_command_19982010(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl and one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    girl_patches = image_patch.find(""girl"")
    if len(chair_patches) == 0 or len(girl_patches) == 0:
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    chair_patch = chair_patches[0]
    girl_patch = girl_patches[0]
    if chair_patch.horizontal_center > girl_patch.horizontal_center:
        return ""to the right""
    else:
        return ""to the left""",0
5617223,"What color is the container to the left of the horse, green or silver?",green,./data/gqa/../images/2414890.jpg,green,"def execute_command_5617223(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is this a relation or a simple property?
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    for container_patch in container_patches:
        horse_patches = image_patch.find(""horse"")
        # Question assumes only one horse patch
        if len(horse_patches) == 0:
            # If no horse is found, query the image directly
            return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
        for horse_patch in horse_patches:
            if horse_patch.horizontal_center > container_patch.horizontal_center:
                return container_patch.best_text_match([""green"", ""silver""])
    # If no container is to the left of the horse, query the image directly
    return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")",1
2428964,Is the water gray or teal?,teal,./data/gqa/../images/2383620.jpg,gray,"def execute_command_2428964(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].best_text_match([""gray"", ""teal""])",0
19620769,Which place is it?,titans stadium,./data/gqa/../images/2334770.jpg,stadium,"def execute_command_19620769(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This function is used for testing the model
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # This will return the answer to the question ""What is this?"".",0
14785459,On which side of the picture is the lamp?,left,./data/gqa/../images/2370590.jpg,left,"def execute_command_14785459(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # right, left, top, bottom
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    if lamp_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif lamp_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    elif lamp_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
1325617,Does the brown animal look tiny?,no,./data/gqa/../images/2383086.jpg,no,"def execute_command_1325617(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one brown animal
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    return bool_to_yesno(brown_animal_patches[0].verify_property(""brown animal"", ""tiny""))",1
5672532,Does that shirt look long sleeved?,yes,./data/gqa/../images/2373095.jpg,yes,"def execute_command_5672532(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a boolean
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return bool_to_yesno(image_patch.verify_property(""shirt"", ""long sleeved""))
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""long sleeved"")) # crop would include the shirt so keep it in the query",1
6146439,Does the box look green?,no,./data/gqa/../images/2390480.jpg,yes,"def execute_command_6146439(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Is the box green?
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Does the box look green?"") # crop would include the box so keep it in the query",0
1910285,Is the white container on the left of the image?,no,./data/gqa/../images/2064.jpg,yes,"def execute_command_1910285(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on, in, under, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white container on the left of the image?"")",0
13362134,Is that shower curtain to the left of a toilet?,no,./data/gqa/../images/2387101.jpg,no,"def execute_command_13362134(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is an array-like
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center > shower_curtain_patch.horizontal_center:
                return ""no""
    return ""yes""",1
161060488,Is there any cabinet to the right of the stove?,yes,./data/gqa/../images/2358516.jpg,yes,"def execute_command_161060488(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Question assumes one cabinet patch
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for cabinet_patch in cabinet_patches:
        stove_patches = image_patch.find(""stove"")
        for stove_patch in stove_patches:
            if cabinet_patch.horizontal_center > stove_patch.horizontal_center:
                return ""yes""
    return ""no""",1
111055042,Is the chair on the right?,yes,./data/gqa/../images/2386495.jpg,yes,"def execute_command_111055042(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    return bool_to_yesno(chair_patches[0].horizontal_center > image_patch.horizontal_center)",1
151068,Which kind of clothing is white?,white,./data/gqa/../images/2320533.jpg,polo shirt,"def execute_command_151068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: this is not a question to be asked about a single object
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    return clothing_patches[0].best_text_match([""white"", ""red"", ""blue""]) # crop would include the clothing so keep it in the query",0
19387951,Is this place the forest or the garden?,forest,./data/gqa/../images/2331403.jpg,forest,"def execute_command_19387951(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not implemented
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"")",1
1781695,What's on the blanket?,dog,./data/gqa/../images/2378299.jpg,ball,"def execute_command_1781695(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # object and property
    image_patch = ImagePatch(image)
    # object and property so go step by step
    return image_patch.simple_query(""What's on the blanket?"")",0
17699779,Is she on a bed?,no,./data/gqa/../images/2389153.jpg,no,"def execute_command_17699779(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is she on a bed?"")",1
464441,"What piece of furniture is the blanket on, a bed or a sofa?",sofa,./data/gqa/../images/2383984.jpg,sofa,"def execute_command_464441(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # only works if there is only one bed and one sofa
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    for blanket_patch in blanket_patches:
        is_bed = image_patch.exists(""bed"")
        is_sofa = image_patch.exists(""sofa"")
        return image_patch.best_text_match([""bed"", ""sofa""])",1
9505496,Are the wires above a man?,no,./data/gqa/../images/2353108.jpg,yes,"def execute_command_9505496(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not sure what the function is supposed to do
    image_patch = ImagePatch(image)
    # not sure what the function is supposed to do
    return image_patch.simple_query(""Are the wires above a man?"")",0
4625512,What is the woman doing?,sitting,./data/gqa/../images/3947.jpg,sitting,"def execute_command_4625512(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Assuming only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the woman doing?"")
    return woman_patches[0].simple_query(""What is the woman doing?"")",1
9441941,Is the woman's hair red or black?,black,./data/gqa/../images/2315810.jpg,black,"def execute_command_9441941(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is a property of a specific object (woman) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman's hair red or black?"")",1
2387432,What's on the table?,food,./data/gqa/../images/2316448.jpg,soda can,"def execute_command_2387432(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What's on the table?"")
    table_patch = table_patches[0]
    return table_patch.best_text_match([""food"", ""drink"", ""nothing""]) # assumes that the table has only one item",0
10534717,What is the pillow on?,couch,./data/gqa/../images/2351255.jpg,sofa,"def execute_command_10534717(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pillow on?"") # crop would include the object so keep it in the query",0
19335685,"What fruits is the container behind of, apples or bananas?",no,./data/gqa/../images/2404433.jpg,bananas,"def execute_command_19335685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no container in the image
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_banana = image_patch.exists(""banana"")
    return bool_to_yesno(is_apple and is_banana)",0
3127817,The goat is standing in what?,grass,./data/gqa/../images/2400780.jpg,grass,"def execute_command_3127817(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is assumed to be a list of pixels
    image_patch = ImagePatch(image)
    goat_patches = image_patch.find(""goat"")
    # Question assumes only one goat patch
    if len(goat_patches) == 0:
        # If no goat is found, query the image directly
        return image_patch.simple_query(""The goat is standing in what?"")
    goat_patch = goat_patches[0]
    return goat_patch.simple_query(""The goat is standing in what?"") # crop would include the ground so keep it in the query",1
1588567,Where does the man that to the right of the mirror sit?,to the left,./data/gqa/../images/2387080.jpg,desk,"def execute_command_1588567(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume only one mirror patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    man_patch = man_patches[0]
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes one mirror patch
    if len(mirror_patches) == 0:
        return ""I do not know where the man sits""
    mirror_patch = mirror_patches[0]
    if mirror_patch.horizontal_center < man_patch.horizontal_center:
        return ""to the left""
    elif mirror_patch.horizontal_center > man_patch.horizontal_center:
        return ""to the right""
    else:
        return ""in front of""",0
7399543,What is the floor made of?,wood,./data/gqa/../images/2385083.jpg,wood,"def execute_command_7399543(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes the floor is in the same image patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the floor made of?"")",1
13741124,What kind of animal is the house behind of?,cat,./data/gqa/../images/2382560.jpg,cat,"def execute_command_13741124(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer to ""What kind of animal is the house behind of?""
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is the house behind of?"")
    for animal_patch in animal_patches:
        house_patches = image_patch.find(""house"")
        for house_patch in house_patches:
            if house_patch.horizontal_center < animal_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is the house behind of?"") # crop would include the house so keep it in the query
    # If no house is behind of the animal, query the image directly
    return image_patch.simple_query(""What kind of animal is the house behind of?"")",1
1174904,Is the cobblestone sidewalk both large and gray?,no,./data/gqa/../images/2414806.jpg,yes,"def execute_command_1174904(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cobblestone sidewalk
    image_patch = ImagePatch(image)
    cobblestone_ssidewalk_patches = image_patch.find(""cobblestone sidewalk"")
    if len(cobblestone_ssidewalk_patches) == 0:
        # If no cobblestone sidewalk is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    cobblestone_ssidewalk_patch = cobblestone_ssidewalk_patches[0]
    return bool_to_yesno(cobblestone_ssidewalk_patch.verify_property(""cobblestone sidewalk"", ""large"") and cobblestone_ssidewalk_patch.verify_property(""cobblestone sidewalk"", ""gray""))",0
13375231,What is the lettuce on?,plate,./data/gqa/../images/2319499.jpg,burger,"def execute_command_13375231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # only one object
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What is the lettuce on?"")
    return lettuce_patches[0].simple_query(""What is the lettuce on?"")",0
1194027,Which kind of clothing is black?,suit,./data/gqa/../images/2343077.jpg,coat,"def execute_command_1194027(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # execute_command is a function name
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black color so keep it in the query
    # If no clothing is black, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"")",0
9963477,Is the statue wearing a dress?,no,./data/gqa/../images/2351308.jpg,yes,"def execute_command_9963477(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the statue wearing a dress?"")",0
1151995,Which side of the photo is the yellow vase on?,left,./data/gqa/../images/2376541.jpg,left,"def execute_command_1151995(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one yellow vase
    image_patch = ImagePatch(image)
    yellow_vase_patch = image_patch.find(""yellow vase"")[0]
    if yellow_vase_patch.left < image_patch.left + image_patch.width/2:
        return ""left""
    else:
        return ""right""",1
712821,What is common to the bear and the belt?,"['color', 'shape', 'size']",./data/gqa/../images/2331787.jpg,color,"def execute_command_712821(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a list of common properties
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    bear_patch = bear_patches[0]
    belt_patches = image_patch.find(""belt"")
    # Question assumes only one belt patch
    if len(belt_patches) == 0:
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    belt_patch = belt_patches[0]
    common_properties = []
    for property in [""color"", ""shape"", ""size""]:
        bear_has_property = bear_patch.verify_property(""bear"", property)
        belt_has_property = belt_patch.verify_property(""belt"", property)
        if bear_has_property and belt_has_property:
            common_properties.append(property)
    return common_properties",1
1757418,What is the vehicle to the right of the car?,motorcycle,./data/gqa/../images/2402847.jpg,suv,"def execute_command_1757418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle to the right of the car?"")",0
7624100,Are the trunks that are gray wet and large?,yes,./data/gqa/../images/2338200.jpg,yes,"def execute_command_7624100(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # in the image
    image_patch = ImagePatch(image)
    trunks_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunks_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunks_patches:
        is_gray = trunk_patch.simple_query(""Is the trunk gray?"")
        is_wet = trunk_patch.simple_query(""Is the trunk wet?"")
        is_large = trunk_patch.simple_query(""Is the trunk large?"")
        return bool_to_yesno(is_gray and is_wet and is_large)",1
1125474,"On which side of the photo is the iron fence, the right or the left?",left,./data/gqa/../images/2369578.jpg,left,"def execute_command_1125474(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes the iron fence is a single patch
    image_patch = ImagePatch(image)
    iron_fence_patch = image_patch.find(""iron fence"")
    # Question assumes one iron fence patch
    if len(iron_fence_patch) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    if iron_fence_patch[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
1300375,What is the name of the item of furniture that the printer is on?,desk,./data/gqa/../images/4900.jpg,cabinet,"def execute_command_1300375(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a compound question
    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    # Question assumes only one printer patch
    if len(printer_patches) == 0:
        # If no printer is found, query the image directly
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    printer_patch = printer_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.vertical_center == printer_patch.vertical_center:
            return furniture_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"") # if no furniture is found, query the image directly",0
5925196,What's the building covered by?,yes,./data/gqa/../images/2352009.jpg,window,"def execute_command_5925196(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is an array-like
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""What's the building covered by?"")
    building_patch = building_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return ""no""
    object_patch = object_patches[0]
    if object_patch.horizontal_center < building_patch.horizontal_center and object_patch.vertical_center < building_patch.vertical_center:
        return ""yes""
    return ""no""",0
1948055,What watercraft is the white rope tying?,no watercraft is tied by the white rope,./data/gqa/../images/2340314.jpg,boat,"def execute_command_1948055(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # white rope is a property of the rope, so query the rope
    image_patch = ImagePatch(image)
    rope_patches = image_patch.find(""rope"")
    # Question assumes only one rope patch
    if len(rope_patches) == 0:
        # If no rope is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    if rope_patches[0].simple_query(""Is the rope white?"") == ""yes"":
        return rope_patches[0].simple_query(""What watercraft is the rope tying?"")
    return ""no watercraft is tied by the white rope""",0
8540582,What kind of animal is in front of the leafy trees?,giraffe,./data/gqa/../images/2349160.jpg,rhino,"def execute_command_8540582(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes leafy trees are always in front of the animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")
    return animal_patches[0].simple_query(""What kind of animal is in front of the leafy trees?"") # crop would include the trees so keep it in the query",0
3719411,What does the walking woman by the bus wear?,jeans,./data/gqa/../images/2343728.jpg,coat,"def execute_command_3719411(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # use walking woman
    image_patch = ImagePatch(image)
    walking_woman_patches = image_patch.find(""walking woman"")
    # Question assumes only one walking woman patch
    if len(walking_woman_patches) == 0:
        # If no walking woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    walking_woman_patch = walking_woman_patches[0]
    # asks for the predicate of a relational verb (by), so ask directly
    return walking_woman_patch.simple_query(""What does the walking woman by the bus wear?"")",0
1129508,Is the controller to the left of a pillow?,yes,./data/gqa/../images/2361386.jpg,no,"def execute_command_1129508(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to be in the same image
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center < controller_patch.horizontal_center:
                return ""yes""
    return ""no""",0
18664084,Is there any sheep by the fence?,yes,./data/gqa/../images/2400393.jpg,yes,"def execute_command_18664084(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns ""yes"" or ""no""
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is there any sheep by the fence?"")
    for sheep_patch in sheep_patches:
        fence_patches = image_patch.find(""fence"")
        # Question assumes only one fence patch
        if len(fence_patches) == 0:
            return ""no""
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center < sheep_patch.horizontal_center:
                return ""yes""
    return ""no""",1
6912079,What animal is this?,bull,./data/gqa/../images/2321569.jpg,bull,"def execute_command_6912079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is the input to the function
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is this?"")",1
3412029,Where is the person?,outside,./data/gqa/../images/2328273.jpg,sidewalk,"def execute_command_3412029(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a simple query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the person?"") # crop would include the person so keep it in the query",0
14161122,What animal is in the water?,cow,./data/gqa/../images/2395232.jpg,cow,"def execute_command_14161122(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ask the question directly because it is a relational verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")",1
1781542,What is the item of furniture to the right of the baby the parent is to the left of?,bed,./data/gqa/../images/2378299.jpg,chair,"def execute_command_1781542(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # todo: ask for the item of furniture and the parent and baby
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")",0
15699496,What is the cup that looks clean made of?,glass,./data/gqa/../images/2359214.jpg,glass,"def execute_command_15699496(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # and is on the table?
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    for cup_patch in cup_patches:
        if cup_patch.verify_property(""cup"", ""clean""):
            return cup_patch.simple_query(""What is the cup that looks clean made of?"")
    # If no cup looks clean, pick the first cup
    return cup_patches[0].simple_query(""What is the cup that looks clean made of?"")",1
12765451,What animals are to the right of the ladder?,bear,./data/gqa/../images/2325328.jpg,bears,"def execute_command_12765451(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one ladder patch
    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    ladder_patch = ladder_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > ladder_patch.horizontal_center:
            return animal_patch.simple_query(""What animals are to the right of the ladder?"")",0
191044307,What animal is black?,cat,./data/gqa/../images/2379672.jpg,cat,"def execute_command_191044307(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no relation between animal and color, so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is black?"")
    animal_patch = animal_patches[0]
    if animal_patch.verify_property(""animal"", ""black""):
        return animal_patch.simple_query(""What animal is black?"")
    else:
        return ""no animal is black""",1
12639181,Who is wearing shorts?,the man,./data/gqa/../images/2323166.jpg,guy,"def execute_command_12639181(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # clothing not a relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing shorts?"")",0
10630949,Is the person that is not male wearing an elbow pad?,yes,./data/gqa/../images/2406643.jpg,yes,"def execute_command_10630949(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to be executed from a certain context
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")",1
14544602,What is the boy holding?,bat,./data/gqa/../images/2340945.jpg,bat,"def execute_command_14544602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a string describing the object
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    objects = boy_patch.find(""object"")
    # Question assumes only one object patch
    if len(objects) == 0:
        # If no object is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    return objects[0].simple_query(""What is the boy holding?"")",1
2986699,Of what material the dish?,plastic,./data/gqa/../images/2376081.jpg,plastic,"def execute_command_2986699(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # material of the dish
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Of what material the dish?"")",1
161013513,What kind of animal is on the street?,horse,./data/gqa/../images/2366564.jpg,horse,"def execute_command_161013513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    return animal_patches[0].simple_query(""What kind of animal is on the street?"")",1
15143936,What animal is before the roof?,horse,./data/gqa/../images/2315503.jpg,horse,"def execute_command_15143936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # animal is a subject, roof is an object, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is before the roof?"")",1
1955043,Who is playing with the ball?,two men,./data/gqa/../images/2321751.jpg,man,"def execute_command_1955043(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (playing with), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing with the ball?"")",0
91044150,What is the name of the animals in front of the trees beside the river?,no,./data/gqa/../images/2376493.jpg,bears,"def execute_command_91044150(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # does not work because it's not a simple question
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")
    animal_patch = animal_patches[0]
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        return ""no""
    tree_patch = tree_patches[0]
    river_patches = image_patch.find(""river"")
    # Question assumes only one river patch
    if len(river_patches) == 0:
        return ""no""
    river_patch = river_patches[0]
    if (tree_patch.horizontal_center > animal_patch.horizontal_center) and (tree_patch.horizontal_center < river_patch.horizontal_center):
        return animal_patch.best_text_match([""cat"", ""dog"", ""bird""])
    return ""no""",0
13483129,What kind of fruit is hanging?,apple,./data/gqa/../images/2403364.jpg,apple,"def execute_command_13483129(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # fruit is hanging, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is hanging?"")",1
7317299,What is under the bush?,chairs,./data/gqa/../images/2410083.jpg,chairs,"def execute_command_7317299(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (under), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is under the bush?"")",1
17432396,Are there kangaroos or birds in this photograph?,yes,./data/gqa/../images/2400086.jpg,yes,"def execute_command_17432396(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # -> bool
    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)",1
10457241,What is the color of the trousers?,blue,./data/gqa/../images/2327197.jpg,white,"def execute_command_10457241(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the trousers so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the trousers?"")",0
2913850,Is the placemat in the bottom or in the top part?,bottom,./data/gqa/../images/2404849.jpg,bottom,"def execute_command_2913850(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns ""bottom"" or ""top""
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
12788747,What is covered with blanket?,bed,./data/gqa/../images/2106.jpg,bed,"def execute_command_12788747(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered with blanket?"")",1
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?,table,./data/gqa/../images/2387359.jpg,couch,"def execute_command_7343271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")",0
18673671,"In which part of the picture is the desk drawer, the bottom or the top?",bottom,./data/gqa/../images/2406438.jpg,bottom,"def execute_command_18673671(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is a desk and a drawer
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    for desk_patch in desk_patches:
        drawer_patches = image_patch.find(""drawer"")
        # Question assumes only one drawer patch
        if len(drawer_patches) == 0:
            # If no drawer is found, query the image directly
            return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
        drawer_patch = drawer_patches[0]
        if drawer_patch.vertical_center < desk_patch.vertical_center:
            return ""bottom""
        else:
            return ""top""",1
19900141,Are there napkins or tablecloths?,no,./data/gqa/../images/2316836.jpg,no,"def execute_command_19900141(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # or a blanket?
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_napkin or is_tablecloth or is_blanket)",1
19737232,Is the book on the right of the picture?,no,./data/gqa/../images/2386651.jpg,no,"def execute_command_19737232(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the book on the right of the picture?"")",1
475064,Who is wearing the glasses?,the man,./data/gqa/../images/2356800.jpg,boy,"def execute_command_475064(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is the most complex example
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    person_patch = person_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if person_patch.horizontal_center < glasses_patch.horizontal_center:
        return person_patch.simple_query(""Who is wearing the glasses?"")
    else:
        return glasses_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query",0
8594579,Is there a woman to the right of the orange object that is to the right of the person?,no,./data/gqa/../images/2317886.jpg,yes,"def execute_command_8594579(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is only one person, orange object, and woman
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    orange_object_patches = image_patch.find(""orange object"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one person patch, one orange object patch, and one woman patch
    if len(person_patches) == 0 or len(orange_object_patches) == 0 or len(woman_patches) == 0:
        # If no person, orange object, or woman is found, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    person_patch = person_patches[0]
    orange_object_patch = orange_object_patches[0]
    woman_patch = woman_patches[0]
    if (orange_object_patch.horizontal_center > person_patch.horizontal_center and
            woman_patch.horizontal_center > orange_object_patch.horizontal_center):
        return ""yes""
    return ""no""",0
14602992,Which side of the image is the couch on?,left,./data/gqa/../images/2332695.jpg,left,"def execute_command_14602992(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is the original image
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    if couch_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""
    else:
        return ""right""",1
9944587,How tall is the man that is wearing a shirt?,tall,./data/gqa/../images/1159400.jpg,tall,"def execute_command_9944587(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the shirt so keep it in the query
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    return man_patches[0].simple_query(""How tall is the man that is wearing a shirt?"")",1
13736712,Are there any giraffes?,yes,./data/gqa/../images/2337078.jpg,yes,"def execute_command_13736712(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # unused
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe""))",1
6996118,The young girl is wearing what?,a shirt,./data/gqa/../images/2355935.jpg,shirt,"def execute_command_6996118(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # change name to make it more descriptive
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The young girl is wearing what?"")
    girl_patch = girl_patches[0]
    is_wearing_hat = (girl_patch.simple_query(""Is the girl wearing a hat?"") == ""yes"")
    is_wearing_shirt = (girl_patch.simple_query(""Is the girl wearing a shirt?"") == ""yes"")
    is_wearing_skirt = (girl_patch.simple_query(""Is the girl wearing a skirt?"") == ""yes"")
    if is_wearing_hat:
        return ""a hat""
    elif is_wearing_shirt:
        return ""a shirt""
    elif is_wearing_skirt:
        return ""a skirt""
    else:
        return ""nothing""",1
19992576,Is the basket on the floor small and brown?,yes,./data/gqa/../images/2376382.jpg,no,"def execute_command_19992576(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is the basket on the floor small and brown?
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    basket_patch = basket_patches[0]
    on_floor = (basket_patch.simple_query(""Is the basket on the floor?"") == ""yes"")
    is_small = (basket_patch.simple_query(""Is the basket small?"") == ""yes"")
    is_brown = (basket_patch.simple_query(""Is the basket brown?"") == ""yes"")
    return bool_to_yesno(on_floor and is_small and is_brown)",0
17332401,What is the boy in front of?,a hot dog,./data/gqa/../images/2338368.jpg,deck,"def execute_command_17332401(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"")",0
15586294,Which side is the leather armchair on?,right,./data/gqa/../images/2352617.jpg,right,"def execute_command_15586294(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer to ""Which side is the leather armchair on?""
    image_patch = ImagePatch(image)
    leather_armchair_patches = image_patch.find(""leather armchair"")
    # Question assumes only one leather armchair patch
    if len(leather_armchair_patches) == 0:
        # If no leather armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    leather_armchair_patch = leather_armchair_patches[0]
    return ""left"" if leather_armchair_patch.horizontal_center < image_patch.width / 2 else ""right""",1
15658324,What is the horse in front of?,fence,./data/gqa/../images/2404190.jpg,house,"def execute_command_15658324(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"")",0
18453709,What is the item of furniture that has the same color as the controller the man is holding called?,no,./data/gqa/../images/2408048.jpg,sofa,"def execute_command_18453709(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming one controller is held by one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    # Question assumes one controller patch
    if len(controller_patches) == 0:
        return ""no""
    controller_patch = controller_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.best_text_match([""red"", ""blue"", ""green""]) == controller_patch.best_text_match([""red"", ""blue"", ""green""]):
            return furniture_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    return ""no""",0
2531874,Who is playing?,two men,./data/gqa/../images/2407294.jpg,man,"def execute_command_2531874(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one player
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"") # crop would include the player so keep it in the query",0
3112009,Is the plate on the left side?,yes,./data/gqa/../images/2407160.jpg,yes,"def execute_command_3112009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one plate patch
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    return bool_to_yesno(plate_patches[0].horizontal_center < image_patch.horizontal_center)",1
1527613,On which side of the picture is the bag?,left,./data/gqa/../images/2363853.jpg,left,"def execute_command_1527613(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # if bag is not found, query the image directly
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
11781054,Are both the road and the roof the same color?,no,./data/gqa/../images/2325896.jpg,no,"def execute_command_11781054(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not necessary to define the function name
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    roof_patches = image_patch.find(""roof"")
    if len(road_patches) == 0 or len(roof_patches) == 0:
        return ""no""
    road_color = road_patches[0].simple_query(""What color is the road?"")
    roof_color = roof_patches[0].simple_query(""What color is the roof?"")
    return bool_to_yesno(road_color == roof_color)",1
161027384,What is the green rug hanging on?,wall,./data/gqa/../images/2368893.jpg,wall,"def execute_command_161027384(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # has a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the green rug hanging on?"")",1
14153714,Who is using the laptop?,the woman,./data/gqa/../images/2347683.jpg,girl,"def execute_command_14153714(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Question assumes only one laptop patch
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Who is using the laptop?"")
    for laptop_patch in laptop_patches:
        return laptop_patch.simple_query(""Who is using the laptop?"")",0
1969500,Who in the photo is standing?,a woman,./data/gqa/../images/2408009.jpg,woman,"def execute_command_1969500(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note: uses simple_qa which assumes a single object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who in the photo is standing?"") # crop would include standing so keep it in the query",1
693318,Do you see any plates in the photo?,no,./data/gqa/../images/2370435.jpg,no,"def execute_command_693318(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # changed the function name
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate""))",1
19613394,The person on the skateboard is wearing what?,red shirt,./data/gqa/../images/2370550.jpg,helmet,"def execute_command_19613394(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # -> str
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    for person_patch in person_patches:
        is_on_skateboard = (person_patch.simple_query(""Is the person on a skateboard?"") == ""yes"")
        if is_on_skateboard:
            return person_patch.simple_query(""The person on the skateboard is wearing what?"") # crop would include the skateboard so keep it in the query
    # If no person is on a skateboard, pick the first person
    return person_patches[0].simple_query(""The person on the skateboard is wearing what?"")",0
19927237,Is the blue car in front of the white van?,no,./data/gqa/../images/2382358.jpg,no,"def execute_command_19927237(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue car in front of the white van?"")",1
31054022,What is the box sitting on?,table,./data/gqa/../images/2329177.jpg,table,"def execute_command_31054022(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # sitting on is a relational verb
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the box sitting on?"")",1
17634413,Does the ground look snowy and brown?,yes,./data/gqa/../images/2332188.jpg,yes,"def execute_command_17634413(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to be a list
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""ground"", ""snowy and brown""))",1
15185768,Does the sky look blue and clear?,yes,./data/gqa/../images/2348528.jpg,yes,"def execute_command_15185768(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is not used
    return ""yes"" # assuming a blue and clear sky",1
1589160,Does the person that is sitting lean against a fire hydrant?,yes,./data/gqa/../images/2378861.jpg,yes,"def execute_command_1589160(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is the code that gets executed
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    for person_patch in person_patches:
        firehydrant_patches = image_patch.find(""fire hydrant"")
        for firehydrant_patch in firehydrant_patches:
            if firehydrant_patch.horizontal_center > person_patch.horizontal_center:
                return ""yes""
    return ""no""",1
2142522,Are there any shopping carts or mannequins in this photo?,no,./data/gqa/../images/2361766.jpg,no,"def execute_command_2142522(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this will be a function
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)",1
17362234,Are there cages or scrub brushes in this picture?,no,./data/gqa/../images/2322487.jpg,no,"def execute_command_17362234(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes that there are either cages or scrub brushes
    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)",1
4955854,Is the lamp below the chain?,yes,./data/gqa/../images/2391763.jpg,yes,"def execute_command_4955854(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    for lamp_patch in lamp_patches:
        is_below_chain = (lamp_patch.simple_query(""Is the lamp below the chain?"") == ""yes"")
        if is_below_chain:
            return ""yes""
    return ""no""",1
10463545,Is the computer to the right of the other computer silver or black?,yes,./data/gqa/../images/2360654.jpg,silver,"def execute_command_10463545(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: Use a list of computers
    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    # Question assumes two computer patches
    if len(computer_patches) < 2:
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    left_patch = computer_patches[0]
    right_patch = computer_patches[1]
    if left_patch.horizontal_center > right_patch.horizontal_center:
        left, right = right_patch, left_patch
    is_silver = right_patch.simple_query(""Is the computer silver?"")
    return bool_to_yesno(is_silver)",0
2265037,What is the girl wearing?,jacket,./data/gqa/../images/2339113.jpg,boot,"def execute_command_2265037(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the question assumes one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"")",0
15485146,Are there any blue numbers or letters?,no,./data/gqa/../images/4515.jpg,no,"def execute_command_15485146(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # 'number' and 'letter' are both 'object' and 'property'
    image_patch = ImagePatch(image)
    is_blue_number = image_patch.exists(""blue number"")
    is_blue_letter = image_patch.exists(""blue letter"")
    return bool_to_yesno(is_blue_number or is_blue_letter)",1
3483992,Is the long bus to the left or to the right of the person with the backpack?,left,./data/gqa/../images/2409909.jpg,left,"def execute_command_3483992(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bus is long
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    for bus_patch in bus_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
        person_patch = person_patches[0]
        if bus_patch.horizontal_center < person_patch.horizontal_center:
            return ""left""
        else:
            return ""right""",1
13598461,What is the device that is not on called?,remote,./data/gqa/../images/2399127.jpg,remote control,"def execute_command_13598461(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that is not on called?"")",0
13885436,The sky has what color?,blue,./data/gqa/../images/2366746.jpg,blue,"def execute_command_13885436(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one sky patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"")",1
7432467,Is the black container to the left of the man that is on the motorcycle?,no,./data/gqa/../images/2328240.jpg,no,"def execute_command_7432467(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume one motorcycle and one man
    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    man_patches = image_patch.find(""man"")
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one man and one motorcycle patch
    if len(black_container_patches) == 0 or len(man_patches) == 0 or len(motorcycle_patches) == 0:
        # If any of the objects are not found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    man_patch = man_patches[0]
    motorcycle_patch = motorcycle_patches[0]
    if motorcycle_patch.horizontal_center > man_patch.horizontal_center:
        return ""no""
    for black_container_patch in black_container_patches:
        if black_container_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no""",1
19540096,Is the fire in an oven?,no,./data/gqa/../images/2375878.jpg,yes,"def execute_command_19540096(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes oven is in the image
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    # Question assumes only one fire patch
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    oven_patches = image_patch.find(""oven"")
    for oven_patch in oven_patches:
        if oven_patch.contains(fire_patches[0]):
            return ""yes""
    return ""no""",0
18291107,The horse is where?,on the beach,./data/gqa/../images/2395783.jpg,ocean,"def execute_command_18291107(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The horse is where?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly",0
5435474,Is the man that is to the left of the motorbike wearing a hat?,yes,./data/gqa/../images/2343415.jpg,yes,"def execute_command_5435474(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # motorbike
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    man_patch = man_patches[0]
    motorbike_patches = image_patch.find(""motorbike"")
    # Question assumes only one motorbike patch
    if len(motorbike_patches) == 0:
        return ""no""
    for motorbike_patch in motorbike_patches:
        if motorbike_patch.horizontal_center < man_patch.horizontal_center:
            return bool_to_yesno(man_patch.verify_property(""man"", ""hat""))
    return ""no""",1
226307,Are there any tables in the photo?,no,./data/gqa/../images/2369283.jpg,no,"def execute_command_226307(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # table
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))",1
1944826,Who is reflected in the mirror?,a woman,./data/gqa/../images/2319086.jpg,girl,"def execute_command_1944826(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # mirror is the main object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is reflected in the mirror?"")",0
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?,pan,./data/gqa/../images/2353040.jpg,pan,"def execute_command_6199650(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is the most complex one
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc) and a relative position (to the right of), so ask directly
    return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"") # this is a relation and a relative position, so ask directly",1
18435846,What is the color of the balloon that is to the right of the backpack?,blue,./data/gqa/../images/2321647.jpg,purple,"def execute_command_18435846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a boolean
    image_patch = ImagePatch(image)
    balloon_patches = image_patch.find(""balloon"")
    # Question assumes only one balloon patch
    if len(balloon_patches) == 0:
        # If no balloon is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    for balloon_patch in balloon_patches:
        backpack_patches = image_patch.find(""backpack"")
        for backpack_patch in backpack_patches:
            if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
                return balloon_patch.best_text_match([""red"", ""blue"", ""green""])
    # If no balloon is to the right of the backpack, query the image directly
    return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")",0
8390894,Is the woman to the right of the man sitting on a sofa?,yes,./data/gqa/../images/2393431.jpg,yes,"def execute_command_8390894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    woman_patch = woman_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    man_patch = man_patches[0]
    sofa_patches = image_patch.find(""sofa"")
    # Question assumes only one sofa patch
    if len(sofa_patches) == 0:
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    sofa_patch = sofa_patches[0]
    if woman_patch.horizontal_center > man_patch.horizontal_center and sofa_patch.vertical_center < woman_patch.vertical_center:
        return ""yes""
    return ""no""",1
18896007,Which side of the image is the pot on?,right,./data/gqa/../images/2359495.jpg,right,"def execute_command_18896007(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes the image is the same as the original image
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
19323898,Is that pillow on a couch?,no,./data/gqa/../images/2372130.jpg,no,"def execute_command_19323898(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is that pillow on a couch?"")",1
1281034,Where are the trees?,in the background,./data/gqa/../images/2377817.jpg,hills,"def execute_command_1281034(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the location of the trees in the image
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Where are the trees?"")
    return tree_patches[0].simple_query(""Where are the trees?"")",0
13515147,What is on the cow?,flowers,./data/gqa/../images/2397982.jpg,chain,"def execute_command_13515147(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one cow
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        return image_patch.simple_query(""What is on the cow?"")
    cow_patch = cow_patches[0]
    return cow_patch.best_text_match([""flowers"", ""flowers with red petals"", ""flowers with yellow petals""])",0
91036716,What is the skater doing?,doing tricks,./data/gqa/../images/2408800.jpg,riding,"def execute_command_91036716(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one skater
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"")",0
17791510,What is the person to the left of the boy carrying?,bicycle,./data/gqa/../images/2344827.jpg,handbag,"def execute_command_17791510(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the left of the boy carrying?"")",0
13152020,Is the ground wet or dry?,dry,./data/gqa/../images/2404203.jpg,dry,"def execute_command_13152020(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ask directly because it is a predicate of a relational verb (is on top of)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ground wet or dry?"")",1
19312096,"On which side is the purse, the left or the right?",right,./data/gqa/../images/2336491.jpg,right,"def execute_command_19312096(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one purse
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    purse_patch = purse_patches[0]
    if purse_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
71002343,Are there breads in this photograph?,no,./data/gqa/../images/2386067.jpg,no,"def execute_command_71002343(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # -> str:
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bread""))",1
9113663,Do you see either any snow or sand that are white?,no,./data/gqa/../images/2416419.jpg,yes,"def execute_command_9113663(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note: assumes no other white patches
    image_patch = ImagePatch(image)
    is_snow = image_patch.exists(""snow"") and image_patch.simple_query(""Is the snow white?"") == ""yes""
    is_sand = image_patch.exists(""sand"") and image_patch.simple_query(""Is the sand white?"") == ""yes""
    return bool_to_yesno(is_snow or is_sand)",0
10243612,Which place is it?,zoo,./data/gqa/../images/2394575.jpg,pen,"def execute_command_10243612(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # could be a country, city, state, etc
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
555062,What vegetable is to the left of the napkin?,tomato,./data/gqa/../images/2368244.jpg,onion,"def execute_command_555062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"") # crop would include the napkin so keep it in the query",0
15599523,Is the dog on the right side?,yes,./data/gqa/../images/2345386.jpg,yes,"def execute_command_15599523(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on the right side), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the dog on the right side?"")",1
101019673,What is the man wearing?,sunglasses,./data/gqa/../images/2337631.jpg,hat,"def execute_command_101019673(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # what is the man wearing
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"")",0
333047,Do you see any men to the right of the orange tent?,no,./data/gqa/../images/2415736.jpg,no,"def execute_command_333047(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Do you see any men to the right of the orange tent?
    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(men_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    men_patch = men_patches[0]
    orange_tent_patches = image_patch.find(""orange tent"")
    # Question assumes only one orange tent patch
    if len(orange_tent_patches) == 0:
        return ""no""
    orange_tent_patch = orange_tent_patches[0]
    if men_patch.horizontal_center > orange_tent_patch.horizontal_center:
        return ""yes""
    return ""no""",1
13907796,Is the shirt striped and green?,no,./data/gqa/../images/2371222.jpg,no,"def execute_command_13907796(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # and green
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    shirt_patch = shirt_patches[0]
    is_striped = shirt_patch.simple_query(""Is the shirt striped?"") == ""yes""
    is_green = shirt_patch.simple_query(""Is the shirt green?"") == ""yes""
    return bool_to_yesno(is_striped and is_green)",1
17207604,Are there either bottles or shelves?,yes,./data/gqa/../images/2322049.jpg,yes,"def execute_command_17207604(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)",1
1890653,What vehicle is to the right of the train on the left of the photo?,bus,./data/gqa/../images/2372833.jpg,train car,"def execute_command_1890653(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")",0
7165131,Is that train engine small or large?,yes,./data/gqa/../images/2369857.jpg,large,"def execute_command_7165131(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one engine patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    train_patch = train_patches[0]
    train_engine_patches = train_patch.find(""train engine"")
    # Question assumes one train engine patch
    if len(train_engine_patches) == 0:
        return ""no""
    train_engine_patch = train_engine_patches[0]
    return bool_to_yesno(train_engine_patch.simple_query(""Is that train engine small or large?""))",0
21049362,Where are the railroad tracks?,in the station,./data/gqa/../images/2394610.jpg,station,"def execute_command_21049362(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a very general question, so return the answer to ""Where are the railroad tracks?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"") # crop would include the tracks so keep it in the query",0
6224352,What is the animal looking at?,computer,./data/gqa/../images/2360401.jpg,laptop,"def execute_command_6224352(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal looking at?"")
    animal_patch = animal_patches[0]
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return animal_patch.simple_query(""What is the animal looking at?"")",0
14367593,What are the children playing?,soccer,./data/gqa/../images/2333221.jpg,soccer,"def execute_command_14367593(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a list of strings
    image_patch = ImagePatch(image)
    children_patches = image_patch.find(""children"")
    # Question assumes only one children patch
    if len(children_patches) == 0:
        # If no children are found, query the image directly
        return image_patch.simple_query(""What are the children playing?"")
    return children_patches[0].simple_query(""What are the children playing?"") # crop would include the children so keep it in the query",1
598297,Are there combs or figurines in the picture?,no,./data/gqa/../images/2362150.jpg,no,"def execute_command_598297(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # type: ignore
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)",1
16409127,What is the wire on?,track,./data/gqa/../images/2397884.jpg,pole,"def execute_command_16409127(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly",0
5841062,Is the tunnel small or large?,large,./data/gqa/../images/2341512.jpg,large,"def execute_command_5841062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer
    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    # Question assumes only one tunnel patch
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    tunnel_patch = tunnel_patches[0]
    # assume the tunnel is small if its width is smaller than the image's width
    if tunnel_patch.width < image_patch.width:
        return ""small""
    else:
        return ""large""",1
17560468,Do you see trains or windows?,yes,./data/gqa/../images/2359451.jpg,yes,"def execute_command_17560468(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""train"") or image_patch.exists(""window""))",1
9321809,What is the person near the man wearing?,a shirt,./data/gqa/../images/2388923.jpg,hat,"def execute_command_9321809(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is a relation verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person near the man wearing?"")",0
12352375,Is the vehicle that is sitting down black or blue?,black,./data/gqa/../images/2361646.jpg,black,"def execute_command_12352375(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # vehicle is sitting down so crop would include the sitting down so keep it in the query
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    vehicle_patch = vehicle_patches[0]
    color_patches = image_patch.find(""color"")
    # Question assumes only one color patch
    if len(color_patches) == 0:
        return ""no""
    color_patch = color_patches[0]
    return color_patch.best_text_match([""black"", ""blue""]) # crop would include the color so keep it in the query",1
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?,"Error Codigo: invalid syntax (Codex, line 26)",./data/gqa/../images/2348437.jpg,left,"def execute_command_7949280(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a very complicated query
    image_patch = ImagePatch(image)
    metal_trash_can_patches = image_patch.find(""metal trash can"")
    # Question assumes only one metal trash can patch
    if len(metal_trash_can_patches) == 0:
        # If no metal trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    metal_trash_can_patch = metal_trash_can_patches[0]
    white_thing_patches = image_patch.find(""white thing near shower curtain"")
    # Question assumes only one white thing patch
    if len(white_thing_patches) == 0:
        return ""no""
    white_thing_patch = white_thing_patches[0]
    # the shower curtain is near the white thing
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        return ""no""
    shower_curtain_patch = shower_curtain_patches[0]
    # find the horizontal center of the white thing and the shower curtain
    white_thing_center = white_thing_patch.horizontal_center
    shower_curtain_center = shower_curtain_patch.horizontal_center
    if metal_trash_can_patch.horizontal_center < white_thing_center and metal_trash_can_patch.horizontal_center < shower_curtain_center:
        return ""left""
    elif",0
5800248,Is it outdoors?,yes,./data/gqa/../images/150517.jpg,no,"def execute_command_5800248(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes image is 3D
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""outdoor"", ""outdoor"")) # assumes image is 3D",0
4604785,Does the pizza slice to the left of the pizza have large size?,Error Ejecucion: ImagePatch has no area,./data/gqa/../images/2344801.jpg,yes,"def execute_command_4604785(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ImagePatch
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    pizza_patch = pizza_patches[0]
    left_pizza_patch = pizza_patch.crop(pizza_patch.left - 1, pizza_patch.lower, pizza_patch.left, pizza_patch.upper)
    is_large = left_pizza_patch.simple_query(""Does the pizza have large size?"")
    return bool_to_yesno(is_large)",0
15185845,What's the man wearing?,suit,./data/gqa/../images/2348528.jpg,hat,"def execute_command_15185845(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Not needed
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")",0
2282232,Where is the snow?,in the mountains,./data/gqa/../images/2394560.jpg,hillside,"def execute_command_2282232(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # snow is an object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"")",0
7889197,Who is wearing a shirt?,man,./data/gqa/../images/2329334.jpg,man,"def execute_command_7889197(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shirt is not a predicate, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")",1
11292587,Are there either any blankets or pictures in the photograph?,yes,./data/gqa/../images/2391808.jpg,no,"def execute_command_11292587(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a numpy array
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)",0
154682,Where does the bird stand on?,the ground,./data/gqa/../images/2357415.jpg,ground,"def execute_command_154682(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where does the bird stand on?"")",1
10435315,Is the man holding a racket?,no,./data/gqa/../images/2407451.jpg,no,"def execute_command_10435315(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # rackets is a plural noun
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    racket_patch = racket_patches[0]
    if man_patch.horizontal_center > racket_patch.horizontal_center:
        return ""yes""
    return ""no""",1
121035887,Do the man shorts have white color?,yes,./data/gqa/../images/2366019.jpg,yes,"def execute_command_121035887(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man shorts"", ""white""))",1
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?,"Error Codigo: expected ':' (Codex, line 25)",./data/gqa/../images/2349511.jpg,van,"def execute_command_10770422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the man is to the left of the cows
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    cow_patch = cow_patches[0]
    if man_patch.horizontal_center > cow_patch.horizontal_center:
        # if the man is to the right of the cows, query directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.horizontal_center < man_patch.horizontal_center",0
19659501,What is the color of the umbrella the bird is on?,orange,./data/gqa/../images/2406733.jpg,light brown,"def execute_command_19659501(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # color of umbrella
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")",0
10595217,Where is the grass?,bottom,./data/gqa/../images/2404396.jpg,yard,"def execute_command_10595217(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one grass patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    if len(grass_patches) == 0:
        return image_patch.simple_query(""Where is the grass?"")
    grass_patch = grass_patches[0]
    if grass_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",0
14803743,Which kind of clothing is black?,leggings,./data/gqa/../images/2318376.jpg,pants,"def execute_command_14803743(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        return image_patch.simple_query(""Which kind of clothing is black?"")
    clothing_patch = clothing_patches[0]
    return clothing_patch.simple_query(""Which kind of clothing is black?"")",0
19743238,Is the man on the right side?,no,./data/gqa/../images/1592305.jpg,no,"def execute_command_19743238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no relation, so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
3965204,Are the mountains covered with snow?,yes,./data/gqa/../images/2386293.jpg,yes,"def execute_command_3965204(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""mountains"", ""snow""))",1
141024710,Are there both windows and cars in the picture?,no,./data/gqa/../images/2363539.jpg,yes,"def execute_command_141024710(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)",0
6481635,What color do you think the shirt is?,red,./data/gqa/../images/2406865.jpg,orange,"def execute_command_6481635(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # and what color is the shirt?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the shirt is?"")",0
3623367,What's he doing?,reading,./data/gqa/../images/2407473.jpg,lying,"def execute_command_3623367(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What's he doing?"")
    person_patch = person_patches[0]
    action_patches = image_patch.find(""action"")
    # Question assumes only one action patch
    if len(action_patches) == 0:
        return ""unknown""
    action_patch = action_patches[0]
    return action_patch.best_text_match([""eating"", ""drinking"", ""reading"", ""talking"", ""laughing"", ""smiling"", ""writing""]) # assumes one action patch",0
15634950,Where is the giraffe in front of the hay eating from?,table,./data/gqa/../images/2394254.jpg,tree,"def execute_command_15634950(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is a more complex query
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    for giraffe_patch in giraffe_patches:
        hay_patches = image_patch.find(""hay"")
        # Question assumes only one hay patch
        if len(hay_patches) == 0:
            return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
        hay_patch = hay_patches[0]
        eating_patches = image_patch.find(""eating"")
        # Question assumes only one eating patch
        if len(eating_patches) == 0:
            return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
        eating_patch = eating_patches[0]
        if (giraffe_patch.horizontal_center < hay_patch.horizontal_center) and (giraffe_patch.horizontal_center < eating_patch.horizontal_center):
            return ""in front of the hay""
        elif (giraffe_patch.horizontal_center < hay_patch.horizontal_center) and (giraffe_patch.horizontal_center > eating_patch.horizontal_center):
            return ""to the right of the hay""
        else:
            return ""behind the hay""",0
16644500,What animal is the log pulled by?,elephant,./data/gqa/../images/2368283.jpg,elephants,"def execute_command_16644500(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # a relation so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the log pulled by?"")",0
3202108,Which side is the car on?,right,./data/gqa/../images/2412878.jpg,right,"def execute_command_3202108(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
10137201,Are the papers in the bottom part of the picture?,no,./data/gqa/../images/2335027.jpg,no,"def execute_command_10137201(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # has a relation (in the bottom part of the picture), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")",1
5325670,Is the boy to the left or to the right of the person that is on the left?,right,./data/gqa/../images/2378586.jpg,right,"def execute_command_5325670(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")",1
8438091,The picture is what color?,black and white,./data/gqa/../images/2406323.jpg,white,"def execute_command_8438091(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # a relation of color
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""The picture is what color?"")",0
4325939,On which side of the photo is the banana?,left,./data/gqa/../images/2326465.jpg,left,"def execute_command_4325939(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left, right, top, bottom
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    banana_patch = banana_patches[0]
    if banana_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif banana_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        if banana_patch.vertical_center < image_patch.vertical_center:
            return ""bottom""
        else:
            return ""top""",1
1425189,What is the name of the brown piece of furniture?,table,./data/gqa/../images/2404639.jpg,table,"def execute_command_1425189(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not tested
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture brown?"") == ""yes"":
            return furniture_patch.simple_query(""What is the name of the brown piece of furniture?"") # crop would include the brown so keep it in the query
    # If no brown furniture is found, query the image directly
    return image_patch.simple_query(""What is the name of the brown piece of furniture?"")",1
5119962,Is the man to the right of glasses?,no,./data/gqa/../images/2407415.jpg,no,"def execute_command_5119962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # glasses is a type of object
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center > man_patch.horizontal_center:
        return ""yes""
    return ""no""",1
16523418,Is the toilet lid down or up?,down,./data/gqa/../images/2320085.jpg,up,"def execute_command_16523418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the question assumes a single toilet
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    for toilet_patch in toilet_patches:
        lid_down = toilet_patch.simple_query(""Is the toilet lid down?"")
        if lid_down == ""yes"":
            return ""down""
        else:
            return ""up""",0
6522554,Which kind of device does the man hold?,phone,./data/gqa/../images/2374402.jpg,cell phone,"def execute_command_6522554(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one device
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    device_patch = device_patches[0]
    # assume device is on the man's hand
    return device_patch.best_text_match([""phone"", ""laptop"", ""watch""])",0
870619,What is the device to the left of the person that is to the left of the television?,no,./data/gqa/../images/2370929.jpg,screen,"def execute_command_870619(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a chain of relations
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    person_patch = person_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    for device_patch in device_patches:
        if device_patch.horizontal_center > person_patch.horizontal_center:
            tv_patches = image_patch.find(""television"")
            # Question assumes only one TV patch
            if len(tv_patches) == 0:
                return ""no""
            for tv_patch in tv_patches:
                if tv_patch.horizontal_center > device_patch.horizontal_center:
                    return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    return ""no""",0
12713794,Does the woman to the left of the man wear a necklace?,yes,./data/gqa/../images/2403230.jpg,yes,"def execute_command_12713794(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patches[0].horizontal_center:
        return bool_to_yesno(woman_patch.verify_property(""woman"", ""necklace""))
    return ""no""",1
824070,What is the man doing?,talking,./data/gqa/../images/2399195.jpg,talking,"def execute_command_824070(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"")",1
11593733,Which kind of furniture is right to the pillow?,table,./data/gqa/../images/2347710.jpg,bed,"def execute_command_11593733(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this one has a relation
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    for pillow_patch in pillow_patches:
        furniture_patches = image_patch.find(""furniture"")
        # Question assumes only one furniture patch
        if len(furniture_patches) == 0:
            return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
                return furniture_patch.best_text_match([""chair"", ""table"", ""sofa""])
    # If no furniture is right to the pillow, query the image directly
    return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")",0
3357821,Does the dog to the left of the other dog look small or large?,small,./data/gqa/../images/2380239.jpg,small,"def execute_command_3357821(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the other dog, so ask directly
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If no two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog_patch = dog_patches[0]
    right_dog_patch = dog_patches[1]
    if left_dog_patch.horizontal_center < right_dog_patch.horizontal_center:
        return left_dog_patch.simple_query(""Does the dog look small or large?"")
    else:
        return right_dog_patch.simple_query(""Does the dog look small or large?"")",1
338026,Are the white candles short or tall?,short,./data/gqa/../images/2369595.jpg,tall,"def execute_command_338026(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # candle color is in the query
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    if candle_patches[0].height < image_patch.height / 2:
        return ""short""
    else:
        return ""tall""",0
15346232,What kind of fruit is the girl holding?,banana,./data/gqa/../images/2345601.jpg,banana,"def execute_command_15346232(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (holding) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is the girl holding?"")",1
13553098,"On which side of the photo is the yellow vehicle, the right or the left?",right,./data/gqa/../images/2327453.jpg,right,"def execute_command_13553098(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is the same as the above example
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        if yellow_vehicle_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
    return ""left""",1
81030271,Is the gray car to the right or to the left of the cart?,left,./data/gqa/../images/713056.jpg,left,"def execute_command_81030271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming one cart and one car
    image_patch = ImagePatch(image)
    cart_patches = image_patch.find(""cart"")
    # Question assumes only one cart patch
    if len(cart_patches) == 0:
        # If no cart is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    cart_patch = cart_patches[0]
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        return ""no""
    gray_car_patch = gray_car_patches[0]
    if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?,kettle,./data/gqa/../images/2321180.jpg,kettle,"def execute_command_1827581(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is not used in this function
    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        # If no cooking utensil is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    cooking_utensil_patch = cooking_utensil_patches[0]
    canister_patches = image_patch.find(""canister made of chrome"")
    # Question assumes only one canister patch
    if len(canister_patches) == 0:
        return ""no""
    canister_patch = canister_patches[0]
    if cooking_utensil_patch.horizontal_center > canister_patch.horizontal_center:
        return cooking_utensil_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"") # crop would include the canister so keep it in the query
    return ""no""",1
8240699,What animal is in front of the bird?,elephant,./data/gqa/../images/2331215.jpg,elephant,"def execute_command_8240699(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one bird patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the bird?"")
    bird_patch = bird_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > bird_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in front of the bird?"") # crop would include the bird so keep it in the query
    # If no animal is in front of the bird, query the image directly
    return image_patch.simple_query(""What animal is in front of the bird?"")",1
10105081,Is the fence white or green?,white,./data/gqa/../images/2375234.jpg,white,"def execute_command_10105081(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no relation, no assumption
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].best_text_match([""white"", ""green""]) # crop would include the fence so keep it in the query",1
13613689,Is there a train or a fence in the picture?,yes,./data/gqa/../images/1592228.jpg,yes,"def execute_command_13613689(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming the image is a photo
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)",1
10662521,What is the bottle made of?,plastic,./data/gqa/../images/2316905.jpg,plastic,"def execute_command_10662521(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bottle made of?"")",1
1152309,Which kind of fruit is on the plate?,orange,./data/gqa/../images/2376542.jpg,orange,"def execute_command_1152309(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs the plate in the query
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    return fruit_patches[0].best_text_match([""apple"", ""banana"", ""orange""]) # crop would include the plate so keep it in the query",1
16701575,What device is to the right of the cake?,television,./data/gqa/../images/2357683.jpg,cell phone,"def execute_command_16701575(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Not the best name, but it works
    image_patch = ImagePatch(image)
    cake_patches = image_patch.find(""cake"")
    # Question assumes one cake patch
    if len(cake_patches) == 0:
        # If no cake is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    for cake_patch in cake_patches:
        device_patches = image_patch.find(""device"")
        # Question assumes one device patch
        if len(device_patches) == 0:
            return image_patch.simple_query(""What device is to the right of the cake?"")
        device_patch = device_patches[0]
        if device_patch.horizontal_center > cake_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the right of the cake?"")
    return image_patch.simple_query(""What device is to the right of the cake?"")",0
6572516,What material is the ceiling?,glass,./data/gqa/../images/2388570.jpg,glass,"def execute_command_6572516(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one ceiling patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")",1
11213633,Are there both magazines and umbrellas?,no,./data/gqa/../images/2326769.jpg,no,"def execute_command_11213633(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note: this function is incomplete
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella) # note: this line is incomplete",1
8606777,What is the color of the egg in the middle of the picture?,yellow,./data/gqa/../images/2391115.jpg,yellow,"def execute_command_8606777(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this one is very tricky
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    egg_patch = egg_patches[0]
    egg_center_x = egg_patch.horizontal_center
    egg_center_y = egg_patch.vertical_center
    if egg_center_x < image_patch.horizontal_center:
        # egg is to the left of the center
        return egg_patch.simple_query(""What is the color of the egg to the left of the center?"")
    elif egg_center_x > image_patch.horizontal_center:
        # egg is to the right of the center
        return egg_patch.simple_query(""What is the color of the egg to the right of the center?"")
    else:
        # egg is at the center
        return egg_patch.simple_query(""What is the color of the egg at the center?"")",1
14371534,Are the gold pans on the right part or on the left?,right,./data/gqa/../images/2355898.jpg,right,"def execute_command_14371534(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 #TODO: can we make it more efficient?
    image_patch = ImagePatch(image)
    gold_pans_patches = image_patch.find(""gold pans"")
    # Question assumes only one gold pans patch
    if len(gold_pans_patches) == 0:
        # If no gold pans are found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    gold_pans_patch = gold_pans_patches[0]
    left_pans = []
    right_pans = []
    for patch in image_patch.find(""pan""):
        if patch.horizontal_center < gold_pans_patch.horizontal_center:
            left_pans.append(patch)
        else:
            right_pans.append(patch)
    if len(left_pans) == 0:
        return ""right""
    if len(right_pans) == 0:
        return ""left""
    return ""left"" if gold_pans_patch.horizontal_center > gold_pans_patch.horizontal_center else ""right""",1
16538076,What does the man that is not tall wear?,shirt,./data/gqa/../images/2412554.jpg,shirt,"def execute_command_16538076(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not sure if it's the man who is not tall or the man that is not tall
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if not man_patch.verify_property(""man"", ""tall""):
            return man_patch.simple_query(""What does the man that is not tall wear?"")
    # If no man is not tall, query the image directly
    return image_patch.simple_query(""What does the man that is not tall wear?"")",1
5483644,"On which side is the woman, the left or the right?",right,./data/gqa/../images/2350119.jpg,right,"def execute_command_5483644(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # unused
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
181041779,What is the animal in this photograph?,cat,./data/gqa/../images/2367010.jpg,cat,"def execute_command_181041779(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is the default query
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal in this photograph?"")
    return animal_patches[0].simple_query(""What is the animal in this photograph?"")",1
1290926,Are there either any life vests or flags?,no,./data/gqa/../images/2408133.jpg,no,"def execute_command_1290926(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is the query asking about the presence of an object or a property of an object?
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)",1
18273738,Do you see a cup?,yes,./data/gqa/../images/2360431.jpg,yes,"def execute_command_18273738(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cup""))",1
4211922,Who is sitting on the table?,people,./data/gqa/../images/2356402.jpg,man,"def execute_command_4211922(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this query is not possible
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is sitting on the table?"") # this query is not possible",0
6587526,What is the color of the girl to the left of the other girl?,yellow,./data/gqa/../images/23.jpg,brunette,"def execute_command_6587526(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # girl to the left is the first girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only two girl patches
    if len(girl_patches) < 2:
        # If not two girls are found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    left_girl_patch = girl_patches[0]
    right_girl_patch = girl_patches[1]
    if left_girl_patch.horizontal_center > right_girl_patch.horizontal_center:
        left_girl_patch, right_girl_patch = right_girl_patch, left_girl_patch
    return left_girl_patch.simple_query(""What is the color of the girl to the left of the other girl?"")",0
6599090,What is the person to the right of the car holding?,tennis racket,./data/gqa/../images/2325132.jpg,racket,"def execute_command_6599090(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the right of the car holding?"")",0
1174895,What is the vehicle in the parking lot?,car,./data/gqa/../images/2414806.jpg,truck,"def execute_command_1174895(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note that this is a very broad question, and the answer might not be in the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle in the parking lot?"")",0
14755158,Who is the woman in front of?,the bride,./data/gqa/../images/2317677.jpg,child,"def execute_command_14755158(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not implemented
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is the woman in front of?"") # not implemented",0
18349161,Where does the cow that is standing stand?,in the middle,./data/gqa/../images/2339240.jpg,ground,"def execute_command_18349161(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one cow
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    cow_patch = cow_patches[0]
    if cow_patch.verify_property(""cow"", ""standing""):
        return cow_patch.simple_query(""Where does the cow that is standing stand?"")
    return image_patch.simple_query(""Where does the cow that is standing stand?"") # query the image directly if the cow is not standing",0
7472884,On which side is the tap?,left,./data/gqa/../images/2341053.jpg,left,"def execute_command_7472884(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume only one tap
    image_patch = ImagePatch(image)
    tap_patch = image_patch.find(""tap"")[0]
    return ""left"" if tap_patch.horizontal_center < image_patch.horizontal_center else ""right""",1
111051831,On which side of the image is the cabinet?,left,./data/gqa/../images/2413467.jpg,left,"def execute_command_111051831(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes the image is in the middle of the screen
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    if cabinet_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
3590007,On which side of the image is the fork?,left,./data/gqa/../images/1591898.jpg,left,"def execute_command_3590007(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes the image is a 2D array (width, height, channels)
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
2409726,Do you see men to the right of the bag the person is carrying?,no,./data/gqa/../images/2409472.jpg,no,"def execute_command_2409726(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return bool_to_yesno(image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"") == ""yes"")",1
577862,Are the artwork and the computer desk made of the same material?,no,./data/gqa/../images/2405119.jpg,no,"def execute_command_577862(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # material is not an attribute of an object, so not a relational verb
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    artwork_patch = artwork_patches[0]
    computer_desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one computer desk patch
    if len(computer_desk_patches) == 0:
        return ""no""
    computer_desk_patch = computer_desk_patches[0]
    return bool_to_yesno(artwork_patch.verify_property(""artwork"", ""material"") == computer_desk_patch.verify_property(""computer desk"", ""material""))",1
14298125,Who is playing Wii?,two men,./data/gqa/../images/2369899.jpg,guy,"def execute_command_14298125(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # does not need to be in the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")",0
9382689,What's the floor made of?,wood,./data/gqa/../images/2322855.jpg,wood,"def execute_command_9382689(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 #, prefix=""""):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the floor made of?"") #, prefix=prefix) # remove prefix",1
12889614,Who is wearing the dress?,woman,./data/gqa/../images/2397488.jpg,woman,"def execute_command_12889614(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # who
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is wearing the dress?"")",1
15127108,Does the tea pot above the receipt look short and white?,no,./data/gqa/../images/2390938.jpg,no,"def execute_command_15127108(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # tea pot and receipt are assumed to be found
    image_patch = ImagePatch(image)
    tea_pot_patch = image_patch.find(""tea pot"")[0]
    receipt_patch = image_patch.find(""receipt"")[0]
    if tea_pot_patch.vertical_center < receipt_patch.vertical_center:
        return bool_to_yesno(tea_pot_patch.verify_property(""tea pot"", ""short and white""))
    else:
        return ""no""",1
15632653,Which room is it?,office,./data/gqa/../images/2351404.jpg,office,"def execute_command_15632653(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is a very basic example and could be improved with more specific questions
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
485962,Which kind of clothing is black?,black,./data/gqa/../images/2331832.jpg,pants,"def execute_command_485962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This function does not work
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return clothing_patches[0].best_text_match([""black"", ""white""]) # This line does not work",0
490992,Is the fence on the left side or on the right of the picture?,center,./data/gqa/../images/2395.jpg,left,"def execute_command_490992(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.left < image_patch.left:
        return ""left""
    elif fence_patch.right > image_patch.right:
        return ""right""
    else:
        return ""center""",0
17133284,Do the mountains look rocky?,no,./data/gqa/../images/2347513.jpg,yes,"def execute_command_17133284(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # rocky
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""mountains"", ""rocky""))",0
17573742,Is the woman to the right of the camera wearing a coat?,yes,./data/gqa/../images/2392625.jpg,yes,"def execute_command_17573742(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes camera is always on the left
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center > image_patch.horizontal_center:
            return bool_to_yesno(woman_patch.verify_property(""woman"", ""coat""))
    return ""no""",1
3395780,Is the vehicle to the left of the parking meter covered in rain?,yes,./data/gqa/../images/2402775.jpg,yes,"def execute_command_3395780(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle and one parking meter
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    parking_meter_patches = image_patch.find(""parking meter"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0 or len(parking_meter_patches) == 0:
        # If no vehicle or no parking meter is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    vehicle_patch = vehicle_patches[0]
    parking_meter_patch = parking_meter_patches[0]
    if vehicle_patch.horizontal_center < parking_meter_patch.horizontal_center:
        return bool_to_yesno(image_patch.verify_property(""vehicle"", ""rain""))
    else:
        return ""no"" # not to the left",1
1542668,Is there a black laptop or desk?,no,./data/gqa/../images/2318905.jpg,yes,"def execute_command_1542668(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming the image is a screenshot
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Is there a black laptop or desk?"")
    is_black_laptop = (laptop_patches[0].simple_query(""Is the laptop black?"") == ""yes"")
    if is_black_laptop:
        return ""laptop""
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        return ""no""
    is_black_desk = (desk_patches[0].simple_query(""Is the desk black?"") == ""yes"")
    if is_black_desk:
        return ""desk""
    return ""no""",0
1655442,What type of food is to the right of the waffles that are to the right of the person?,bacon,./data/gqa/../images/2410436.jpg,egg,"def execute_command_1655442(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # waffles are to the right of the person
    image_patch = ImagePatch(image)
    waffles_patches = image_patch.find(""waffles"")
    # Question assumes only one waffles patch
    if len(waffles_patches) == 0:
        # If no waffles are found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    waffles_patch = waffles_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    person_patch = person_patches[0]
    if waffles_patch.horizontal_center > person_patch.horizontal_center:
        food_patches = image_patch.find(""food"")
        # Question assumes only one food patch
        if len(food_patches) == 0:
            # If no food is found, query the image directly
            return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
        return food_patches[0].simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    return ""no""",0
395290,How large is the bag?,large,./data/gqa/../images/2368361.jpg,large,"def execute_command_395290(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"")",1
16138893,Are there both motorcycles and cars in this scene?,no,./data/gqa/../images/2342301.jpg,yes,"def execute_command_16138893(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # changed from execute_command_3
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)",0
1462176,Who is wearing shorts?,the man,./data/gqa/../images/2323323.jpg,man,"def execute_command_1462176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # find the person and then the person's clothing
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    person_patch = person_patches[0]
    clothing_patches = person_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        return ""no""
    clothing_patch = clothing_patches[0]
    return clothing_patch.simple_query(""Who is wearing shorts?"") # crop would include the clothing so keep it in the query",1
171032184,What hangs from the windows?,curtains,./data/gqa/../images/2377805.jpg,curtains,"def execute_command_171032184(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: Is there a way to make this query more efficient?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"")",1
15962394,Are there both spoons and plates in the image?,yes,./data/gqa/../images/2337344.jpg,yes,"def execute_command_15962394(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: needs a more robust solution
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)",1
16184773,What is in front of the giraffe that the tree is behind of?,no,./data/gqa/../images/2356100.jpg,bush,"def execute_command_16184773(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to be a relational verb
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    giraffe_patch = giraffe_patches[0]
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        return ""no""
    tree_patch = tree_patches[0]
    if tree_patch.horizontal_center > giraffe_patch.horizontal_center:
        return ""no""
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")",0
8197176,What color is the jacket that the man wears?,red,./data/gqa/../images/2384012.jpg,red,"def execute_command_8197176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # to fix
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return ""no""
    jacket_patch = jacket_patches[0]
    return jacket_patch.best_text_match([""red"", ""blue"", ""green"", ""white"", ""black"", ""yellow"", ""orange"", ""purple""])",1
3440931,What are that pieces of furniture called?,cabinets,./data/gqa/../images/2365148.jpg,shelves,"def execute_command_3440931(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # return the answer to the question
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What are those pieces of furniture called?"")",0
337924,What is the fruit that is to the left of the chair?,apple,./data/gqa/../images/2369595.jpg,cherry,"def execute_command_337924(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # fruit is not a relation so go step by step
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")
    for fruit_patch in fruit_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if chair_patch.horizontal_center > fruit_patch.horizontal_center:
                return fruit_patch.best_text_match([""apple"", ""banana"", ""orange""])
    # If no fruit is to the left of the chair, pick the first fruit
    return fruit_patches[0].best_text_match([""apple"", ""banana"", ""orange""])",0
16208211,What do you think are the bowls on?,microwave,./data/gqa/../images/2338510.jpg,microwave,"def execute_command_16208211(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes a single bowl
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    return bowl_patches[0].simple_query(""What do you think are the bowls on?"")",1
18330260,Is the sky above the trees open and clear?,yes,./data/gqa/../images/2392331.jpg,yes,"def execute_command_18330260(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume one sky patch and one tree patch
    image_patch = ImagePatch(image)
    sky_patch = image_patch.find(""sky"")[0]
    tree_patch = image_patch.find(""tree"")[0]
    is_open_and_clear = sky_patch.simple_query(""Is the sky open and clear?"") == ""yes""
    if is_open_and_clear:
        return ""yes""
    else:
        return ""no""",1
14119691,Does the squirrel to the right of the stuffed dog look white?,yes,./data/gqa/../images/2334270.jpg,no,"def execute_command_14119691(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Does the squirrel to the right of the stuffed dog look white?
    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    # Question assumes only one squirrel patch
    if len(squirrel_patches) == 0:
        # If no squirrel is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for squirrel_patch in squirrel_patches:
        dog_patches = image_patch.find(""dog"")
        # Question assumes only one dog patch
        if len(dog_patches) == 0:
            return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
        for dog_patch in dog_patches:
            if dog_patch.horizontal_center > squirrel_patch.horizontal_center:
                return bool_to_yesno(squirrel_patch.simple_query(""Does the squirrel look white?""))
    return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"") # If no squirrel is to the right of the dog, query the image directly",0
18437694,Does the clock to the right of the statue have gold color and tiny size?,no,./data/gqa/../images/2380137.jpg,no,"def execute_command_18437694(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not tested
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        return ""no""
    clock_patch = clock_patches[0]
    return bool_to_yesno(clock_patch.verify_property(""clock"", ""gold"") and clock_patch.simple_query(""Is the clock tiny?"") == ""yes"")",1
1252960,Where was the photo taken?,in the woods,./data/gqa/../images/2417745.jpg,pavement,"def execute_command_1252960(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not sure if this works
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"") # not sure if this works",0
17454895,Is there a frisbee on the grass?,yes,./data/gqa/../images/2403570.jpg,yes,"def execute_command_17454895(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # checks if there is a frisbee on the grass
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is there a frisbee on the grass?"")
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        return ""no""
    for grass_patch in grass_patches:
        if grass_patch.horizontal_center > frisbee_patches[0].horizontal_center:
            return ""yes""
    return ""no""",1
13180513,Are there either cakes or containers in the photo?,yes,./data/gqa/../images/2320293.jpg,no,"def execute_command_13180513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not used
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)",0
479962,Are there black cars or motorcycles?,yes,./data/gqa/../images/2401325.jpg,yes,"def execute_command_479962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)",1
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?,in front of,./data/gqa/../images/2382358.jpg,behind,"def execute_command_19927240(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # to the left of the police officer
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    for blue_car_patch in blue_car_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            police_officer_patches = image_patch.find(""police officer"")
            for police_officer_patch in police_officer_patches:
                if police_officer_patch.horizontal_center > vehicle_patch.horizontal_center:
                    if blue_car_patch.horizontal_center > vehicle_patch.horizontal_center:
                        return ""behind""
                    else:
                        return ""in front of""
    return ""no""",0
5785831,What is in the glass?,soup,./data/gqa/../images/2346644.jpg,straw,"def execute_command_5785831(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (in) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the glass?"") # crop would include the glass so keep it in the query",0
19246241,Are there any brown benches or buckets?,no,./data/gqa/../images/2363085.jpg,yes,"def execute_command_19246241(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a boolean
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_brown_bucket = image_patch.exists(""brown bucket"")
    return bool_to_yesno(is_brown_bench or is_brown_bucket)",0
3243803,"Where in the picture is the spoon, on the right or on the left?",right,./data/gqa/../images/2393253.jpg,right,"def execute_command_3243803(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one spoon patch
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
6952486,Does the shirt look white?,yes,./data/gqa/../images/2416057.jpg,yes,"def execute_command_6952486(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note: this is not the correct function, it should ask about the shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))",1
17401425,Is there a bag that is not brown?,yes,./data/gqa/../images/2353264.jpg,no,"def execute_command_17401425(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bag is a noun so go step by step
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        is_not_brown = (bag_patch.simple_query(""Is the bag not brown?"") == ""yes"")
        if is_not_brown:
            return bag_patch.simple_query(""Is there a bag that is not brown?"")
    # If no bag is not brown, pick the first bag
    return bag_patches[0].simple_query(""Is there a bag that is not brown?"")",0
481240,"Which kind of furniture is large, the shelf or the cupboard?",cupboard,./data/gqa/../images/2347977.jpg,cupboard,"def execute_command_481240(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This function should return the name of the furniture that is large
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    # Question assumes only one shelf patch and one cupboard patch
    if len(shelf_patches) == 0 or len(cupboard_patches) == 0:
        # If either shelf or cupboard is not found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    if shelf_patches[0].verify_property(""shelf"", ""large""):
        return ""shelf""
    elif cupboard_patches[0].verify_property(""cupboard"", ""large""):
        return ""cupboard""
    else:
        return ""neither"" # This would be the case if neither shelf nor cupboard is large",1
8531943,Are there any screens or bags?,yes,./data/gqa/../images/2327666.jpg,no,"def execute_command_8531943(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)",0
1969545,What is she wearing?,wetsuit,./data/gqa/../images/2408009.jpg,wetsuit,"def execute_command_1969545(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is she wearing?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""What is she wearing?"") # crop would include the woman so keep it in the query",1
91045271,"Which appliance is not white, the freezer or the ice maker?",ice maker,./data/gqa/../images/2322424.jpg,ice maker,"def execute_command_91045271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Appliance is a super class of the two options
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    appliance_patch = appliance_patches[0]
    is_freezer = appliance_patch.simple_query(""Is the appliance a freezer?"")
    if is_freezer:
        return ""ice maker""
    else:
        return ""freezer""",1
1051870,Are there chairs or tables that are not green?,no,./data/gqa/../images/2348897.jpg,no,"def execute_command_1051870(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not green is a property
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    return bool_to_yesno(is_chair or is_table) and bool_to_yesno(not image_patch.verify_property(""chair"", ""green"") or not image_patch.verify_property(""table"", ""green"")) # verify property is a function",1
1366363,Does the taxi have a different color than the truck?,no,./data/gqa/../images/2349328.jpg,no,"def execute_command_1366363(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming taxi and truck are the same color
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    taxi_color = taxi_patches[0].simple_query(""What is the color of the taxi?"")
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        return ""no""
    truck_color = truck_patches[0].simple_query(""What is the color of the truck?"")
    return bool_to_yesno(taxi_color != truck_color)",1
5460839,In which part of the image is the dog?,front,./data/gqa/../images/713369.jpg,left,"def execute_command_5460839(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the dog so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the image is the dog?"") # crop would include the dog so keep it in the query",0
18899476,What type of vegetable is to the right of the rice that is on the plate?,broccoli,./data/gqa/../images/2404623.jpg,olive,"def execute_command_18899476(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: improve this query
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"") # TODO: improve this query",0
8606903,What food item is not wide?,sandwich,./data/gqa/../images/2391115.jpg,egg,"def execute_command_8606903(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one food item patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food item"")
    if len(food_patches) == 0:
        # If no food item is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food item"", ""wide""):
            return food_patch.simple_query(""What food item is not wide?"")
    # If no food item is not wide, query the image directly
    return image_patch.simple_query(""What food item is not wide?"")",0
18394861,Are there any folding chairs or skateboards?,no,./data/gqa/../images/2351386.jpg,no,"def execute_command_18394861(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Returns a string
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)",1
2327600,Is there an elephant near the pond?,yes,./data/gqa/../images/2392698.jpg,no,"def execute_command_2327600(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Note: the image must be a binary image for this to work
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Is there an elephant near the pond?"")
    elephant_patch = elephant_patches[0]
    pond_patches = image_patch.find(""pond"")
    # Question assumes only one pond patch
    if len(pond_patches) == 0:
        return ""no""
    pond_patch = pond_patches[0]
    return bool_to_yesno(abs(elephant_patch.horizontal_center - pond_patch.horizontal_center) < 50)",0
1575941,Which place is it?,a river,./data/gqa/../images/2340292.jpg,river,"def execute_command_1575941(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # The place is in the query, so the query is different from the question
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # The place is in the query, so the query is different from the question",1
9725865,What is the color of the floor that the desk is on top of?,blue,./data/gqa/../images/1526.jpg,blue,"def execute_command_9725865(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")",1
16654241,Is the TV on the left or on the right?,right,./data/gqa/../images/2360482.jpg,left,"def execute_command_16654241(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # does not use the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the TV on the left or on the right?"")",0
18685233,Which kind of vehicle is to the left of the flags?,car,./data/gqa/../images/2340467.jpg,cars,"def execute_command_18685233(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    vehicle_patch = vehicle_patches[0]
    flags_patches = image_patch.find(""flags"")
    # Question assumes only one flags patch
    if len(flags_patches) == 0:
        return ""no""
    flags_patch = flags_patches[0]
    if vehicle_patch.horizontal_center < flags_patch.horizontal_center:
        return vehicle_patch.best_text_match([""car"", ""bus"", ""truck""])
    return ""no""",0
9796068,Are there both a fence and a sheep in the picture?,no,./data/gqa/../images/2377949.jpg,no,"def execute_command_9796068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # should be bool_to_yesno
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)",1
181002473,Do you see any blue blanket or towel?,no,./data/gqa/../images/2397824.jpg,no,"def execute_command_181002473(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the function name is the question
    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue"")
    # Question assumes only one blue patch
    if len(blue_patches) == 0:
        # If no blue is found, query the image directly
        return image_patch.simple_query(""Do you see any blue blanket or towel?"")
    for patch in blue_patches:
        if patch.simple_query(""Is the object a blanket or towel?"") == ""yes"":
            return ""yes""
    return ""no""",1
1110330,Is the pillow to the left of the frog cream colored or green?,green,./data/gqa/../images/498281.jpg,green,"def execute_command_1110330(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # do not call simple_query() here, we want to know the color
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    for pillow_patch in pillow_patches:
        frog_patches = image_patch.find(""frog"")
        for frog_patch in frog_patches:
            if frog_patch.horizontal_center > pillow_patch.horizontal_center:
                return pillow_patch.best_text_match([""cream colored"", ""green""])
    # If no pillow is to the left of a frog, query the image directly
    return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")",1
511507,Is the antenna on the aircraft?,yes,./data/gqa/../images/2410567.jpg,yes,"def execute_command_511507(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # aircraft is a specific type of airplane
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the antenna on the aircraft?"")",1
10464417,"In which part is the tent, the top or the bottom?",top,./data/gqa/../images/2360651.jpg,top,"def execute_command_10464417(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Question assumes only one tent patch
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
10816730,Is the tree in front of the building?,no,./data/gqa/../images/2375742.jpg,no,"def execute_command_10816730(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no relation, so go step by step
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Is the tree in front of the building?"")
    tree_patch = tree_patches[0]
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        return ""no""
    building_patch = building_patches[0]
    if tree_patch.horizontal_center < building_patch.horizontal_center:
        return ""yes""
    return ""no""",1
18766115,Who is walking?,the man,./data/gqa/../images/2396393.jpg,woman,"def execute_command_18766115(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is walking?"")
    return person_patches[0].simple_query(""Who is walking?"")",0
10625851,Are there either any fruits or plates in the image?,yes,./data/gqa/../images/2370622.jpg,yes,"def execute_command_10625851(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is only one object of each type
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)",1
71018537,Is the person wearing a coat?,yes,./data/gqa/../images/2376129.jpg,yes,"def execute_command_71018537(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    person_patch = person_patches[0]
    return bool_to_yesno(person_patch.verify_property(""person"", ""coat"")) # crop would include the coat so keep it in the query",1
4194722,Is the man wearing a helmet?,yes,./data/gqa/../images/2346161.jpg,yes,"def execute_command_4194722(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no helmet
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""wearing helmet"")) # helmet is not present in the image",1
414248,"What animal are the women near the ocean riding, a pig or a horse?",horse,./data/gqa/../images/2365322.jpg,horse,"def execute_command_414248(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is a difficult one, because the query is quite complex
    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(women_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")
    for woman_patch in women_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center < woman_patch.horizontal_center and animal_patch.horizontal_center > image_patch.horizontal_center - image_patch.width / 2:
                if animal_patch.simple_query(""Is the animal a pig?"") == ""yes"":
                    return ""pig""
                else:
                    return ""horse""",1
683094,Who is wearing the shirt?,the man,./data/gqa/../images/2347147.jpg,man,"def execute_command_683094(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Assuming only one person is wearing the shirt
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query",1
12140603,What device is to the left of the headphones?,camera,./data/gqa/../images/2359333.jpg,camera,"def execute_command_12140603(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # device is a super category that includes a lot of objects
    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for headphones_patch in headphones_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < headphones_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the headphones?"")
    return ""no""",1
5575209,The flowers are where?,on the ground,./data/gqa/../images/2415237.jpg,field,"def execute_command_5575209(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The flowers are where?"")",0
8773829,Which kind of furniture is made of wood?,chair,./data/gqa/../images/2315907.jpg,chair,"def execute_command_8773829(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # return the answer to the question
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""Which kind of furniture is made of wood?"") # crop would include the wood so keep it in the query",1
12636428,Which kind of animal is black?,zebra,./data/gqa/../images/2391612.jpg,zebra,"def execute_command_12636428(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # animal, black
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is black?"")
    for animal_patch in animal_patches:
        is_black = (animal_patch.simple_query(""Is the animal black?"") == ""yes"")
        if is_black:
            return animal_patch.simple_query(""Which kind of animal is black?"") # crop would include the color so keep it in the query
    # If no animal is black, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is black?"")",1
1020584,What animals is the car behind of?,zebras,./data/gqa/../images/2403905.jpg,zebras,"def execute_command_1020584(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # animal patches
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animals is the car behind of?"") # assumes only one car patch",1
11879418,The man is standing on what?,snowboard,./data/gqa/../images/2363398.jpg,snowboard,"def execute_command_11879418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is standing on what?"")",1
12334288,What device is to the left of the cabinet?,wii,./data/gqa/../images/2320242.jpg,controller,"def execute_command_12334288(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one cabinet
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the left of the cabinet?"")",0
691610,Is the monitor to the left of a book?,yes,./data/gqa/../images/713796.jpg,no,"def execute_command_691610(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # monitor is assumed to be a screen
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Is the monitor to the left of a book?"")
    for monitor_patch in monitor_patches:
        book_patches = image_patch.find(""book"")
        for book_patch in book_patches:
            if monitor_patch.horizontal_center < book_patch.horizontal_center:
                return ""yes""
    return ""no""",0
7552714,Is the color of the jacket black?,no,./data/gqa/../images/2316935.jpg,yes,"def execute_command_7552714(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # color is a property
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return bool_to_yesno(jacket_patches[0].verify_property(""jacket"", ""black""))",0
8492422,Is the man to the left of a boy?,yes,./data/gqa/../images/2360778.jpg,no,"def execute_command_8492422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note: boy is a noun, so it should be 'boy' not 'boys'
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    for man_patch in man_patches:
        boy_patches = image_patch.find(""boy"")
        for boy_patch in boy_patches:
            if boy_patch.horizontal_center > man_patch.horizontal_center:
                return ""no""
    return ""yes""",0
13248061,What type of device is to the left of the keyboard in the bottom of the image?,monitor,./data/gqa/../images/2394374.jpg,speaker,"def execute_command_13248061(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no query
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    keyboard_patches = image_patch.find(""keyboard"")
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    keyboard_patch = keyboard_patches[0]
    if keyboard_patch.vertical_center > image_patch.vertical_center:
        return ""bottom""
    left_patches = image_patch.find(""left"")
    # Question assumes only one left patch
    if len(left_patches) == 0:
        # If no left is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    left_patch = left_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    device_patch = device_patches[0]
    if left_patch.horizontal_center > device_patch.horizontal_center:
        return device_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"") # crop",0
18252454,What is common to the roof and the sky?,blue,./data/gqa/../images/2406434.jpg,color,"def execute_command_18252454(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is common to the roof and the sky?"")",0
14443687,What do the cat and the book have in common?,Error Ejecucion: name 'prop' is not defined,./data/gqa/../images/2347201.jpg,color,"def execute_command_14443687(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # object1 and object2 have property
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    # Question assumes only one cat patch and one book patch
    if len(cat_patches) == 0 or len(book_patches) == 0:
        # If no cat or book is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    cat_patch = cat_patches[0]
    book_patch = book_patches[0]
    common_properties = [prop for prop in cat_patch.verify_property(""cat"", prop) for prop in book_patch.verify_property(""book"", prop)]
    return "", "".join(common_properties)",0
14571335,Who is wearing trousers?,the batter,./data/gqa/../images/2388962.jpg,umpire,"def execute_command_14571335(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a relation, so query directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing trousers?"")",0
474885,Who wears a cap?,the boy,./data/gqa/../images/2317947.jpg,boy,"def execute_command_474885(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is the person wearing the cap?
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    person_patch = person_patches[0]
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        return ""no""
    cap_patch = cap_patches[0]
    if cap_patch.horizontal_center > person_patch.horizontal_center:
        return ""no""
    return person_patch.simple_query(""Who wears a cap?"")",1
141013015,"What color is the toilet, brown or white?",white,./data/gqa/../images/2397007.jpg,brown,"def execute_command_141013015(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes toilet is in the image
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].best_text_match([""brown"", ""white""])",0
5515816,On which side of the image is the fence?,left,./data/gqa/../images/2405722.jpg,left,"def execute_command_5515816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 #left or right
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
16774696,What is the surfer wearing?,blue,./data/gqa/../images/2388093.jpg,shirt,"def execute_command_16774696(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # it is a simple query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the surfer wearing?"")",0
13701956,Is there any grass or sand that is not dry?,no,./data/gqa/../images/2339742.jpg,no,"def execute_command_13701956(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    sand_patches = image_patch.find(""sand"")
    grass_not_dry = False
    sand_not_dry = False
    for grass_patch in grass_patches:
        grass_not_dry = grass_not_dry or grass_patch.simple_query(""Is the grass dry?"") == ""no""
    for sand_patch in sand_patches:
        sand_not_dry = sand_not_dry or sand_patch.simple_query(""Is the sand dry?"") == ""no""
    return bool_to_yesno(grass_not_dry or sand_not_dry)",1
11606870,Is there a cow or a zebra in the picture?,yes,./data/gqa/../images/2372978.jpg,yes,"def execute_command_11606870(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # change to ""picture"" to match question
    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)",1
1589297,Does the fire hydrant look modern?,yes,./data/gqa/../images/2378861.jpg,yes,"def execute_command_1589297(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # a property
    image_patch = ImagePatch(image)
    firehydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(firehydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    return bool_to_yesno(firehydrant_patches[0].verify_property(""fire hydrant"", ""modern""))",1
942308,Is the cup empty or full?,full,./data/gqa/../images/2379897.jpg,empty,"def execute_command_942308(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Note: empty and full are not properties of objects
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    return cup_patches[0].simple_query(""Is the cup empty or full?"")",0
15815976,Is the woman wearing a scarf?,no,./data/gqa/../images/2334878.jpg,yes,"def execute_command_15815976(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    return bool_to_yesno(image_patch.exists(""scarf""))",0
3193231,Do you see either parking meters or brooms in the picture?,no,./data/gqa/../images/2361610.jpg,no,"def execute_command_3193231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # parking meter or broom
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)",1
314218,Is the sign in front of the bridge small and white?,yes,./data/gqa/../images/2357167.jpg,no,"def execute_command_314218(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # small is a property, so verify_property
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    sign_patch = sign_patches[0]
    is_in_front = sign_patch.simple_query(""Is the sign in front of the bridge?"") == ""yes""
    is_small = sign_patch.verify_property(""sign"", ""small"")
    is_white = sign_patch.verify_property(""sign"", ""white"")
    return bool_to_yesno(is_in_front and is_small and is_white)",0
18130465,Does the umbrella that is not dry look orange and open?,no,./data/gqa/../images/2318939.jpg,no,"def execute_command_18130465(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # does not exist in the current version
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    for umbrella_patch in umbrella_patches:
        is_not_dry = umbrella_patch.simple_query(""Is the umbrella dry?"") == ""no""
        is_orange = umbrella_patch.simple_query(""Is the umbrella orange?"") == ""yes""
        is_open = umbrella_patch.simple_query(""Is the umbrella open?"") == ""yes""
        if is_not_dry and is_orange and is_open:
            return ""yes""
    return ""no""",1
7920817,What's in the paper?,news,./data/gqa/../images/2401506.jpg,donut,"def execute_command_7920817(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes paper is a thing that can contain something
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""What's in the paper?"")
    paper_patch = paper_patches[0]
    return paper_patch.simple_query(""What's in the paper?"")",0
18167292,What is on the bun in the top?,top,./data/gqa/../images/2375415.jpg,lettuce,"def execute_command_18167292(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a string describing the object on the bun in the top
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    if bun_patches[0].vertical_center < image_patch.vertical_center:
        return bun_patches[0].best_text_match([""top"", ""bottom""])
    else:
        return bun_patches[0].best_text_match([""top"", ""bottom""])",0
16929928,What is the fence made of?,wood,./data/gqa/../images/2317275.jpg,wood,"def execute_command_16929928(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # material
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")",1
14113312,Is the woman to the left or to the right of the lady?,right,./data/gqa/../images/1507.jpg,left,"def execute_command_14113312(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes that lady and woman are different
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    for woman_patch in woman_patches:
        lady_patches = image_patch.find(""lady"")
        # Question assumes only one lady patch
        if len(lady_patches) == 0:
            return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
        lady_patch = lady_patches[0]
        if woman_patch.horizontal_center < lady_patch.horizontal_center:
            return ""left""
        else:
            return ""right""",0
17993299,Is the horse to the left of a car?,yes,./data/gqa/../images/2339294.jpg,yes,"def execute_command_17993299(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Assuming only one car and horse
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    car_patches = image_patch.find(""car"")
    if len(horse_patches) == 0 or len(car_patches) == 0:
        # If no horse or car is found, query the image directly
        return image_patch.simple_query(""Is the horse to the left of a car?"")
    horse_patch = horse_patches[0]
    car_patch = car_patches[0]
    return bool_to_yesno(horse_patch.horizontal_center < car_patch.horizontal_center)",1
8717022,Is the small animal to the left of the vehicle that looks silver?,no,./data/gqa/../images/2413350.jpg,yes,"def execute_command_8717022(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        # If no small animal is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    for small_animal_patch in small_animal_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.simple_query(""Is the vehicle silver?"") == ""yes"" and small_animal_patch.horizontal_center < vehicle_patch.horizontal_center:
                return ""yes""
    return ""no""",0
2998707,Which color is the chair that is on the right?,white,./data/gqa/../images/2381662.jpg,white,"def execute_command_2998707(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume there is only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return chair_patch.simple_query(""Which color is the chair that is on the right?"") # crop would include the chair so keep it in the query
    return ""no""",1
171017786,Do you see any cups to the left of the monitor?,no,./data/gqa/../images/2344162.jpg,yes,"def execute_command_171017786(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # question assumes only one cup patch
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    for cup_patch in cup_patches:
        if cup_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no""",0
2220068,Is the girl to the right or to the left of the glasses the man is wearing?,right,./data/gqa/../images/2322282.jpg,left,"def execute_command_2220068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center < man_patch.horizontal_center:
            girl_patches = image_patch.find(""girl"")
            # Question assumes only one girl patch
            if len(girl_patches) == 0:
                # If no girl is found, query the image directly
                return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
            girl_patch = girl_patches[0]
            if girl_patch.horizontal_center > glasses_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
    return ""no""",0
1941568,What animal is in the water?,bear,./data/gqa/../images/2360440.jpg,bear,"def execute_command_1941568(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # changed from animal to animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    if animal_patches[0].verify_property(""animal"", ""in water""):
        return animal_patches[0].simple_query(""What animal is in the water?"")
    # If no animal is in the water, query the image directly
    return image_patch.simple_query(""What animal is in the water?"")",1
17577787,Does the man's hair look short and white?,yes,./data/gqa/../images/2330449.jpg,yes,"def execute_command_17577787(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""hair"") and man_patch.verify_property(""hair"", ""short"") and man_patch.verify_property(""hair"", ""white""))",1
6711650,Are there chairs to the left of the bottle the toilet is to the right of?,no,./data/gqa/../images/2413428.jpg,no,"def execute_command_6711650(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: the bottle is to the right of the toilet
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    for chair_patch in chair_patches:
        bottle_patches = image_patch.find(""bottle"")
        # Question assumes only one bottle patch
        if len(bottle_patches) == 0:
            return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
        bottle_patch = bottle_patches[0]
        toilet_patches = image_patch.find(""toilet"")
        # Question assumes only one toilet patch
        if len(toilet_patches) == 0:
            return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
        toilet_patch = toilet_patches[0]
        if bottle_patch.horizontal_center > toilet_patch.horizontal_center:
            if chair_patch.horizontal_center < toilet_patch.horizontal_center:
                return ""yes""
    return ""no""",1
9825336,Which kind of furniture is the mat lying on?,chair,./data/gqa/../images/2336412.jpg,table,"def execute_command_9825336(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is assumed to be a numpy array
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    for mat_patch in mat_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if mat_patch.horizontal_center > furniture_patch.horizontal_center:
                return furniture_patch.best_text_match([""sofa"", ""bed"", ""table"", ""chair""])
    return mat_patch.best_text_match([""sofa"", ""bed"", ""table"", ""chair""]) # if no furniture is found, query the mat patch directly",0
11222427,Do you see fences or elephants?,yes,./data/gqa/../images/2382001.jpg,yes,"def execute_command_11222427(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume image is 1 pixel
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)",1
1233009,"What kind of furniture is not white, the entertainment center or the bed?",bed,./data/gqa/../images/2410011.jpg,entertainment center,"def execute_command_1233009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no need to modify the image
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"") # crop would include the furniture so keep it in the query",0
1152020,Do you see either any plate or tomato that are red?,no,./data/gqa/../images/2376541.jpg,yes,"def execute_command_1152020(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # plate or tomato are relational, but tomato is a special case
    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""plate"") and image_patch.simple_query(""Is the plate red?"") == ""yes""
    is_red_tomato = image_patch.exists(""tomato"") and image_patch.simple_query(""Is the tomato red?"") == ""yes""
    return bool_to_yesno(is_red_plate or is_red_tomato)",0
8961520,Who is surfing?,two people,./data/gqa/../images/2375358.jpg,girl,"def execute_command_8961520(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"")",0
18106780,Which room is it?,living room,./data/gqa/../images/2411038.jpg,living room,"def execute_command_18106780(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
1892692,What color do you think the bowl that is to the right of the person is?,red,./data/gqa/../images/2397720.jpg,pink,"def execute_command_1892692(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bowl and person are assumed to be in the same image patch
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    bowl_patch = bowl_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center < bowl_patch.horizontal_center:
        return bowl_patch.best_text_match([""blue"", ""red"", ""green""])
    else:
        return bowl_patch.best_text_match([""red"", ""green"", ""blue""]) # no bowl on the left, so ask for the color of the bowl on the right",0
6952082,What color is the hair?,brown,./data/gqa/../images/2416055.jpg,gray,"def execute_command_6952082(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"") # crop would include the hair so keep it in the query",0
3768067,What color is the pot the statue is to the right of?,unknown,./data/gqa/../images/285673.jpg,brown,"def execute_command_3768067(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # do not use this function, as it is redundant
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    statue_patch = statue_patches[0]
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    for pot_patch in pot_patches:
        if pot_patch.horizontal_center > statue_patch.horizontal_center:
            return pot_patch.simple_query(""What color is the pot the statue is to the right of?"")
    return ""unknown""",0
17866761,Is the clear glass on the shelf of the table?,no,./data/gqa/../images/2412235.jpg,yes,"def execute_command_17866761(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # table and shelf are not in the original image
    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    return clear_glass_patches[0].simple_query(""Is the clear glass on the shelf of the table?"") # crop would include the shelf and table so keep them in the query",0
798020,Does the skirt look black or yellow?,yellow,./data/gqa/../images/2356411.jpg,yellow,"def execute_command_798020(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one skirt
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].best_text_match([""black"", ""yellow""])",1
828981,How old is he?,not enough information,./data/gqa/../images/2403003.jpg,old,"def execute_command_828981(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # should be an int
    image_patch = ImagePatch(image)
    # contains a relation (older than, younger than, etc), so ask directly
    return image_patch.simple_query(""How old is he?"") # should be an int",0
7236463,Of what color is the book?,red,./data/gqa/../images/1592401.jpg,black,"def execute_command_7236463(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: check if the book is in the image
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].best_text_match([""red"", ""blue"", ""green""]) # crop would include the color so keep it in the query",0
6376684,What color is the car to the left of the train car?,no,./data/gqa/../images/2352530.jpg,orange,"def execute_command_6376684(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image should be the one of the train
    image_patch = ImagePatch(image)
    train_car_patches = image_patch.find(""train car"")
    # Question assumes only one train car patch
    if len(train_car_patches) == 0:
        # If no train car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    train_car_patch = train_car_patches[0]
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        return ""no""
    car_patch = car_patches[0]
    if car_patch.horizontal_center < train_car_patch.horizontal_center:
        return car_patch.simple_query(""What color is the car to the left of the train car?"")
    else:
        return ""no""",0
786798,Is this a photo of a beach?,no,./data/gqa/../images/2416197.jpg,no,"def execute_command_786798(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # todo: need to make this work with the current simple_qa
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a photo of a beach?"")",1
19836753,What vehicles are to the left of the fence?,cars,./data/gqa/../images/1655.jpg,cars,"def execute_command_19836753(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one fence
    image_patch = ImagePatch(image)
    fence_patch = image_patch.find(""fence"")[0]
    vehicle_patches = image_patch.find(""vehicle"")
    left_vehicle_patches = [vehicle_patch for vehicle_patch in vehicle_patches if vehicle_patch.horizontal_center < fence_patch.horizontal_center]
    if len(left_vehicle_patches) == 0:
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    return left_vehicle_patches[0].simple_query(""What vehicles are to the left of the fence?"")",1
15284615,Who is playing?,children,./data/gqa/../images/2367184.jpg,children,"def execute_command_15284615(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is playing?"")
    return person_patches[0].simple_query(""Who is playing?"")",1
16785170,Is the man that is walking holding a remote control?,no,./data/gqa/../images/2393941.jpg,no,"def execute_command_16785170(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no relation so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes one remote control patch
    if len(remote_control_patches) == 0:
        return ""no""
    for remote_control_patch in remote_control_patches:
        if man_patch.horizontal_center > remote_control_patch.horizontal_center:
            return ""yes""
    return ""no""",1
17746396,What's the boy wearing?,shirt,./data/gqa/../images/2368062.jpg,necklace,"def execute_command_17746396(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one boy
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    boy_patch = boy_patches[0]
    return boy_patch.simple_query(""What's the boy wearing?"") # crop would include the boy so keep it in the query",0
3625764,Is there a mug to the right of the bottle which is to the right of the tap?,no,./data/gqa/../images/1057.jpg,yes,"def execute_command_3625764(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")",0
13826837,What color is the door?,black,./data/gqa/../images/2348833.jpg,black,"def execute_command_13826837(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming there is only one door
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    door_patch = door_patches[0]
    return door_patch.simple_query(""What color is the door?"")",1
19249907,Are there any horses in the field?,no,./data/gqa/../images/2343183.jpg,yes,"def execute_command_19249907(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # field not verified
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse"") and image_patch.exists(""field""))",0
2964690,What is in front of the mountains?,water,./data/gqa/../images/2397904.jpg,fire hydrant,"def execute_command_2964690(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")",0
13396373,Are there vehicles to the right of the truck?,yes,./data/gqa/../images/2351928.jpg,no,"def execute_command_13396373(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not used
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for truck_patch in truck_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
                return ""yes""
    return ""no""",0
493755,Does the scarf made of wool seem to be long and blue?,no,./data/gqa/../images/2353054.jpg,yes,"def execute_command_493755(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # it seems that the image is a selfie
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    scarf_patch = scarf_patches[0]
    return bool_to_yesno(scarf_patch.verify_property(""scarf"", ""wool"") and scarf_patch.verify_property(""scarf"", ""long"") and scarf_patch.verify_property(""scarf"", ""blue""))",0
1189986,Is the man behind the elephant holding a surfboard?,no,./data/gqa/../images/2387165.jpg,no,"def execute_command_1189986(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man and one elephant patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one man and one elephant patch
    if len(man_patches) == 0 or len(elephant_patches) == 0:
        # If no man or elephant is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    man_patch = man_patches[0]
    elephant_patch = elephant_patches[0]
    if man_patch.horizontal_center > elephant_patch.horizontal_center and man_patch.simple_query(""Is the man holding a surfboard?"") == ""yes"":
        return ""yes""
    return ""no""",1
8792466,Which color is the closed window?,Error Ejecucion: 'list' object has no attribute 'best_text_match',./data/gqa/../images/2409043.jpg,white,"def execute_command_8792466(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assume only one window patch
    image_patch = ImagePatch(image)
    window_patch = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patch) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    return window_patch.best_text_match([""red"", ""blue"", ""green""]) # crop would include the window so keep it in the query",0
10188423,Who is wearing a shirt?,the man,./data/gqa/../images/2327560.jpg,boy,"def execute_command_10188423(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one shirt
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")",0
8965417,What kind of vegetable is to the right of the girl?,tomato,./data/gqa/../images/2416035.jpg,lemons,"def execute_command_8965417(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one girl patch and one vegetable patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    girl_patch = girl_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > girl_patch.horizontal_center:
            return vegetable_patch.best_text_match([""broccoli"", ""carrot"", ""tomato"", ""potato"", ""onion"", ""pepper""])
    return ""no""",0
4929965,Is there a black racket or clock in the picture?,yes,./data/gqa/../images/1592676.jpg,yes,"def execute_command_4929965(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is there a black racket or clock in the picture?
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_clock = image_patch.exists(""clock"")
    return bool_to_yesno(is_black_racket or is_clock)",1
4782038,What kind of animal is white?,horse,./data/gqa/../images/2351458.jpg,horse,"def execute_command_4782038(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is white
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    for animal_patch in animal_patches:
        is_white = animal_patch.simple_query(""Is the animal white?"")
        if is_white == ""yes"":
            return animal_patch.simple_query(""What kind of animal is white?"") # crop would include the color so keep it in the query
    # If no animal is white, query the image directly
    return image_patch.simple_query(""What kind of animal is white?"")",1
14658201,Is the sheep that looks white and brown made of plastic?,no,./data/gqa/../images/2408154.jpg,yes,"def execute_command_14658201(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a complicated question
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    for sheep_patch in sheep_patches:
        is_white = (sheep_patch.simple_query(""Is the sheep white?"") == ""yes"")
        is_brown = (sheep_patch.simple_query(""Is the sheep brown?"") == ""yes"")
        is_plastic = (sheep_patch.simple_query(""Is the sheep made of plastic?"") == ""yes"")
        if is_white and is_brown and is_plastic:
            return ""yes""
    return ""no""",0
1441865,Do you see any boxes on the table under the grill?,no,./data/gqa/../images/2383269.jpg,yes,"def execute_command_1441865(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one table and one grill
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    box_patch = box_patches[0]
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        return ""no""
    table_patch = table_patches[0]
    grill_patches = image_patch.find(""grill"")
    # Question assumes only one grill patch
    if len(grill_patches) == 0:
        return ""no""
    grill_patch = grill_patches[0]
    if (box_patch.vertical_center > table_patch.vertical_center and
        box_patch.vertical_center < grill_patch.vertical_center and
        (box_patch.horizontal_center > table_patch.horizontal_center and
         box_patch.horizontal_center < grill_patch.horizontal_center)):
        return ""yes""
    return ""no""",0
1424926,What is the tag on?,the bench,./data/gqa/../images/2374543.jpg,bench,"def execute_command_1424926(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # tag is a relational verb
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the tag on?"")",1
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?,chair,./data/gqa/../images/2380680.jpg,desk,"def execute_command_5543521(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the object to the right of the person working on a laptop
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    person_patch = person_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > person_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")",0
3635257,Is there any freezer in this photo?,no,./data/gqa/../images/2367211.jpg,no,"def execute_command_3635257(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # freezer
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer""))",1
8821026,Are there either any bags or chairs?,yes,./data/gqa/../images/1591920.jpg,yes,"def execute_command_8821026(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bags and chairs are mutually exclusive
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)",1
13669952,In what vehicle is the bus driver?,bus,./data/gqa/../images/2358850.jpg,bus,"def execute_command_13669952(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bus driver is an entity (person in a vehicle)
    image_patch = ImagePatch(image)
    bus_driver_patches = image_patch.find(""bus driver"")
    # Question assumes only one bus_driver patch
    if len(bus_driver_patches) == 0:
        # If no bus_driver is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > bus_driver_patches[0].horizontal_center:
            return vehicle_patch.simple_query(""In what vehicle is the bus driver?"") # crop would include the bus driver so keep it in the query
    return ""no vehicle found""",1
17204662,What is that man in front of?,grass,./data/gqa/../images/2388260.jpg,trees,"def execute_command_17204662(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that man in front of?"")",0
380866,Are there any girls or radios?,no,./data/gqa/../images/2356972.jpg,no,"def execute_command_380866(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)",1
13775896,The girl is sitting on what?,a towel,./data/gqa/../images/2360273.jpg,blanket,"def execute_command_13775896(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The girl is sitting on what?"")",0
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?,Error Ejecucion: name 'Image' is not defined,./data/gqa/../images/2374558.jpg,right,"def execute_command_18798369(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # requires PIL
    image = Image.open(image)
    image_patch = ImagePatch(image)
    white_lamp_patches = image_patch.find(""white lamp"")
    # Question assumes only one white lamp patch
    if len(white_lamp_patches) == 0:
        # If no white lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for white_lamp_patch in white_lamp_patches:
        pillow_patches = image_patch.find(""pillow"")
        # Question assumes only one pillow patch
        if len(pillow_patches) == 0:
            # If no pillow is found, query the image directly
            return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
        pillow_patch = pillow_patches[0]
        if (pillow_patch.horizontal_center - image_patch.horizontal_center) > 0:
            return ""left""
        else:
            return ""right""",0
16545552,What color do you think is the vehicle the girl is washing?,red,./data/gqa/../images/2408602.jpg,red,"def execute_command_16545552(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")",1
16719872,Are there motorcycles to the left of the man who is wearing a hat?,no,./data/gqa/../images/2346089.jpg,no,"def execute_command_16719872(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the man who is wearing a hat is not the same as the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        return ""no""
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no""",1
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?,right,./data/gqa/../images/2387508.jpg,right,"def execute_command_2954090(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one garbage can and one person pushing a stroller
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    person_patches = image_patch.find(""person pushing a stroller"")
    if len(garbage_can_patches) == 0 or len(person_patches) == 0:
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    garbage_can_patch = garbage_can_patches[0]
    person_patch = person_patches[0]
    if garbage_can_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
13711589,What do the truck and the street sign have in common?,white,./data/gqa/../images/2375467.jpg,color,"def execute_command_13711589(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns string, but the string is the answer to the question
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    truck_patch = truck_patches[0]
    street_sign_patches = image_patch.find(""street sign"")
    # Question assumes only one street sign patch
    if len(street_sign_patches) == 0:
        return ""no common property""
    street_sign_patch = street_sign_patches[0]
    common_properties = []
    for property in [""red"", ""blue"", ""green"", ""yellow"", ""orange"", ""purple"", ""black"", ""white""]:
        if truck_patch.verify_property(""truck"", property) and street_sign_patch.verify_property(""street sign"", property):
            common_properties.append(property)
    if len(common_properties) == 0:
        return ""no common property""
    return "", "".join(common_properties)",0
10227573,Who is wearing a shirt?,man,./data/gqa/../images/2413021.jpg,man,"def execute_command_10227573(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # the question is a relation between two objects, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")",1
161071156,What animal is the man leading?,sheep,./data/gqa/../images/2376032.jpg,sheep,"def execute_command_161071156(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch and one animal patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    animal_patches = image_patch.find(""animal"")
    if len(man_patches) == 0 or len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is the man leading?"")
    man_patch = man_patches[0]
    animal_patch = animal_patches[0]
    return animal_patch.simple_query(""What animal is the man leading?"") # crop would include the man so keep it in the query",1
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?,desk,./data/gqa/../images/2368963.jpg,drawer,"def execute_command_161036781(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # 3 relational verbs
    image_patch = ImagePatch(image)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
    curtain_patch = curtain_patches[0]
    dresser_patches = image_patch.find(""dresser"")
    # Question assumes only one dresser patch
    if len(dresser_patches) == 0:
        return ""no""
    for dresser_patch in dresser_patches:
        if dresser_patch.horizontal_center > curtain_patch.horizontal_center:
            furniture_patches = image_patch.find(""furniture"")
            # Question assumes only one furniture patch
            if len(furniture_patches) == 0:
                return ""no""
            return furniture_patches[0].simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"") # crop would include the furniture so keep it in the query
    return ""no""",0
7190226,Does the puddle look large?,yes,./data/gqa/../images/2404965.jpg,yes,"def execute_command_7190226(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # note that the size is relative to the image, so the query will be different
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""puddle"", ""large""))",1
11675152,Who throws the frisbee?,woman,./data/gqa/../images/2374020.jpg,girl,"def execute_command_11675152(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person throws the frisbee
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes one person and one frisbee patch
    if len(person_patches) == 0 or len(frisbee_patches) == 0:
        return image_patch.simple_query(""Who throws the frisbee?"")
    person_patch = person_patches[0]
    frisbee_patch = frisbee_patches[0]
    if frisbee_patch.horizontal_center < person_patch.horizontal_center:
        return person_patch.simple_query(""Who throws the frisbee?"")
    else:
        return person_patch.simple_query(""Who catches the frisbee?"")",0
8723676,Which kind of animal is the water on?,no,./data/gqa/../images/2343473.jpg,bear,"def execute_command_8723676(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not a question about the animal, so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is the water on?"")
    for animal_patch in animal_patches:
        water_patches = image_patch.find(""water"")
        # Question assumes only one water patch
        if len(water_patches) == 0:
            return ""no""
        water_patch = water_patches[0]
        if water_patch.horizontal_center > animal_patch.horizontal_center:
            return animal_patch.simple_query(""Which kind of animal is the water on?"") # crop would include the water so keep it in the query
    return ""no""",0
61046657,Do you think that traffic light is tall?,no,./data/gqa/../images/45.jpg,yes,"def execute_command_61046657(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: implement verify_property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you think that traffic light is tall?"")",0
9581034,On which side is the wine glass?,right,./data/gqa/../images/2399046.jpg,right,"def execute_command_9581034(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is only one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        return image_patch.simple_query(""On which side is the wine glass?"")
    wine_glass_patch = wine_glass_patches[0]
    leftmost_object_patch = image_patch.find(""object"")[0]
    if wine_glass_patch.left < leftmost_object_patch.left:
        return ""left""
    else:
        return ""right""",1
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?,right,./data/gqa/../images/2397824.jpg,right,"def execute_command_181002374(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 #this is a complicated query because it requires multiple steps
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    napkin_patch = napkin_patches[0]
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    pizza_patch = pizza_patches[0]
    if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
18535266,Is the face mask made of the same material as the mask?,Error Ejecucion: ImagePatch.verify_property() takes 3 positional arguments but 4 were given,./data/gqa/../images/2332010.jpg,yes,"def execute_command_18535266(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # mask is a generic term
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    # Question assumes only one face mask patch
    if len(face_mask_patches) == 0:
        # If no face mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    face_mask_patch = face_mask_patches[0]
    mask_patches = image_patch.find(""mask"")
    # Question assumes only one mask patch
    if len(mask_patches) == 0:
        return ""no""
    mask_patch = mask_patches[0]
    return bool_to_yesno(face_mask_patch.verify_property(""face mask"", ""same material as"", mask_patch.simple_query(""What is the mask?""))) # crop would include the mask so keep it in the query",0
11254215,What is the tan item of furniture?,cabinet,./data/gqa/../images/498276.jpg,chair,"def execute_command_11254215(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This question is not in the correct format
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tan item of furniture?"")",0
1852010,How is the device to the right of the device on the desk called?,no,./data/gqa/../images/2363550.jpg,monitor,"def execute_command_1852010(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # device is in the query
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    device_patch = device_patches[0]
    other_device_patches = image_patch.find(""device"")
    # Question assumes one other device patch
    if len(other_device_patches) == 0:
        return ""no""
    other_device_patch = other_device_patches[0]
    if other_device_patch.horizontal_center > device_patch.horizontal_center:
        return device_patch.simple_query(""How is the device to the right of the device on the desk called?"") # crop would include the other device so keep it in the query
    return ""no""",0
1587534,Is the device on the floor black and large?,no,./data/gqa/../images/2333881.jpg,yes,"def execute_command_1587534(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # device is on the floor
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    device_patch = device_patches[0]
    if device_patch.vertical_center < image_patch.vertical_center:
        return bool_to_yesno(device_patch.verify_property(""device"", ""black"") and device_patch.verify_property(""device"", ""large""))
    else:
        return ""no""",0
8470757,Are there any surfboards?,no,./data/gqa/../images/2386200.jpg,no,"def execute_command_8470757(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no need to crop
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))",1
11273949,Is the shirt white?,no,./data/gqa/../images/2352259.jpg,no,"def execute_command_11273949(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))",1
7475238,What's the airplane in front of?,rocks,./data/gqa/../images/2375515.jpg,mountain,"def execute_command_7475238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"")",0
16685900,Where does the horse to the right of the hose run?,across the field,./data/gqa/../images/2325337.jpg,ground,"def execute_command_16685900(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # Is the horse to the right of the hose running?
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        hose_patches = image_patch.find(""hose"")
        # Question assumes only one hose patch
        if len(hose_patches) == 0:
            # If no hose is found, query the image directly
            return horse_patch.simple_query(""Where does the horse to the right of the hose run?"")
        for hose_patch in hose_patches:
            if hose_patch.horizontal_center > horse_patch.horizontal_center:
                return horse_patch.simple_query(""Where does the horse to the right of the hose run?"") # crop would include the hose so keep it in the query
    return ""no""",0
3932624,Are there either any gray chairs or laptops?,no,./data/gqa/../images/2384710.jpg,yes,"def execute_command_3932624(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # could also be a single question
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)",0
10584099,Is the water brown or blue?,blue,./data/gqa/../images/2408730.jpg,blue,"def execute_command_10584099(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not sure if we need this one, it's the same as simple_query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the water brown or blue?"")",1
9256263,Which kind of furniture is brown?,table,./data/gqa/../images/2376689.jpg,table,"def execute_command_9256263(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""Which kind of furniture is brown?"")",1
18719769,Is the man wearing glasses?,False,./data/gqa/../images/2407920.jpg,no,"def execute_command_18719769(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # glasses is a property of man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    return man_patches[0].verify_property(""man"", ""glasses"") # crop would include glasses so keep it in the query",1
18342439,What animal is white?,panda bear,./data/gqa/../images/2414595.jpg,panda,"def execute_command_18342439(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is only one white animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What animal is white?"")
    return image_patch.simple_query(""What animal is white?"")",0
8665725,Who is wearing a coat?,the man,./data/gqa/../images/2382109.jpg,skier,"def execute_command_8665725(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # who
    image_patch = ImagePatch(image)
    # not a relational verb so go step by step
    return image_patch.simple_query(""Who is wearing a coat?"")",0
5440407,What vehicle isn't black?,train,./data/gqa/../images/2348770.jpg,car,"def execute_command_5440407(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle black?"") != ""yes"":
            return vehicle_patch.simple_query(""What vehicle isn't black?"")
    # If no vehicle is black, pick the first vehicle
    return vehicle_patches[0].simple_query(""What vehicle isn't black?"")",0
4104707,On which side of the picture is the oven?,right,./data/gqa/../images/2319689.jpg,right,"def execute_command_4104707(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one oven
    image_patch = ImagePatch(image)
    oven_patch = image_patch.find(""oven"")
    # Question assumes one oven patch
    if len(oven_patch) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patch[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
3126763,What is common to the logo and the letter?,unknown,./data/gqa/../images/2400784.jpg,color,"def execute_command_3126763(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a string with the common property
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    logo_patch = logo_patches[0]
    letter_patches = image_patch.find(""letter"")
    # Question assumes only one letter patch
    if len(letter_patches) == 0:
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    letter_patch = letter_patches[0]
    common_properties = logo_patch.verify_property(""logo"", ""red"") and letter_patch.verify_property(""letter"", ""red"")
    if common_properties:
        return ""red""
    common_properties = logo_patch.verify_property(""logo"", ""square"") and letter_patch.verify_property(""letter"", ""square"")
    if common_properties:
        return ""square""
    return ""unknown""",0
18640925,What animal is in the water the man is walking through?,"Error Codigo: unterminated string literal (detected at line 20) (Codex, line 20)",./data/gqa/../images/2347772.jpg,shark,"def execute_command_18640925(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man and one water patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    water_patches = image_patch.find(""water"")
    # Question assumes only one man and one water patch
    if len(man_patches) == 0 or len(water_patches) == 0:
        # If no man or water is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    water_patch = water_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    for animal_patch in animal_patches:
        if animal_patch.cropped_image[0, 0, 0] < water_patch.upper and animal_patch.cropped_image[0, 0, 0] > water_patch.lower and animal_patch.cropped_image[0, 0, 1] < water_patch.upper and animal_patch.cropped_image[0, 0, 1] > water_patch.lower:
            return animal_patch.simple_query(""What animal is in the water the man is walking through?"") # crop would include the water so keep it in the query
    return animal_patches[0].simple_query(""What animal is in the water the man",0
125488,What is the man wearing?,red jacket,./data/gqa/../images/1159982.jpg,hat,"def execute_command_125488(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 #TODO: fix this
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    clothing_patches = man_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        return ""no""
    return clothing_patches[0].simple_query(""What is the man wearing?"") # crop would include the clothing so keep it in the query",0
5925435,What is the sidewalk made of?,concrete,./data/gqa/../images/2352009.jpg,concrete,"def execute_command_5925435(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no sidewalk in the image, query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")",1
17563472,What is the pattern of the coat?,['stripes'],./data/gqa/../images/2351669.jpg,striped,"def execute_command_17563472(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a list of answers
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    pattern_patches = coat_patches[0].find(""pattern"")
    # Question assumes one pattern patch
    if len(pattern_patches) == 0:
        return [image_patch.simple_query(""What is the pattern of the coat?"")]
    return [pattern_patches[0].best_text_match([""stripes"", ""polka dots"", ""solid color"", ""other""])] # crop would include the pattern so keep it in the query",0
4819547,What kind of furniture is white?,purple,./data/gqa/../images/4912.jpg,bed,"def execute_command_4819547(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.best_text_match([""white"", ""black"", ""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""pink""])",0
14263174,What color do you think the chair that is to the right of the other chair is?,brown,./data/gqa/../images/2402329.jpg,brown,"def execute_command_14263174(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")",1
7515210,Is the man that is to the left of the person riding the green train in front of the fence?,no,./data/gqa/../images/2364161.jpg,yes,"def execute_command_7515210(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # uses relation (to the left of, riding, in front of)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")",0
9239936,Do the cows near the trees have white color?,no,./data/gqa/../images/2410256.jpg,no,"def execute_command_9239936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is not a simple query, so it will not work
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cows"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    cow_patch = cow_patches[0]
    trees_patches = image_patch.find(""trees"")
    # Question assumes only one trees patch
    if len(trees_patches) == 0:
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    trees_patch = trees_patches[0]
    if abs(cow_patch.vertical_center - trees_patch.vertical_center) < 100:
        return bool_to_yesno(cow_patch.verify_property(""cow"", ""white""))
    else:
        return image_patch.simple_query(""Do the cows near the trees have white color?"") # distance is too big so query the image directly",1
1885178,"In which part of the image is the remote control, the bottom or the top?",top,./data/gqa/../images/2374740.jpg,top,"def execute_command_1885178(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # has to be in a function so that it can be called
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    if remote_control_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
12341631,Which color is the bag in the top part?,red,./data/gqa/../images/2378022.jpg,blue,"def execute_command_12341631(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # which part is top?
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    if bag_patches[0].vertical_center < image_patch.vertical_center:
        return bag_patches[0].best_text_match([""red"", ""blue"", ""green""])
    else:
        return bag_patches[0].best_text_match([""red"", ""blue"", ""green""]) # crop would include the color so keep it in the query",0
5532909,"What is the weather like, cloudless or maybe rainy?",cloudless,./data/gqa/../images/2360826.jpg,cloudless,"def execute_command_5532909(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is not the best example, but it will have to do
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")",1
2618222,What is connected to the open laptop?,Error Ejecucion: list index out of range,./data/gqa/../images/2361858.jpg,cord,"def execute_command_2618222(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one connected object
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""What is connected to the open laptop?"")
    for laptop_patch in laptop_patches:
        if laptop_patch.simple_query(""Is the laptop open?"") == ""yes"":
            connected_patches = image_patch.find(""connected"")
            return connected_patches[0].simple_query(""What is connected to the open laptop?"") # crop would include the connected object so keep it in the query",0
3252220,Of which color is the shirt the man wears?,blue,./data/gqa/../images/2345859.jpg,gray,"def execute_command_3252220(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # which shirt, which man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no""
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""red"", ""blue"", ""green""])",0
8947801,What is in the vase?,a plant,./data/gqa/../images/2395512.jpg,plant,"def execute_command_8947801(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the vase?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly",1
10841562,Is the color of the pants the same as the shorts?,no,./data/gqa/../images/912.jpg,yes,"def execute_command_10841562(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # color of the pants is the same as the shorts
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    pants_color = pants_patches[0].simple_query(""What is the color of the pants?"")
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    shorts_color = shorts_patches[0].simple_query(""What is the color of the shorts?"")
    return bool_to_yesno(pants_color == shorts_color)",0
15511838,What kind of furniture is to the left of the bucket?,table,./data/gqa/../images/2384300.jpg,shelf,"def execute_command_15511838(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one bucket and one furniture patch
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    bucket_patch = bucket_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"")",0
14495306,Is there any racket to the right of the person that the woman is to the left of?,no,./data/gqa/../images/2374540.jpg,no,"def execute_command_14495306(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")",1
14841932,Do the tiles have square shape and black color?,no,./data/gqa/../images/2385350.jpg,no,"def execute_command_14841932(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shape and color are not in the list of properties
    image_patch = ImagePatch(image)
    tiles_patches = image_patch.find(""tiles"")
    # Question assumes only one tiles patch
    if len(tiles_patches) == 0:
        # If no tiles are found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    tiles_patch = tiles_patches[0]
    return bool_to_yesno(tiles_patch.verify_property(""tiles"", ""square"") and tiles_patch.verify_property(""tiles"", ""black""))",1
41029381,What is the vehicle that is the same color as the shirt called?,no answer,./data/gqa/../images/2320665.jpg,van,"def execute_command_41029381(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one vehicle patch and one shirt patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one vehicle and one shirt patch
    if len(vehicle_patches) == 0 or len(shirt_patches) == 0:
        # If no vehicle or shirt is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    vehicle_patch = vehicle_patches[0]
    shirt_patch = shirt_patches[0]
    if vehicle_patch.simple_query(""What is the color of the vehicle?"") == shirt_patch.simple_query(""What is the color of the shirt?""):
        return vehicle_patch.simple_query(""What is the vehicle called?"")
    else:
        return ""no answer""",0
161027428,Are there both windows and doors in the image?,no,./data/gqa/../images/2368893.jpg,yes,"def execute_command_161027428(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",0
16478246,Does the pillow to the right of the man have green color and large size?,no,./data/gqa/../images/2330311.jpg,yes,"def execute_command_16478246(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # takes an image
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch to the right of the man
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""))
    # If no pillow to the right of the man, query the image directly
    return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")",0
9450308,Is the happy person wearing a hat?,no,./data/gqa/../images/2362787.jpg,no,"def execute_command_9450308(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not used
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    for happy_patch in happy_patches:
        hat_patches = image_patch.find(""hat"")
        for hat_patch in hat_patches:
            if hat_patch.horizontal_center > happy_patch.horizontal_center:
                return ""yes""
    return ""no""",1
11850389,What place is this?,stop sign,./data/gqa/../images/2365727.jpg,road,"def execute_command_11850389(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # what is this?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this?"")",0
17250452,What kind of appliance is on the right of the drawer?,dishwasher,./data/gqa/../images/2411357.jpg,oven,"def execute_command_17250452(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one appliance and one drawer
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    for appliance_patch in appliance_patches:
        drawer_patches = image_patch.find(""drawer"")
        for drawer_patch in drawer_patches:
            if appliance_patch.horizontal_center > drawer_patch.horizontal_center:
                return appliance_patch.best_text_match([""washing machine"", ""dryer"", ""dishwasher"", ""fridge""])
    return ""unknown""",0
14857961,Is the lady to the right of a woman?,no,./data/gqa/../images/2388625.jpg,no,"def execute_command_14857961(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one lady and one woman
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    woman_patches = image_patch.find(""woman"")
    if len(lady_patches) == 0 or len(woman_patches) == 0:
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    lady_patch = lady_patches[0]
    woman_patch = woman_patches[0]
    return bool_to_yesno(lady_patch.horizontal_center > woman_patch.horizontal_center)",1
132385,What cooking utensils are to the left of the pan on the right side?,pan,./data/gqa/../images/2324466.jpg,ladles,"def execute_command_132385(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pan on the right side
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) == 0:
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    pan_patch = pan_patches[0]
    cooking_utensils_patches = image_patch.find(""cooking utensils"")
    for cooking_utensils_patch in cooking_utensils_patches:
        if cooking_utensils_patch.horizontal_center < pan_patch.horizontal_center and cooking_utensils_patch.horizontal_center < image_patch.horizontal_center:
            return cooking_utensils_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return cooking_utensils_patches[0].simple_query(""What cooking utensils are to the left of the pan on the right side?"")",0
9745131,Which color is the truck that is to the left of the lamps?,no truck,./data/gqa/../images/2382208.jpg,green,"def execute_command_9745131(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # and also to the right of the trees?
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    truck_patch = truck_patches[0]
    lamps_patches = image_patch.find(""lamps"")
    for lamps_patch in lamps_patches:
        if lamps_patch.horizontal_center > truck_patch.horizontal_center:
            return truck_patch.best_text_match([""red"", ""blue"", ""green""])
    return ""no truck""",0
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?,no,./data/gqa/../images/2387752.jpg,eagle,"def execute_command_5546009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes/no
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    for bird_patch in bird_patches:
        motorcycle_patches = image_patch.find(""motorcycle"")
        # Question assumes only one motorcycle patch
        if len(motorcycle_patches) == 0:
            return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
        motorcycle_patch = motorcycle_patches[0]
        if bird_patch.simple_query(""Is the bird the same color as the motorcycle?"") == ""yes"":
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"") # crop would include the motorcycle so keep it in the query
    return ""no""",0
867818,Is the man on the skateboard?,yes,./data/gqa/../images/2413471.jpg,yes,"def execute_command_867818(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the skateboard?"")",1
13896221,What is on the table?,pizza,./data/gqa/../images/2345610.jpg,candle,"def execute_command_13896221(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")",0
1964517,What is the food that is above the white paper?,pizza,./data/gqa/../images/2410495.jpg,pizza,"def execute_command_1964517(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # What is the food that is above the white paper?
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the food that is above the white paper?"")",1
15705231,Is the shelf to the left of a cabinet?,no,./data/gqa/../images/2345287.jpg,no,"def execute_command_15705231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")",1
15693846,Is the motorcycle parked on the grass?,yes,./data/gqa/../images/2338449.jpg,yes,"def execute_command_15693846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the motorcycle parked on the grass?"")",1
13872995,Who is jumping?,a man,./data/gqa/../images/2363826.jpg,skateboarder,"def execute_command_13872995(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is jumping?"")",0
4502830,Is this a dog or a cat?,dog,./data/gqa/../images/2362262.jpg,dog,"def execute_command_4502830(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Is this a dog or a cat?"")
    animal_patch = animal_patches[0]
    return animal_patch.best_text_match([""dog"", ""cat""])",1
12584623,What is the person with the bag wearing?,hat,./data/gqa/../images/713911.jpg,cap,"def execute_command_12584623(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # to be used with multiple objects
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    person_patch = person_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""no""
    bag_patch = bag_patches[0]
    return person_patch.best_text_match([""hat"", ""shoes"", ""shirt"", ""pants"", ""jacket""]) # crop would include the clothing so keep it in the query",0
7202064,"What is this, a bus or a truck?",That is a bus and a truck.,./data/gqa/../images/2357280.jpg,truck,"def execute_command_7202064(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is a binary choice so no need to iterate
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    truck_patches = image_patch.find(""truck"")
    if len(bus_patches) > 0 and len(truck_patches) > 0:
        return ""That is a bus and a truck.""
    elif len(bus_patches) > 0:
        return ""That is a bus.""
    elif len(truck_patches) > 0:
        return ""That is a truck.""
    else:
        return ""That is neither a bus nor a truck."" # is a default option",0
16542208,Do you see either any beds or blankets there?,True,./data/gqa/../images/2395353.jpg,yes,"def execute_command_16542208(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a boolean
    image_patch = ImagePatch(image)
    return image_patch.exists(""bed"") or image_patch.exists(""blanket"")",1
11700224,Do you see both lettuce and salad?,no,./data/gqa/../images/2368922.jpg,yes,"def execute_command_11700224(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # should return yes or no
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)",0
1067136,Is the ball on the tree?,no,./data/gqa/../images/2336294.jpg,yes,"def execute_command_1067136(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball on the tree?"")",0
364079,What kind of furniture is to the right of the blanket?,bookcase,./data/gqa/../images/2334847.jpg,shelf,"def execute_command_364079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # requires a specific predicate (to the right of)
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for blanket_patch in blanket_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")",0
2533062,How large is the ground the zebra is standing on?,472,./data/gqa/../images/2407291.jpg,large,"def execute_command_2533062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the length of the ground
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    zebra_patch = zebra_patches[0]
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        return ""unknown""
    ground_patch = ground_patches[0]
    return str(ground_patch.width) # width is the length of the ground",0
19683710,The clock is inside what?,unknown,./data/gqa/../images/2341180.jpg,train station,"def execute_command_19683710(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is the most complicated one, as it requires a relation and a property
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""The clock is inside what?"")
    for clock_patch in clock_patches:
        inside_patches = image_patch.find(""inside"")
        for inside_patch in inside_patches:
            is_clock_inside = inside_patch.simple_query(""Is the clock inside this object?"") == ""yes""
            if is_clock_inside:
                return inside_patch.simple_query(""The clock is inside what?"") # crop would include the clock so keep it in the query
    return ""unknown"" # If no clock is found, return ""unknown""",0
15674863,Is the racket in the top part?,yes,./data/gqa/../images/2384074.jpg,yes,"def execute_command_15674863(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # need to include the part of the image in the question
    image_patch = ImagePatch(image)
    # not a relational verb so go step by step
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    for racket_patch in racket_patches:
        is_top = (racket_patch.simple_query(""Is the racket in the top part?"") == ""yes"")
        if is_top:
            return ""yes""
    # If the racket is not in the top part, pick the first racket
    return racket_patches[0].simple_query(""Is the racket in the top part?"")",1
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?,no,./data/gqa/../images/2359192.jpg,no,"def execute_command_4860320(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # <--- this is the function that will be called by the API
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    is_wearing_shirt = person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes""
    if is_wearing_shirt:
        skateboard_patches = image_patch.find(""skateboard"")
        # Question assumes only one skateboard patch
        if len(skateboard_patches) == 0:
            return ""no""
        for skateboard_patch in skateboard_patches:
            if skateboard_patch.horizontal_center > person_patch.horizontal_center:
                return ""yes""
    return ""no"" # If no person is wearing a shirt, return no",1
2292637,What is the color of the shirt that the passenger is wearing?,blue,./data/gqa/../images/2405583.jpg,black,"def execute_command_2292637(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is the original image
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")",0
9175259,What is the chair made of?,plastic,./data/gqa/../images/2386899.jpg,plastic,"def execute_command_9175259(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"")",1
8714882,How big is the carrot in the top of the picture?,no,./data/gqa/../images/2321131.jpg,small,"def execute_command_8714882(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # crop would include the top of the picture so keep it in the query
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    return carrot_patches[0].simple_query(""How big is the carrot in the top of the picture?"")",0
1638685,What is the name of the vegetable that is on the yellow food?,broccoli,./data/gqa/../images/2385819.jpg,pepper,"def execute_command_1638685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")",0
5828256,Is the clock on a tower?,no,./data/gqa/../images/2384655.jpg,no,"def execute_command_5828256(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes there is only one clock and one tower
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    tower_patches = image_patch.find(""tower"")
    if len(clock_patches) == 0 or len(tower_patches) == 0:
        return image_patch.simple_query(""Is the clock on a tower?"") # if no clock or tower, query the image directly
    clock_patch = clock_patches[0]
    tower_patch = tower_patches[0]
    if clock_patch.vertical_center == tower_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",1
18937563,What kind of animal is orange?,cat,./data/gqa/../images/2379404.jpg,dog,"def execute_command_18937563(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to be orange
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is orange?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""orange""):
            return animal_patch.simple_query(""What kind of animal is orange?"")
    # If no animal is orange, query the image directly
    return image_patch.simple_query(""What kind of animal is orange?"")",0
14360113,What is the smiling woman holding?,"Error Codigo: '[' was never closed (Codex, line 18)",./data/gqa/../images/2352235.jpg,banana,"def execute_command_14360113(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this should be a function with an image argument
    image_patch = ImagePatch(image)
    smiling_patches = image_patch.find(""smiling"")
    # Question assumes only one smiling patch
    if len(smiling_patches) == 0:
        # If no smiling is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    smiling_patch = smiling_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return ""unknown""
    object_patch = object_patches[0]
    if smiling_patch.horizontal_center < object_patch.horizontal_center:
        return object_patch.best_text_match([""phone"", ""book"", ""laptop"", ""guitar"", ""keys"", ""purse"", ""wallet"", ""bottle"", ""bag"", ""envelope"", ""watch"", ""clock"", ""piano"", ""instrument"", ""dog"", ""cat"", ""bird"", ""fish"", ""frog"", ""turtle"", ""snake"", ""lizard"", ""scorpion"", ""spider"", ""bee"", ""ant"", ""worm"", ""mouse"", ""computer"", ""game""])
    else:
        return object_patch.best_text_match([""phone"", ""book"", ""laptop"", ""guitar"", ""keys"", ""purse"", ""wallet"", ""bottle"", ""bag"", ""envelope"", ""watch"", ""clock"", ""piano"", ""instrument"", ""dog"", ""cat"", ""bird"", ""fish"", ""frog"",",0
593188,Is the hair short?,yes,./data/gqa/../images/2381086.jpg,yes,"def execute_command_593188(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this one is not working properly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""hair"", ""short""))",1
10824666,Are there ladies to the left of the man that is wearing shorts?,no,./data/gqa/../images/2385924.jpg,yes,"def execute_command_10824666(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left of is a relation, so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    is_wearing_shorts = (man_patch.simple_query(""Is the man wearing shorts?"") == ""yes"")
    if not is_wearing_shorts:
        return ""no""
    ladies_patches = image_patch.find(""ladies"")
    # Question assumes one ladies patch
    if len(ladies_patches) == 0:
        return ""no""
    for ladies_patch in ladies_patches:
        if ladies_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no""",0
1890604,Is the gray car to the left or to the right of the garbage bin?,right,./data/gqa/../images/2372833.jpg,right,"def execute_command_1890604(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # car is to the right of the bin
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    for gray_car_patch in gray_car_patches:
        garbage_bin_patches = image_patch.find(""garbage bin"")
        # Question assumes only one garbage bin patch
        if len(garbage_bin_patches) == 0:
            # If no garbage bin is found, query the image directly
            return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
        for garbage_bin_patch in garbage_bin_patches:
            if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
                return ""left""
    return ""right""",1
7574939,Is there any table or plate that is white?,yes,./data/gqa/../images/2359185.jpg,yes,"def execute_command_7574939(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns ""yes"" or ""no""
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    plate_patches = image_patch.find(""plate"")
    tables_and_plates = table_patches + plate_patches
    for table_or_plate_patch in tables_and_plates:
        if table_or_plate_patch.simple_query(""Is the table/plate white?"") == ""yes"":
            return ""yes""
    return ""no""",1
12252101,Is it outdoors?,yes,./data/gqa/../images/2359418.jpg,no,"def execute_command_12252101(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""outdoor"", ""outdoor"")) # assumes one image",0
6943442,What cooking utensil is on the oven?,pan,./data/gqa/../images/2394601.jpg,kettle,"def execute_command_6943442(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # asks for the predicate of a relational verb (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What cooking utensil is on the oven?"")",0
2977077,The propeller that looks red is what pattern?,stripes,./data/gqa/../images/2402545.jpg,striped,"def execute_command_2977077(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # do we need to know if the propeller is red?
    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    for propeller_patch in propeller_patches:
        if propeller_patch.best_text_match([""red"", ""blue"", ""green""]) == ""red"":
            return propeller_patch.best_text_match([""plaid"", ""stripes"", ""polka dots""])
    # If no propeller is red, query the image directly
    return image_patch.simple_query(""The propeller that looks red is what pattern?"")",0
11190306,Which kind of animal is to the left of the train?,horse,./data/gqa/../images/2335202.jpg,horse,"def execute_command_11190306(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is to the left of the train?"")",1
5107190,Do you see both an airplane and a truck?,no,./data/gqa/../images/2399616.jpg,no,"def execute_command_5107190(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # -> bool
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)",1
4360982,How old is the child?,5,./data/gqa/../images/2333049.jpg,little,"def execute_command_4360982(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # This is a query about a property
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    child_patch = child_patches[0]
    return child_patch.simple_query(""How old is the child?"") # crop would include the child so keep it in the query",0
12536783,What kind of animal is in front of the pole?,elephant,./data/gqa/../images/2400415.jpg,elephants,"def execute_command_12536783(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")",0
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?,Error Ejecucion: ImagePatch.find() takes 2 positional arguments but 3 were given,./data/gqa/../images/2343442.jpg,right,"def execute_command_443846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # do not forget to import simple_qa
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    glasses_patch = glasses_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patch = man_patches[0]
    man_tshirt_patches = image_patch.find(""man"", ""t-shirt"")
    # Question assumes only one man patch
    if len(man_tshirt_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_tshirt_patch = man_tshirt_patches[0]
    if glasses_patch.horizontal_center > man_tshirt_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",0
18655269,Which room is it?,bedroom,./data/gqa/../images/2328704.jpg,bedroom,"def execute_command_18655269(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the name of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
7405860,Is it indoors?,yes,./data/gqa/../images/2376437.jpg,yes,"def execute_command_7405860(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: verify property
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""indoor""))",1
1705569,Does the pot on top of the stove look black?,no,./data/gqa/../images/2406620.jpg,yes,"def execute_command_1705569(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: this should be done by the simple_query function
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    pot_patch = pot_patches[0]
    stove_patches = image_patch.find(""stove"")
    # Question assumes only one stove patch
    if len(stove_patches) == 0:
        return ""no""
    if pot_patch.vertical_center < stove_patches[0].vertical_center:
        return ""yes""
    else:
        return ""no""",0
1028569,Are there both a cyclist and a helmet in the photo?,no,./data/gqa/../images/2326510.jpg,yes,"def execute_command_1028569(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # is there a helmet in the photo?
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)",0
13954115,Are there any men to the left of the person in the crowd?,yes,./data/gqa/../images/2402862.jpg,no,"def execute_command_13954115(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person in the crowd
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    person_patch = person_patches[0]
    men_patches = image_patch.find(""man"")
    for man_patch in men_patches:
        if man_patch.horizontal_center < person_patch.horizontal_center:
            return ""yes""
    return ""no""",0
12436797,What kind of device is to the left of the keyboard?,mouse,./data/gqa/../images/2319675.jpg,headphones,"def execute_command_12436797(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # a relation (next to) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"") # crop would include the device so keep it in the query",0
1017626,Who is inside the train?,people,./data/gqa/../images/2408028.jpg,man,"def execute_command_1017626(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one train patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Who is inside the train?"")
    return train_patches[0].simple_query(""Who is inside the train?"")",0
7650014,Which place is it?,park,./data/gqa/../images/2402045.jpg,park,"def execute_command_7650014(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not sure what the answer would be
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # not sure what the answer would be",1
15889871,What is the person to the left of the car doing?,walking,./data/gqa/../images/2361083.jpg,walking,"def execute_command_15889871(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # no function
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the person to the left of the car doing?"")",1
1310985,Is the yellow vehicle to the left of a lamp?,no,./data/gqa/../images/2411295.jpg,yes,"def execute_command_1310985(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # yellow vehicle and lamp
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        lamp_patches = image_patch.find(""lamp"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center > yellow_vehicle_patch.horizontal_center:
                return ""no""
    return ""yes""",0
646935,Which room is it?,office,./data/gqa/../images/2336424.jpg,office,"def execute_command_646935(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # room can be a list of rooms
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
9495263,Is the woman to the left or to the right of the man that wears a cap?,left,./data/gqa/../images/2397998.jpg,left,"def execute_command_9495263(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # this is a complex question
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    woman_patch = woman_patches[0]
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    cap_patch = cap_patches[0]
    if woman_patch.horizontal_center < cap_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
946016,Do you think the animal that is sitting-down is small or large?,small,./data/gqa/../images/2391364.jpg,small,"def execute_command_946016(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # has a relation (sitting-down), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")",1
9617920,Do the garbage can and the pan have the same color?,False,./data/gqa/../images/2365993.jpg,no,"def execute_command_9617920(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # -> bool
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    pan_patches = image_patch.find(""pan"")
    # Question assumes one garbage can and one pan patch
    if len(garbage_can_patches) == 0 or len(pan_patches) == 0:
        return False
    garbage_can_patch = garbage_can_patches[0]
    pan_patch = pan_patches[0]
    return garbage_can_patch.verify_property(""garbage can"", ""color"") == pan_patch.verify_property(""pan"", ""color"") # crop would include the color so keep it in the query",1
3578781,Which kind of clothing is black?,boots,./data/gqa/../images/2321843.jpg,jacket,"def execute_command_3578781(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # get clothing type
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    clothing_patch = clothing_patches[0]
    return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query",0
4695656,What is the lamp on?,table,./data/gqa/../images/2366034.jpg,nightstand,"def execute_command_4695656(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lamp on?"")",0
13696926,The homes that are to the left of the people have what color?,white,./data/gqa/../images/2321676.jpg,white,"def execute_command_13696926(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # -> str
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    people_patch = people_patches[0]
    homes_patches = image_patch.find(""homes"")
    # Question assumes only one homes patch
    if len(homes_patches) == 0:
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    homes_patch = homes_patches[0]
    if homes_patch.horizontal_center < people_patch.horizontal_center:
        return homes_patch.simple_query(""What color are the homes?"")
    return image_patch.simple_query(""The homes that are to the left of the people have what color?"")",1
16946079,What is on the wall?,blue,./data/gqa/../images/2355225.jpg,stuffed animals,"def execute_command_16946079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on the wall), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"") # crop would include the wall so keep it in the query",0
18986542,Is the napkin on the right side?,yes,./data/gqa/../images/2375683.jpg,yes,"def execute_command_18986542(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one napkin
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        return image_patch.simple_query(""Is the napkin on the right side?"")
    napkin_patch = napkin_patches[0]
    return bool_to_yesno(napkin_patch.horizontal_center > image_patch.horizontal_center)",1
11513897,What appliance is the label on?,blender,./data/gqa/../images/2411741.jpg,blender,"def execute_command_11513897(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # label is a predicate, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What appliance is the label on?"")",1
8240644,What is the color of the bird's tail?,brown,./data/gqa/../images/2331215.jpg,black,"def execute_command_8240644(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assuming only one bird patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What is the color of the bird's tail?"") # crop would include the tail so keep it in the query",0
5245080,Is he to the right or to the left of the camera?,right,./data/gqa/../images/2400302.jpg,left,"def execute_command_5245080(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is not used in this case
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is he to the right or to the left of the camera?"") # assumes one man patch",0
17800894,Are there both a window and a door in the picture?,Error Ejecucion: tuple index out of range,./data/gqa/../images/2412027.jpg,yes,"def execute_command_17800894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a list of images
    image_patch = ImagePatch(image[0])
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",0
191027873,Where is the snowboard?,in the air,./data/gqa/../images/2371443.jpg,snow,"def execute_command_191027873(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to know where the snowboard is
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snowboard?"")",0
1964079,Are the box and the paper the same color?,yes,./data/gqa/../images/2410495.jpg,yes,"def execute_command_1964079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # needs to be in the same ImagePatch
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    box_patch = box_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    return bool_to_yesno(box_patch.verify_property(""box"", ""same_color"") and paper_patch.verify_property(""paper"", ""same_color""))",1
-,-,-,-,-,-,0.51
